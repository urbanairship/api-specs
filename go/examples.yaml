components:
  schemas:
    absoluteWindow:
      - description: Example Absolute Time Window
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "date": {
                       "days": {
                          "start": "2020-01-01",
                          "end": "2020-01-15"
                       }
                    }
                 }
              }
    actionsObject:
      - description: Example Tag Actions
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "add_tag": [
                       "airship",
                       "blimp"
                    ],
                    "remove_tag": [
                       "boat",
                       "car"
                    ],
                    "share": "Check out Airship!",
                    "open": {
                       "type": "url",
                       "content": "http://www.urbanairship.com"
                    },
                    "app_defined": {
                       "some_app_defined_action": "some_value"
                    }
                 }
              }
      - description: Example Landing Page Action
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "open": {
                       "type": "landing_page",
                       "content": {
                          "body": "<html>content</html>",
                          "content_type": "text/html",
                          "content_encoding": "utf-8"
                       },
                       "fallback_url" : "https://www.urbanairship.com/settings"
                    }
                 }
              }
      - description: Example Open Phone App
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "open": {
                       "type": "url",
                       "content": "tel:15035551234"
                    }
                 }
              }
      - description: Example Deep Link Action
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "open": {
                       "type": "deep_link",
                       "content": "prefs",
                       "fallback_url": "https://www.urbanairship.com/settings"
                    }
                 }
              }
    activityObject:
      - description: Activity Audience Object
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "activity": "app_open",
                    "operator": "greater",
                    "value": 2,
                    "after": 3,
                    "precision": "days",
                    "where": {
                       "property": "/_triggering_push/campaigns/categories",
                       "operator": "equals",
                       "value": "neowise"
                    }
                 }
              }
    amazonOverrideWithTemplate:
      - description: Android Override With a Template
        examples:
          - lang: json
            source: |
              {
                 "amazon": {
                    "template": {
                       "fields": {
                          "title": "Shoe sale on {{level}} floor!",
                          "alert": "All the shoes are on sale {{name}}!",
                          "summary": "Don't miss out!",
                          "icon": "shoes",
                          "icon_color": "{{iconColor}}"
                       }
                    }
                 }
              }
    androidOverrideObject:
      - description: Android Override in a Notification
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "title": "Shoe sale",
                    "alert": "All the shoes are on sale!",
                    "summary": "Don't miss out!",
                    "extra": {
                        "url": "http://example.com",
                        "story_id": "1234",
                        "moar": "{\"key\": \"value\"}"
                    },
                    "icon": "shoes",
                    "icon_color": "#8B4513",
                    "notification_channel": "promos"
                 }
               }
      - description: Example Wearable Notification
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "local_only": true,
                    "wearable": {
                       "background_image": "http://example.com/background.png",
                       "extra_pages": [
                          {
                             "title": "Page 1 title - optional title",
                             "alert": "Page 1 title - optional alert"
                          },
                          {
                             "title": "Page 2 title - optional title",
                             "alert": "Page 2 title - optional alert"
                          }
                       ],
                       "interactive": {
                          "type": "ua_yes_no_foreground",
                          "button_actions": {
                             "yes": {
                                "add_tag": "butter",
                                "remove_tag": "cake",
                                "open": {
                                   "type": "url",
                                   "content": "http://www.urbanairship.com"
                                }
                             },
                             "no": {
                                "add_tag": "nope"
                             }
                          }
                       }
                    }
                 }
              }
    androidOverrideWithTemplate:
      - description: Android Override With a Template
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "template": {
                          "fields": {
                             "title": "Shoe sale on {{level}} floor!",
                             "alert": "All the shoes are on sale {{name}}!",
                             "summary": "Don't miss out!",
                             "icon": "shoes",
                             "icon_color": "{{iconColor}}"
                          }
                    },
                    "extra": {
                          "url": "http://example.com",
                          "story_id": "1234",
                          "moar": "{\"key\": \"value\"}"
                    },
                    "notification_channel": "promos"
                 }
              }
      - description: Android Override With a template_id
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "template": {
                          "template_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    },
                    "extra": {
                          "url": "http://example.com",
                          "story_id": "1234",
                          "moar": "{\"key\": \"value\"}"
                    },
                    "notification_channel": "promos"
                 }
              }
    atomicSelector:
      - description: Example Audience Selection by Tag
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "tag": "sfGiants",
                    "group": "favorite_teams"
                 }
              }
      - description: Example SMS Channel Audience
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "sms_id" :  {
                          "sender" : "US:12345",
                          "msisdn" : "15552243311"
                      }
                  }
              }
      - description: Example Audience Segment
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "segment" : "<segment-id>"
                  }
              }
      - description: Example Audience of Named Users
        examples:
          - lang: json
            source: |
              {
                 "audience" : {
                    "named_user" : "user-id-54320"
                 }
              }
    attributes:
      - description: Example Attributes Object
        examples:
          - lang: json
            source: |
              {
                 "device_attributes": {
                    "ua_device_os": "10",
                    "ua_country": "US",
                    "ua_device_model": "SM-G973U",
                    "ua_local_tz": "America/Los_Angeles",
                    "ua_app_version": "2020-02-01T002322-goat",
                    "ua_location_settings": "true",
                    "ua_language": "en",
                    "ua_sdk_version": "13.1.0",
                    "ua_carrier": "Verizon "
                 },
                 "attributes": {
                    "first_name": "Cool",
                    "last_name": "Person",
                    "birthdate": "1983-03-15T00:00:00",
                 }
              }
    campaignsObject:
      - description: Example Campaigns in a Push Payload
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "notification": {
                    "alert": "Taco Kitten wins Kentucky Derby by a whisker"
                 },
                 "campaigns": {
                    "categories": [
                       "kittens",
                       "tacos",
                       "horse_racing"
                    ]
                 },
                 "device_types": [ "ios", "android" ]
              }
    channelObject:
      - description: Example ios Channel
        examples:
          - lang: json
            source: |
              {
                 "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                 "device_type": "ios",
                 "installed": true,
                 "background": true,
                 "opt_in": false,
                 "push_address": "FE66489F304DC75B8D6E8200DFF8A456E8DAEACEC428B427E9518741C92C6660",
                 "created": "2020-08-08T20:41:06",
                 "last_registration": "2020-05-01T18:00:27",
                 "named_user_id": "some_id_that_maps_to_your_systems",
                 "alias": null,
                 "tags": [
                    "tag1",
                    "tag2"
                 ],

                 "tag_groups": {
                    "sports fan": ["Federer fan", "Messi fan"],
                    "music fan": [ "Beyonce", "Muse" ],
                    "ua_locale_country": [ "US" ],
                    "ua_locale_language": [ "en" ]
                 },

                 "ios": {
                    "badge": 0,
                    "quiettime": {
                       "start": null,
                       "end": null
                    },
                    "tz": "America/Los_Angeles"
                 }
              }
    complexEventSelector:
      - description: Compound Event Selector Using 'and'
        examples:
          - lang: json
            source: |
              {
                 "and": [
                    {
                       "key": "name",
                       "value": {
                          "equals": "POWER_LEVEL"
                       }
                    },
                    {
                       "key": "value",
                       "value": {
                          "greater_than": 9000,
                          "at_most": 10000
                       }
                    }
                 ]
              }
    compoundSelector:
      - description: Example with Implicit `OR`
        examples:
          - lang: json
            source: |
              {
                 "audience" : {
                    "tag" : ["apples", "oranges", "bananas"]
                 }
              }
      - description: Example with Nested Selectors
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "AND": [
                       {"OR": [
                          {"tag": "sports"},
                          {"tag": "entertainment"}
                       ]},
                       {"tag": "language_en"}
                    ]
                 }
              }
      - description: Example `NOT` Selector
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "AND": [
                       { "tag": "Federer fan" },
                       { "NOT":
                          { "tag": "Messi fan" }
                       }
                    ]
                 }
              }
    customEventObject:
      - description: Example Event
        examples:
          - lang: json
            source: |
              {
                 "occurred": "2020-05-02T02:31:22",
                 "user": {
                     "named_user_id": "cool.person"
                 },
                 "body": {
                     "name": "purchased",
                     "value": 239.85,
                     "transaction": "686f53d4-7e0s-36d7-234e-c9792dac6e7b",
                     "interaction_id": "your.store/us/en_us/pd/shoe/pid-123456/pgid-123456",
                     "interaction_type": "email",
                     "properties": {
                        "description": "sky high",
                        "brand": "victory",
                        "colors": [
                        "red",
                        "blue"
                        ],
                        "items": [
                        {
                           "text": "New Line Sneakers",
                           "price": "$ 79.95"
                        },
                        {
                           "text": "Old Line Sneakers",
                           "price": "$ 79.95"
                        },
                        {
                           "text": "Blue Line Sneakers",
                           "price": "$ 79.95"
                        }
                        ],
                        "name": "Cool Person",
                        "userLocation": {
                        "state": "CO",
                        "zip": "80202"
                        }
                     },
                    "session_id": "22404b07-3f8f-4e42-a4ff-a996c18fa9f1"
                 }
              }
    dateAttribute:
      - description: Date Attribute Example
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "birth_date",
                    "operator": "equals",
                    "precision": "month_day",
                    "value": "05-04"
                 }
              }
      - description: Compound selector using before and after date operators
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "AND": [
                          {
                             "attribute": "birth_date",
                             "operator": "after",
                             "value": 55,
                             "precision": "years"
                          },
                          {
                             "attribute": "birth_date",
                             "operator": "before",
                             "value": 40,
                             "precision": "years"
                          }
                    ]
                 },
                 "device_types": [
                    "android"
                 ],
                 "notification": {
                    "alert": "Hello, Generation X!"
                 }
              }
    email:
      - description: Example Object
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@email.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22"
                    },
                    {
                      "ua_address" : "ben@icetown.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10"
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "subject": "Welcome to the Winter Sale! ",
                    "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                    "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                    "message_type": "transactional",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "click_tracking": false,
                    "open_tracking": false,
                    "attachments": [
                      {
                        "id": "0e10a6b9-725c-4f6b-9af2-9ef5b31328c0",
                      },
                      {
                        "id": "5503b5fe-ed69-4609-bef6-6fef0e6e428f"
                      }
                    ]
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
    emailOverrideObject:
      - description: Example with Email Notification
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "named_user": "jane_doe"
                 },
                 "device_types": [
                    "email",
                    "android"
                 ],
                 "notification": {
                    "android": {
                       "alert": "Hello Android user!"
                    },
                    "email": {
                       "subject": "Did you get that thing I sent you?",
                       "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                       "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                       "message_type": "transactional",
                       "sender_name": "Airship",
                       "sender_address": "team@urbanairship.com",
                       "reply_to": "no-reply@urbanairship.com",
                       "click_tracking": false,
                       "open_tracking": false,
                       "attachments": [
                          {
                             "id": "0e10a6b9-725c-4f6b-9af2-9ef5b31328c0",
                          },
                          {
                             "id": "5503b5fe-ed69-4609-bef6-6fef0e6e428f"
                          }
                       ]
                    }
                 }
              }
    emailOverrideWithTemplate:
      - description: Example with Inline Template
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@email.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "template": {
                      "variable_details": [
                        {
                          "key": "name",
                          "default_value": "you"
                        }
                      ],
                      "fields": {
                        "subject": "Hi {{customer.first_name}}, your products are ready!",
                        "plaintext_body": "Hi {{customer.first_name}},/n Your order is ready for pickup at our {{customer.location}} store!/n Your order:/n {{#each cart}}{{this.qty}}x {{this.name}}/n{{/each}} Thanks,/n Your local AwesomeStore."
                      }
                    }
                  }
                }
              }
      - description: Example with template_id
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@email.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "template": {
                      "template_id": "9335bb2a-2a45-456c-8b53-42af7898236a"
                    }
                  }
                }
              }
    error:
      - description: 400 Response
        examples:
          - lang: json
            source: |
              {
                "ok" : false,
                "error" : "Could not parse request body.",
                "error_code" : 40000,
                "details" : {
                    "error" : "The key 'alert1' is not allowed in this context",
                    "path" : "notification.alert1",
                    "location" : {
                        "line" : 5,
                        "column" : 18
                    }
                }
      - description: 400 Response Without Location
        examples:
          - lang: json
            source: |
              {
                  "ok": false,
                  "error": "Could not parse request body.",
                  "error_code": 40902,
                  "details": {
                      "error": "malformed sender"
                  }
              }
      - description: 404 Response
        examples:
          - lang: json
            source: |
              {
                  "ok": false,
                  "error": "Entity not found",
                  "error_code": 40401
              }
    eventIdentifier:
      - description: Simple `Open` Event Identifier
        examples:
          - lang: json
            source: |
              {
                "event": "open"
              }
      - description: Tag Added Example
        examples:
          - lang: json
            source: |
              {
                "tag_added": "cool_user"
              }
      - description: Custom Event Example
        examples:
          - lang: json
            source: |
              {
                "custom_event": {
                  "key": "name",
                  "value": {
                    "equals": "christmas"
                  }
                }
              }
    experimentObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "name": "<experiment name>",
                 "description": "<experiment description>",
                 "control": "<control group>",
                 "audience": "<audience-selection>",
                 "device_types": "<device-types>",
                 "campaigns": "<campaigns>",
                 "variants": "[<variant specifications>]",
                 "id": "<id>",
                 "created_at": "timestamp",
                 "push_id": "<push_id>"
              }
    feedReferences:
      - description: Example Feed References
        examples:
          - lang: json
            source: |
              {
                 "feed_references": {
                    "feeds": [
                       {
                          "name": "featured_product",
                          "params": {
                             "sub_category": "shoes"
                          },
                          "on_error": "continue"
                       }
                    ],
                    "defaults": {
                       "featured_product": {
                          "category": "featured"
                       }
                    }
                 }
              }
    geofenceObject:
      - description: Polygon Geofence
        examples:
          - lang: json
            source: |
              {
                  "type": "POLYGON",
                  "points": [
                      {
                          "latitude": 1.000,
                          "longitude": 90
                      },
                      {
                          "latitude": 2.000,
                          "longitude": 90
                      },
                      {
                          "latitude": 3.000,
                          "longitude": 0
                      }
                  ]
              }
      - description: Circle Geofence
        examples:
          - lang: json
            source: |
              {
                  "type": "CIRCLE",
                  "center": {
                      "latitude": 0,
                      "longitude": 0
                  },
                  "radius": 1000
              }
    inAppObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "device_types": [ "ios", "android" ],
                 "notification": { "alert": "This part appears on the lockscreen" },
                 "in_app": {
                    "alert": "This part appears in-app!",
                    "display_type": "banner",
                    "expiry": "2020-04-01T12:00:00",
                    "display": {
                       "position": "top"
                    },
                    "actions": {
                       "add_tag": "in-app"
                    }
                 }
              }
    interactiveObject:
      - description: Example with `type` Actions
        examples:
          - lang: json
            source: |
              {
                 "interactive": {
                    "type": "ua_yes_no_foreground",
                    "button_actions": {
                       "yes": {
                          "add_tag": "more_cake_please",
                          "remove_tag": "lollipop",
                          "open": {
                             "type": "url",
                             "content": "http://www.urbanairship.com"
                          }
                       },
                       "no": {
                          "add_tag": "nope"
                       }
                    }
                 }
              }
      - description: Example with `ua_share` Actions
        examples:
          - lang: json
            source: |
              {
                 "interactive": {
                    "type": "ua_share",
                    "button_actions": {
                       "share": { "share": "Look at me! I'm on a boat." }
                    }
                 }
              }
    iosOverrideObject:
      - description: Example with Media Attachment
        examples:
          - lang: json
            source: |
              {
                  "audience": "all",
                  "device_types": [
                          "ios"
                      ],
                  "notification": {
                      "ios": {
                          "thread_id": "sfGiants_news",
                          "alert": {
                              "title": "Kevin Gausman Throws a Perfect Game",
                              "body": "Kevin Gausman stymies the Houston Astros for San Francisco's second perfect game in franchise history.",
                              "summary-arg": "San Francisco Giants",
                              "summary-arg-count": 1
                          },
                          "relevance-score": 1.0,
                          "interruption_level": "passive",
                          "sound": "strike-call",
                          "media_attachment": {
                              "content": {
                                  "title": "Kevin Gausman",
                                  "body": "Gausman strikes out Justin Turner"
                              },
                              "options": {
                                  "crop": {
                                      "height": 0.5,
                                      "width": 0.5,
                                      "x": 0.25,
                                      "y": 0.25
                                  },
                                  "time": 15
                              },
                              "url": "https://media.giphy.com/media/6nJmrhlu4aL1m/giphy.gif"
                          },
                          "mutable_content": 1
                      }
                  }
              }
    iosOverrideWithTemplate:
      - description: iOS Override With a Template
        examples:
          - lang: json
            source: |
              {
                 "ios": {
                    "thread_id": "sfGiants_news",
                    "template": {
                       "fields": {
                          "title": "{{NAME}} Throws a Perfect Game",
                          "body": "{{NAME}} stymies the {{OTHER_TEAM}} for San Francisco's first perfect game in franchise history.",
                          "subtitle": "San Francisco Giants {{DATE}}"
                       }
                    },
                    "sound": "strike-call",
                    "media_attachment": {
                       "content": {
                          "title": "Kevin Gausman",
                          "body": "Gausman strikes out Justin Turner"
                       },
                       "options": {
                          "crop": {
                             "height": 0.5,
                             "width": 0.5,
                             "x": 0.25,
                             "y": 0.25
                          },
                          "time": 15
                       },
                       "url": "https://media.giphy.com/media/6nJmrhlu4aL1m/giphy.gif"
                    },
                    "mutable_content": 1
                 }
              }
    listMetadataObject:
      - description: List Metadata Object
        examples:
          - lang: json
            source: |
              {
                "name" : "ua_attributes_my_new_list",
                "description" : "First of many attributes lists!",
                "extra" : {
                  "filename": "attributes.csv",
                  "source": "CRM"
                }
              }
    listObject:
      - description: List Response Object
        examples:
          - lang: json
            source: |
              {
                "ok": true,
                "lists": [
                    {
                      "name": "ua_attributes_my_list",
                      "description": "My first list",
                      "extra": {
                          "filename": "list.csv",
                          "source": "crm"
                      },
                      "created": "2020-05-13T21:41:25",
                      "last_updated": "2020-05-13T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_my_list/errors",
                      "status": "ready"
                    },
                    {
                      "name": "ua_attributes_another_list",
                      "description": "My second list",
                      "extra": {
                          "filename": "list2.csv",
                          "source": "api"
                      },
                      "created": "2020-05-14T21:41:25",
                      "last_updated": "2020-05-14T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_another_list/errors",
                      "status": "ready"
                    }
                ]
              }
    localization:
      - description: Example Array of Localizations
        examples:
          - lang: json
            source: |
              {
                "localizations": [
                    {
                       "language": "de",
                       "country": "AT",
                       "notification": {
                          "alert": "Grüss Gott"
                       }
                    },
                    {
                       "language": "de",
                       "country": "DE",
                       "notification": {
                          "alert": "Guten Tag"
                       }
                    }
                 ]
              }
    messageObject:
      - description: Message Object Example
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "notification": {
                    "ios": {
                       "badge": "+1"
                    }
                 },
                 "message": {
                    "title": "This week's offer",
                    "body": "<html><body><h1>blah blah</h1> etc...</html>",
                    "content_type": "text/html",
                    "expiry": "2020-04-01T12:00:00",
                    "extra": {
                       "offer_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    },
                    "icons": {
                       "list_icon": "http://cdn.example.com/message.png"
                    }
                 }
              }
    messageObjectWithTemplate:
      - description: Message Object Example
        examples:
          - lang: json
            source: |
              {
                 "message": {
                    "template": {
                       "fields": {
                          "title": "Save on {{product}} through {{end_date}}!",
                          "body": "<html><body><h1>here's a cool {{offer}}</h1> etc...</html>"
                       }
                    },
                    "content_type": "text/html",
                    "expiry": "2020-04-01T12:00:00",
                    "extra": {
                       "offer_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    },
                    "icons": {
                       "list_icon": "http://cdn.example.com/message.png"
                    }
                 }
              }
    mms:
      - description: Example create-and-send for MMS without template
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send": [
                      {
                          "ua_msisdn": "15558675309",
                          "ua_sender": "15551234567",
                          "ua_opted_in": "2020-11-11T18:45:30",
                      }
                  ]
                },
                "device_types": [
                  "mms"
                ],
                "notification": {
                  "mms": {
                    "fallback_text": "Delivery failed, but you should still check this out.",
                    "subject" : "Hey, thanks for subscribing!",
                    "slides": [
                      {
                        "text": "Check this out!",
                        "media": {
                            "url": "https://i.imgur.com/1t466Om.jpg",
                            "content_type": "image/jpeg",
                            "content_length": 52918
                          }
                        }
                      ]
                    }
                  }
                }
    mmsOverrideObject:
      - description: Example MMS Notification
        examples:
          - lang: json
            source: |
              {
                 "mms": {
                    "subject" : "Double Rainbows",
                    "fallback_text": "See https://urbanairship.com/double-rainbows?ua-tag-add=rainbows:used_fallback_text for double rainbows!",
                    "shorten_links": true,
                    "slides" : [
                       {
                          "text": "A double rainbow is a wonderful sight where you get two spectacular natural displays for the price of one.",
                          "media": {
                             "url": "https://www.metoffice.gov.uk/binaries/content/gallery/mohippo/images/learning/learn-about-the-weather/rainbows/full_featured_double_rainbow_at_savonlinna_1000px.jpg",
                             "content_type": "image/jpeg",
                             "content_length": 238686
                          }
                       }
                    ]
                 },
                 "device_types": ["sms"]
              }
    mmsOverrideWithTemplate:
      - description: Example Object with Merge Fields in Audience Object
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "US:12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "delivery_image": "url",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver",
                      },
                      "order" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "mms" ],
                "notification" : {
                  "mms" : {
                    "template" : {
                      "fields" : {
                        "subject" : "Your order is on the way!",
                        "slide_1_text": "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} just shipped.",
                        "fallback text": "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} just shipped",
                      }
                    }
                    "slides": [
                      {
                        "media": {
                          "url": "https://www.deliveryimage.com/order12345.jpg",
                          "content_type": "image/jpeg",
                          "content_length": 123100
                        }
                      }
                    ]
                  }
                }
              }
      - description: Example with Inline Template
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "US:12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "delivery_image": "https://www.deliveryimage.com/order12345.jpg",
                      "content-length": "1234567",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "order" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "mms" ],
                "notification" : {
                  "mms" : {
                    "template" : {
                      "fields" : {
                        "subject": "Your order is on the way!",
                        "slide_1_text" : "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} was delivered!",
                        "fallback_text": "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} was delivered!"
                      }
                    },
                    "slides": [
                      {
                        "media": {
                          "url": "https://www.deliveryimage.com/order12345.jpg",
                          "content_type": "image/jpeg",
                          "content_length": 123100
                        }
                      }
                    ]
                  }
                }
              }
      - description: Example with template_id
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "US:12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "delivery_image": "https://www.deliveryimage.com/order12345.jpg",
                      "content-length": "1234567",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "order" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "mms" ],
                "notification" : {
                  "mms" : {
                    "template" : {
                      "template_id" : "9335bb2a-2a45-456c-8b53-42af7898236a"
                    },
                    "slides": [
                      {
                        "media": {
                          "url": "https://cdn.mycdn.com/coolImage.jpg",
                          "content_type": "image/jpeg",
                          "content_length": 123100
                        }
                      }
                    ]
                  }
                }
              }
    namedUserResponseBody:
      - description: Example Named User
        examples:
          - lang: json
            source: |
              {
                "named_user": {
                    "named_user_id": "user-id-1234",
                    "tags": {
                      "loyalty program": [
                          "silver-member",
                          "ten-plus-years",
                          "valued-customer"
                      ],
                      "crm id": [
                          "abc-123-def-456"
                      ]
                    },
                    "attributes": {
                      "item_purchased": "Fur removal tool",
                      "cats_name": "Sammy",
                      "pets_age": 12
                    },
                    "user_attributes": {
                      "ua_country": "US",
                      "ua_language": "en",
                      "ua_tz": "America/Los_Angeles"
                    },
                    "channels": [
                      {
                          "channel_id": "dceafd02-b852-4305-83df-98b65fa40dd4",
                          "device_type": "ios",
                          "installed": true,
                          "opt_in": true,
                          "push_address": "FFFF",
                          "created": "2020-04-08T20:41:06",
                          "last_registration": "2020-05-01T18:00:27",
                          "tags": [
                            "meow"
                          ]
                      }
                    ]
                }
              }
    notificationObject:
      - description: Example Notification with All Platforms
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "device_types": [
                    "ios",
                    "android",
                    "amazon",
                    "web",
                    "email",
                    "wns",
                    "open::toaster"
                 ],
                 "notification": {
                    "ios": {
                       "alert": "Hello, iDevices"
                    },
                    "android": {
                       "alert": "These are not the...yeah, lame joke."
                    },
                    "amazon": {
                       "alert": "Read any good books lately?"
                    },
                    "web": {
                       "alert": "Oh the tangled web we weave"
                    },
                    "email": {
                       "subject": "Did you get that thing I sent you?",
                       "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                       "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                       "message_type": "commercial",
                       "sender_name": "Airship",
                       "sender_address": "team@urbanairship.com",
                       "reply_to": "no-reply@urbanairship.com"
                    },
                    "wns": {
                       "alert": "Developers, developers, developers."
                    },
                    "open::toaster": {
                       "alert": "Would you like avocados with that?"
                    }
                 }
              }
    numberAttribute:
      - description: Number Attribute Example
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "lifetime_value",
                    "operator": "greater",
                    "value": 15000
                 }
              }
    okResponseObject:
      - description: Example OK Response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
              }
      - description: Example OK with Identifiers
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "9d78a53b-b16a-c58f-b78d-181d5e242078"
                  ]
              }
    open:
      - description: Example Object
        examples:
          - lang: json
            source: |
              {
                "audience" : {
                  "create_and_send": [
                    {
                      "ua_address" : "36d5a261-0454-40f5-b952-942c4b2b0f22",
                      "name": "Perry"
                    }
                  ]
                },
                "device_types" : [ "open::smart_fridge" ],
                "notification" : {
                    "open::smart_fridge": {
                        "template": {
                            "fields": {
                                "alert" : "Hey {{name}}, you're out of ice cream!"
                            }
                        }
                    }
                },
                "campaigns": {
                    "categories": ["needs_ice_cream", "cookies_and_cream"]
                }
              }
    openChannelOverrideObject:
      - description: Example with Open Channel Override
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "device_types": [
                   "open::smart_toaster",
                   "open::smart_fridge",
                   "ios"
                 ],
                 "notification": {
                    "alert": "A generic alert sent to all platforms specified in device_types",
                    "open::smart_toaster": {
                       "title": "Toaster Alert!",
                       "alert": "a shorter alert for toaster users",
                       "extra": {
                          "some_info": "for toasters only",
                          "some_id": "671ecd12-ad56-4b2f-98f1-107ce33d33e6"
                       }
                    },
                    "open::smart_fridge": {
                       "alert": "a longer alert for users of smart fridges, who have more space.",
                       "summary": "a longer summary of some content.",
                       "media_attachment": "https://example.com/cat_standing_up.jpeg",
                       "interactive": {
                          "type": "ua_yes_no_foreground",
                          "button_actions": {
                             "yes": {
                                "open": {
                                   "type": "url",
                                   "content": "http://www.urbanairship.com"
                                }
                             },
                             "no": {
                                "app_defined": {
                                   "foo": "bar"
                                }
                             }
                          }
                       }
                    }
                 }
              }
    pipelineObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "name":"The Darkest Pipeline",
                 "enabled":true,
                 "immediate_trigger":"first_open",
                 "outcome":{
                    "push":{
                       "audience":"triggered",
                       "device_types":[
                          "ios",
                          "android"
                       ],
                       "notification":{
                          "alert":"Cool goatee, Abed"
                       }
                    }
                 },
                 "timing":{
                    "delay":{
                       "seconds":7200
                    },
                    "schedule":{
                       "type":"local",
                       "miss_behavior":"wait",
                       "dayparts":[
                          {
                             "days_of_week":[
                                "thursday"
                             ],
                             "allowed_times":[
                                {
                                   "preferred":"21:30:00"
                                }
                             ]
                          }
                       ]
                    }
                 }
              }
      - description: Example email pipeline
        examples:
          - lang: json
            source: |
              {
               "name":"Read Receipt",
               "enabled":true,
               "immediate_trigger": {
                  "tag_added": "newSubscription"
               },
               "outcome":{
                  "push":{
                     "audience":"triggered"
                     },
                     "device_types": [
                        "email"
                     ],
                     "notification": {
                        "email": {
                           "subject": "Did you get that thing I sent you?",
                           "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                           "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                           "message_type": "commercial",
                           "sender_name": "Airship",
                           "sender_address": "team@urbanairship.com",
                           "reply_to": "no-reply@urbanairship.com"
                        }
                     }
                  },
                 "timing":{
                    "delay":{
                       "seconds":7200
                    }
                 }
              }
    pointObject:
      - description: Coordinate Point Example
        examples:
          - lang: json
            source: |
              {
                  "latitude": 45,
                  "longitude": 179.999999
              }
    pushObject:
      - description: Example Push Object
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "OR": [
                       {
                          "tag": [
                             "sports",
                             "entertainment"
                          ]
                       },
                       {
                          "ios_channel": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5"
                       }
                    ]
                 },
                 "notification": {
                    "alert": "Hi from Airship!{{#if super_sale }} We're having a sale on {{ products.0.name }}!{{/if}}",
                    "ios": {
                       "extra": {
                          "url": "http://www.urbanairship.com"
                       }
                    }
                 },
                 "options": {
                    "expiry": "2020-04-01T12:00:00"
                 },
                 "message": {
                    "title": "Message title",
                    "body": "<Your message here>",
                    "content_type": "text/html"
                 },
                 "in_app": {
                    "alert": "This part appears in-app!",
                    "display_type": "banner",
                    "expiry": "2020-04-01T12:00:00",
                    "display": {
                       "position": "top"
                    }
                 },
                 "device_types": [ "ios", "wns", "android" ],
                 "global_attributes": {
                    "super_sale": true,
                    "products": [
                        {"id": 1, "name": "New Line Sneakers", "price": "79.95"},
                        {"id": 2, "name": "Old Line Sneakers", "price": "59.95"}
                    ]
                 }
              }
      - description: Example Personalized Push
        examples:
          - lang: json
            source: |
              {
                 "device_types": [
                    "sms"
                 ],
                 "options": {
                    "personalization": true
                 },
                 "notification": {
                    "sms": {
                       "alert": "Hi {{name}}, {{#feed \"weather_updates\" kw="today" as |weather|}}It's going to be {{weather.temp}} in {{weather.loc}} today!{{/feed}}",
                    }
                 },
                 "audience": {
                    "tag": "local_updates",
                    "group": "weather"
                 },
                 "feeds": [
                    {
                       "name": "weather_updates",
                       "params": {
                          "kw": "today"
                       }
                    }
                 ]
              }
      - description: Example Localized Push
        examples:
          - lang: json
            source: |
              {
                "device_types": [ "ios", "android" ]
                "audience": {
                   "tag": "needs_a_greeting",
                   "group": "new_customer"
                },
                "notification": {
                   "alert": "Hi!"
                },
                "localizations": [
                    {
                       "language": "de",
                       "country": "AT",
                       "notification": {
                          "alert": "Grüss Gott"
                       }
                    },
                    {
                       "language": "de",
                       "country": "DE",
                       "notification": {
                          "alert": "Guten Tag"
                       }
                    }
                ]
              }
    pushTemplatePayload:
      - description: Push Template Payload Example
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "tag": [
                       "yanny",
                       "laurel"
                    ]
                 },
                 "device_types": [
                    "email",
                    "ios",
                    "android",
                    "web"
                 ],
                 "merge_data": {
                    "template_id": "8cce6cc8-7d78-43c7-80b5-81ac24c07672",
                    "substitutions": {
                       "FIRST_NAME": "Bob",
                       "LAST_NAME": "Takahashi",
                       "TITLE": null
                    }
                 },
                 "campaigns": {
                    "categories": [
                       "winter sale",
                       "west coast"
                    ]
                 }
              }
    regionObject:
      - description: Example Polygon-type Geofence Imported from Gimbal
        examples:
          - lang: json
            source: |
              {
                  "region_id": "abe5deb3-00d0-446e-8c5d-94b6421a01e0",
                  "name": "My Favorite Place",
                  "created_at": "2020-06-09T12:34:56",
                  "updated_at": "2020-06-09T12:34:56",
                  "geofence": {
                      "type": "POLYGON",
                      "points": [
                          {
                              "latitude": 90.0,
                              "longitude": 180.0
                          },
                          {
                              "latitude": 90.0,
                              "longitude": 180.0
                          },
                          {
                              "latitude": 0.0,
                              "longitude": 0.0
                          }
                      ]
                  },
                  "beacons": [
                      {
                          "name": "entryway",
                          "id": "VLSHLAOEXOFCMLDVTKFQ"
                      },
                      {
                          "name": "Exhibit A",
                          "id": "ZAQQMNOZKRFCRPYEUCZI"
                      }
                  ],
                  "attributes": {
                      "store_name": "REI"
                  },
                  "source_info": {
                      "source": "GIMBAL",
                      "region_id": "4BPSFLKJSDFLKJSDFLKJ",
                      "vendor_href": "http://api.gimbal.com/2/places/4BPSFLKJSDFLKJSDFLKJ"
                  }
              }
    relativeWindow:
      - description: Example Relative Time Window
        examples:
          - lang: json
            source: |
              {
                "date": {
                   "days": {
                      "recent": 1
                   }
                }
              }
    scheduleObject:
      - description: Example Schedule
        examples:
          - lang: json
            source: |
              {
                  "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109",
                  "schedule": {"scheduled_time": "2020-04-01T18:45:30"},
                  "name": "My schedule",
                  "push": {
                      "audience": {"tag": "49ers"},
                      "device_types": [ "ios", "android" ],
                      "notification": {"alert": "Touchdown!"},
                      "options": {"expiry": 10800}
                  }
              }
    scheduleSpec:
      - description: Global Schedule
        examples:
          - lang: json
            source: |
              {
                 "scheduled_time": "2020-04-01T18:45:30"
              }
      - description: Best Time Example
        examples:
          - lang: json
            source: |
              {
                "best_time": {
                  "send_date": "2020-06-01"
                }
              }
      - description: Local Time
        examples:
          - lang: json
            source: |
              {
                 "local_scheduled_time": "2020-04-01T18:45:30"
              }
    sms:
      - description: Example Object
        examples:
          - lang: json
            source: |
              {
               "audience": {
                  "create_and_send" : [
                    {
                      "ua_msisdn": "15558675309",
                      "ua_sender": "US:12345",
                      "ua_opted_in": "2020-11-11T18:45:30"
                    }
                  ]
                },
                "device_types" : [ "sms" ],
                "notification" : {
                  "sms": {
                    "alert": "Check out our winter sale! https://www.mysite.com/amazingly/long/url-that-I-want-to-shorten",
                    "expiry": 172800,
                    "shorten_links": true
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
    smsOverrideObject:
      - description: Example SMS Notification
        examples:
          - lang: json
            source: |
              {
                  "audience": {
                     "named_user": "user"
                  },
                  "notification": {
                     "alert": "A generic alert sent to all platforms without overrides in device_types",
                     "sms": {
                        "alert": "A shorter alert with a link for SMS users to click https://www.mysite.com/long/form/url?ua-tag-add=this_group:this_tag",
                        "expiry": 172800,
                        "shorten_links": true
                     }
                  },
                  "device_types": [ "sms" ]
              }
    smsOverrideWithTemplate:
      - description: Example Object with Merge Fields in Audience Object
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "US:12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver",
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "sms" ],
                "notification" : {
                  "sms" : {
                    "template" : {
                      "fields" : {
                        "alert" : "Hi, {{customer.first_name}}, your {{#each cart}}{{this.name}}{{/each}} are ready to pickup at our {{customer.location}} location!"
                      }
                    }
                  }
                },
                "campaigns" : {
                  "categories" : [ "order-pickup" ]
                }
              }
      - description: Example Object with template_id
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "US:12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver",
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "sms" ],
                "notification" : {
                  "sms" : {
                    "template" : {
                      "template_id": "9335bb2a-2a45-456c-8b53-42af7898236a"
                    }
                  }
                }
              }
    snippetReferences:
      - description: >
          Snippet References example: The `copyright` snippet is loaded by the
          `snippet_references` object and inserted at the end of the `alert`
          text.
        examples:
          - lang: json
            source: |
              {
                 "notification": {
                    "alert": "Hi {{ name }}: Thanks for your purchase! {{> copyright }}"
                 },
                 "snippet_references": {
                    "snippets": [
                       {
                          "name": "copyright"
                       }
                    ]
                 }
              }
    subscriptionListObject:
      - description: Example subscription list object
        examples:
          - lang: json
            source: |
              {
                "action": "subscribe",
                "list_id": "exciting_news"
              }
    tagGroupObject:
      - description: A simple tag group that has 2 tags associated with the group tags.
        examples:
          - lang: json
            source: |
              {
                "sports fan": ["Federer fan", "Messi fan"]
              }
      - description: >-
          A simple Airship-specific tag group, associating one tag with the
          group
        examples:
          - lang: json
            source: |
              {
                "tag_groups": {
                    "ua_locale_country": ["US"]
                }
              }
      - description: >-
          An array of Tag Groups for a channel. Channels can have
          Airship-specific tag groups; named users do not have Airship-specific
          Tag Groups.
        examples:
          - lang: json
            source: |
              {
                "tag_groups": [
                    {
                      "sports fan": [
                          "Federer fan",
                          "Messi fan"
                      ]
                    },
                    {
                      "music fan": [
                          "Beyonce",
                          "Muse"
                      ]
                    },
                    {
                      "ua_locale_country": [
                          "US"
                      ]
                    },
                    {
                      "ua_locale_language": [
                          "en"
                      ]
                    }
                ]
              }
      - description: >-
          An array of Tag Groups for a Named User. Named users do not have
          Airship-specific tag groups.
        examples:
          - lang: json
            source: |
              {
                "tags": {
                    "crm_id": [
                      "abc-123-def-456"
                    ],
                    "loyalty program": [
                      "silver-member",
                      "ten-plus-years",
                      "valued-customer"
                    ]
                }
              }
    templateObject:
      - description: Basic Template Object
        examples:
          - lang: json
            source: |
              {
                 "name": "<template name>",
                 "description": "<template description>",
                 "variables": ["<variable specifications>"],
                 "push": "<push-object>",
                 "id": "<template-id>",
                 "created_at" : "timestamp",
                 "modified_at" : "timestamp",
                 "last_used" : "timestamp"
              }
    templatePushObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "OR" : [
                          { "tag" : ["sports", "entertainment"]},
                          { "device_token" : "871922F4F7C6DF9D51AC7ABAE9AA5FCD7188D7BFA19A2FA99E1D2EC5F2D76506" },
                          { "apid" : "5673fb25-0e18-f665-6ed3-f32de4f9ddc6" }
                      ]
                  },
                  "device_types" : [ "ios", "wns" ],
                  "merge_data": {
                      "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "substitutions": {
                          "FIRST_NAME": "Bob"
                      }
                  }
              }
    templateVariableObject:
      - description: Template Variable Example
        examples:
          - lang: json
            source: |
              {
                 "key" : "<key>",
                 "name" : "<variable name>",
                 "description" : "<variable description>",
                 "default_value" : "<fallback value>"
              }
    textAttribute:
      - description: Text Attribute Example
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "item_purchased",
                    "operator": "contains",
                    "value": "jeans"
                 }
              }
    webOverrideObject:
      - description: Example with Web Override
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "channel": "cab69081-0196-4f6b-91dc-53bc88a2e6ce"
                 },
                 "device_types": [
                    "web"
                 ],
                 "notification": {
                    "alert": "Hello, world!",
                    "web": {
                       "alert": "Hello Web World",
                       "title": "A Custom Web Title",
                       "require_interaction": true,
                       "buttons": [
                          {
                             "id": "yes",
                             "label": "Yes",
                             "actions": {
                                "open": {
                                   "type": "home"
                                },
                                "add_tag": [
                                   "new_tag"
                                ]
                             }
                          },
                          {
                             "id": "no",
                             "label": "No"
                          }
                       ],
                       "extra": {
                          "story_id": "1234",
                          "moar": "{\"key\": \"value\"}"
                       }
                    }
                 }
              }
    webOverrideWithTemplate:
      - description: Web Override with a Template
        examples:
          - lang: json
            source: |
              {
                 "web": {
                    "template": {
                       "fields": {
                          "alert": "Vote now, {{name}}!",
                          "title": "Geese? Or ducks!",
                          "icon": "{{icon}}"
                       }
                    },
                    "require_interaction": true,
                    "buttons": [
                       {
                          "id": "yes",
                          "label": "Yes",
                          "actions": {
                             "open": {
                                "type": "home"
                             },
                             "add_tag": ["new_tag"]
                          }
                       },
                       {
                       "id": "no",
                       "label": "No"
                       }
                    ],
                    "extra": {
                       "story_id": "1234",
                       "moar": "{\"key\": \"value\"}"
                    }
                 }
              }
      - description: Web Override with a template_id
        examples:
          - lang: json
            source: |
              {
                 "web": {
                    "template": {
                       "template_id": "1ad69081-c196-af21-41dc-53bc89a2edc5"
                    },
                    "require_interaction": true,
                    "extra": {
                       "story_id": "1234",
                       "moar": "{\"key\": \"value\"}"
                    }
                 }
              }
    whereObject:
      - description: >
          Example payload to an audience of users who have opened your app as a
          result of receiving a specific push ID.
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "activity": "app_open",
                    "metric": "count",
                    "operator": "greater",
                    "value": 0,
                    "where": {
                       "property": "/_triggering_push/push_id",
                       "operator": "equals",
                       "compare_as": "text",
                       "value": "636abb88-5642-4035-998d-a04c93c499ad"
                    }
                 },
                 "device_types": [
                    "ios", "android"
                 ],
                 "notification": {
                    "alert": "Did you get that thing I sent you?"
                 }
              }
paths:
  /api/attachments:
    post:
      - description: 'Example: Create email attachment'
        examples:
          - lang: HTTP
            source: |
              POST /attachments HTTP/1.1
              Authorization: Bearer <authorization token>
              Content-Type: application/json
              Accept: application/vnd.urbanairship+json; version=3

              {
                "filename": "rickroll.png",
                "content_type": "text/plain; charset=\"UTF-8\"",
                "data": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8..."
              }
          - lang: HTTP
            source: |
              HTTP/1.1 201 Accepted
              Data-Attribute: attachment_id
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "attachment_ids": [
                      "b0c46a8d-b701-441b-9d6e-147c183b28ca"
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/attribute-lists:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/attribute-lists HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: lists
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "lists": [
                    {
                      "name": "ua_attributes_my_list",
                      "description": "My first list",
                      "extra": {
                          "filename": "list.csv",
                          "source": "crm"
                      },
                      "created": "2020-05-13T21:41:25",
                      "last_updated": "2020-05-13T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_my_list/errors",
                      "status": "ready"
                    },
                    {
                      "name": "ua_attributes_another_list",
                      "description": "My second list",
                      "extra": {
                          "filename": "list2.csv",
                          "source": "api"
                      },
                      "created": "2020-05-14T21:41:25",
                      "last_updated": "2020-05-14T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_another_list/errors",
                      "status": "ready"
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/attribute-lists HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "name": "ua_attributes_my_new_list",
                "description": "First of many attributes lists!",
                "extra": {
                    "filename": "attributes.csv",
                    "source": "CRM"
                }
              }
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Type: application/json

              Location:
              https://go.urbanairship.com/api/attribute-lists/ua_attributes_foobar


              {
                "ok" : true
              }
        showMissingLanguagePlaceholders: true
  '/api/attribute-lists/{list_name}/csv':
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/attribute-lists/foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              channel_id,Magic Score,Preferred Sport
              c543f3a3-bc1d-4830-8dee-7532c6a23b9a,100,Basketball
              6ba360a0-1f73-4ee7-861e-95f6c1ed6410,,Basketball
              15410d17-687c-46fa-bbd9-f255741a1523,2,Football
              c2c64ef7-8f5c-470e-915f-f5e3da04e1df,22.1,Rugby
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/json

              {
                "ok" : true
              }
        showMissingLanguagePlaceholders: true
      - description: Attribute List CSV upload for SMS
        examples:
          - lang: HTTP
            source: |
              PUT /api/attribute-lists/foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              msisdn,sms_sender,firstName
              5035556789,18588675309,Jane
              4155551212,18588675309,Rory
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/json

              {
                "ok" : true
              }
  '/api/attribute-lists/{list_name}/errors':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists/foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+csv; version=3
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Content-Type: text/csv


              8b4de669-16f1-4e71-9a1f-0c62a8235a65,ERROR,"Unable to parse
              number: forty-two"

              d5ebe607-a3e6-4601-b97e-83ec604223fe,ERROR,"Unable to parse date:
              monday"
        showMissingLanguagePlaceholders: true
  /api/channels:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelRequest request = ChannelRequest.newRequest();

              Response<ChannelResponse> response = client.execute(request);

              ChannelView channels =
              response.getBody().get().getChannelView().get();
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              channel_id = None

              for channel in ua.ChannelList(airship):
                 channel_id = channel.channel_id
                 print (channel.channel_id, channel.device_type, channel.tags,
                       channel.push_address, channel.named_user_id, channel.opt_in)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_list = UA::ChannelList.new(client: airship)

              channel_list.each do |channel|
                  puts(channel)
              end

              puts(channel_list.count)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "next_page": "https://go.urbanairship.com/api/channels?start=07AAFE44CD82C2F4E3FBAB8962A95B95F90A54857FB8532A155DE3510B481C13&limit=2",
                 "channels": [
                    {
                       "channel_id": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5",
                       "device_type": "android",
                       "push_address": "FE66489F304DC75B8D6E8200DFF8A456E8DAEACEC428B427E9518741C92C6660",
                       "opt_in": true,
                       "installed": true,
                       "background": true,
                       "created": "2020-03-06T18:52:59",
                       "last_registration": "2020-10-07T21:28:35",
                       "named_user_id": "some_id_that_maps_to_your_systems",
                       "alias": "null",
                       "tags": [
                          "tag1",
                          "tag2"
                       ],
                       "tag_groups": {
                          "tag_group_1": ["tag1", "tag2"],
                          "tag_group_2": ["tag1", "tag2"]
                       },
                       "device_attributes": {
                           "ua_device_os": "10",
                           "ua_country": "US",
                           "ua_device_model": "SM-G973U",
                           "ua_local_tz": "America/Los_Angeles",
                           "ua_app_version": "2020-02-01T002322-goat",
                           "ua_location_settings": "true",
                           "ua_language": "en",
                           "ua_sdk_version": "12.2.0",
                           "ua_carrier": "Verizon "
                        },
                        "attributes": {
                           "first_name": "Cool",
                           "last_name": "Person",
                           "birthdate": "1983-03-15T00:00:00",
                        }
                    },
                    {
                       "channel_id": "bd36e8c7-5a73-47c0-9716-99fd3d4197d5",
                       "device_type": "ios",
                       "push_address": null,
                       "opt_in": false,
                       "installed": true,
                       "background": true,
                       "created": "2020-03-06T18:52:59",
                       "last_registration": "2020-10-07T21:28:35",
                       "named_user_id": "some_id_that_maps_to_your_systems",
                       "alias": "null",
                       "tags": [
                          "tag1",
                          "tag2"
                       ],
                       "tag_groups": {
                          "tag_group_1": ["tag1", "tag2"],
                          "tag_group_2": ["tag1", "tag2"]
                       },
                       "ios": {
                          "badge": 0,
                          "quiettime": {
                             "start": null,
                             "end": null
                          },
                          "tz": null
                       }
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/channels/attributes:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/attributes HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                     "android_channel": ["13863b3c-f860-4bbf-a9f1-4d785379b8a2"]
                  },
                  "attributes": [
                     {
                           "action": "set",
                           "key": "major_league",
                           "value": "sf_giants"
                     },
                     {
                           "action": "remove",
                           "key": "minor_league"
                     },
                     {
                           "action": "set",
                           "key": "position",
                           "value": "LF"
                     }
                  ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Attribute setMajorLeague = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("major_league")
                      .setValue("sf_giants")
                      .build();

              Attribute removeMinorLeague = Attribute.newBuilder()
                      .setAction(AttributeAction.REMOVE)
                      .setKey("minor_league")
                      .build();

              Attribute setPosition = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("position")
                      .setValue("LF")
                      .build();

              ChannelAttributesPayload payload =
              ChannelAttributesPayload.newBuilder()
                      .addAttribute(setMajorLeague)
                      .addAttribute(removeMinorLeague)
                      .addAttribute(setPosition)
                      .setAudience(AttributeAudience.newBuilder()
                              .addDeviceId(AttributeAudienceType.ANDROID_CHANNEL, "13863b3c-f860-4bbf-a9f1-4d785379b8a2")
                              .build())
                      .build();

              ChannelAttributesRequest request =
              ChannelAttributesRequest.newRequest(payload);

              Response<ChannelAttributesResponse> response =
              client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_info = UA::ChannelInfo.new(client: airship)

              channel_info.audience = {"android_channel":
              '13863b3c-f860-4bbf-a9f1-4d785379b8a2'}

              channel_info.attributes =  {
                  "action": "set",
                  "key": "major_league",
                  "value": "sf_giants"
              }

              channel_info.set_attributes
        showMissingLanguagePlaceholders: true
      - description: Example Request with Dates and Numbers
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/attributes HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                     "android_channel": ["13863b3c-f860-4bbf-a9f1-4d785379b8a2"]
                  },
                  "attributes": [
                     {
                           "action": "set",
                           "key": "birthday",
                           "value": "1983-03-15 10:00:00"
                     },
                     {
                           "action": "set",
                           "key": "fav_number",
                           "value": 42
                     },
                     {
                           "action": "remove",
                           "key": "another_attribute"
                     }
                  ]
              }
  /api/channels/email:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                   "channel" : {
                      "type": "email",
                      "commercial_opted_in": "2020-10-28T10:34:22",
                      "address": "name@example.com",
                      "timezone" : "America/Los_Angeles",
                      "locale_country" : "US",
                      "locale_language" : "en"
                  },
                  "opt_in_mode" : "classic",
                  "properties" : {
                      "interests" : "newsletter"
                  }
               }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              RegisterEmailChannel emailChannel =
              RegisterEmailChannel.newBuilder()
                      .setAddress("name@example.com")
                      .setEmailOptInLevel(OptInLevel.EMAIL_COMMERCIAL_OPTED_IN, "2020-10-28T10:34:22")
                      .build();

              RegisterEmailChannelRequest request =
              RegisterEmailChannelRequest.newRequest(emailChannel);

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              email = ua.Email(airship=airship,
                              address='name@example.com',
                              commercial_opted_in='2020-10-28T10:34:22',
                              timezone='America/Los_Angeles',
                              locale_country='US',
                              locale_language='en')
              resp = email.register()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.type = 'email'

              email_channel.commercial_opted_in = '2020-10-28T10:34:22'

              email_channel.address = 'name@example.com'

              email_channel.timezone = 'America/Los_Angeles'

              email_channel.locale_country = 'US'

              email_channel.locale_language = 'en'

              email_channel.register
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/channels/251d3318-b3cb-4e9f-876a-ea3bfa6e47bd

              Content-Type: application/json


              {
                  "ok": true,
                  "channel_id": "251d3318-b3cb-4e9f-876a-ea3bfa6e47bd"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/email/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email/tags HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "audience": {
                    "email_address": "name@example.com"
                 },
                 "add": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                 }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              EmailTagRequest request = EmailTagRequest.newRequest();
              emailTagRequest.addEmailChannel("name@example.com")
                      .addTags("my_fav_tag_group1", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group2", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group3", ImmutableSet.of("tag1", "tag2", "tag3"));

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')

              # replaces all existing tags on an email channel
              email_tags = ua.EmailTags(airship=airship,
                                        address='name@example.com')
              email_tags.set(group='my_tag_group',
                            tags=['one', 'two', 'three'])
              email_tags.send()

              # adds and removes tags from an email channel
              email_tags = ua.EmailTags(airship=airship,
                                        address='name@example.com')
              email_tags.remove(group='my_tag_group',
                                tags=['one', 'two', 'three'])
              email_tags.add(group='my_tag_group',
                            tags=['some', 'new', 'tags'])
              email_tags.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_tags = UA::EmailTags.new(client: airship)

              #set an audience

              email_tags.set_audience(email_address: 'name@example.com')

              #add a tag

              email_tags.add(group_name: 'my_fav_tag_group1', tags: 'tag2')

              #remove a tag

              email_tags.remove(group_name: 'my_fav_tag_group1', tags: 'tag1')

              email_tags.send_request
        showMissingLanguagePlaceholders: true
  /api/channels/email/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email/uninstall HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "email_address": "name@example.com"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              UninstallEmailChannel uninstallEmailChannel =
              UninstallEmailChannel.newBuilder()
                      .setEmailAddress("name@example.com")
                      .build();

              UninstallEmailChannelRequest request =
              UninstallEmailChannelRequest.newRequest(uninstallEmailChannel);

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              email = ua.Email(airship=airship,
                              address='name@example.com')
              resp = email.uninstall()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.address = 'name@example.com'

              email_channel.uninstall
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/email/{email}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels/email/name%40domain.com HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.address = 'name@domain.com'

              email_channel.lookup
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "01234567-890a-bcde-f012-3456789abc0",
                    "device_type": "email",
                    "installed": true,
                    "created": "2020-08-08T20:41:06",
                    "named_user_id": "some_id_that_maps_to_your_systems",
                    "tag_groups": {
                       "tag_group_1": ["tag1", "tag2"],
                       "tag_group_2": ["tag1", "tag2"]
                    },
                    "address": null,
                    "opt_in": true,
                    "commercial_opted_in": "2020-10-28T10:34:22",
                    "commercial_opted_out": "2020-06-03T09:15:00",
                    "transactional_opted_in": "2020-10-28T10:34:22",
                    "last_registration": "2020-05-01T18:00:27"
                 }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: 'Example: Update Email Address'
        examples:
          - lang: HTTP
            source: >
              PUT /api/channels/email/251d3318-b3cb-4e9f-876a-ea3bfa6e47bd
              HTTP/1.1

              Authorization: Bearer <authorization token>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json

               {
                   "channel" : {
                      "type": "email",
                      "address": "tommy@example.com",
                      "commercial_opted_in": "2020-10-28T10:34:22"
                   }
                }
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.channel_id = '251d3318-b3cb-4e9f-876a-ea3bfa6e47bd'

              email_channel.type = 'email'

              email_channel.address = 'tommy@example.com'

              email_channel.commercial_opted_in = '2020-10-28T10:34:22'

              email_channel.update
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "channel_id": "251d3318-b3cb-4e9f-876a-ea3bfa6e47bd"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/open:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/open HTTP/1.1
              Authorization: Basic <master secret authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel": {
                    "type": "open",
                    "opt_in": true,
                    "address": "Number Four",
                    "tags": [
                       "toaster",
                       "caprica"
                    ],
                    "timezone": "America/Los_Angeles",
                    "locale_country": "US",
                    "locale_language": "en",
                    "open": {
                       "open_platform_name": "cylon",
                       "identifiers": {
                          "model": "4"
                       }
                    }
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              OpenChannel openChannel = OpenChannel.newBuilder()
                      .setOpenPlatformName("cylon")
                      .setOldAddress("Number Four")
                      .addIdentifier("model", "4")
                      .build();

              Channel channel = Channel.newBuilder()
                      .setOpenChannel(openChannel)
                      .setChannelType(ChannelType.OPEN)
                      .setOptIn(true)
                      .setAddress("Number Four")
                      .setTags(true)
                      .addTag("toaster")
                      .setTimeZone("America/Los_Angeles")
                      .setLocaleCountry("US")
                      .setLocaleLanguage("en")
                      .build();

              OpenChannelPayload payload = new OpenChannelPayload(channel);

              OpenChannelRequest request =
              OpenChannelRequest.newRequest(payload);

              Response<OpenChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              my_channel = ua.OpenChannel(airship)
              my_channel.address = 'Number Four'
              my_channel.open_platform = 'cylon'
              my_channel.opt_in = True
              resp = my_channel.create()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              open_channel = UA::OpenChannel.new(client: airship)

              open_channel.opt_in = true

              open_channel.address = 'Number Four'

              open_channel.open_platform = 'cylon'

              open_channel.create()
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Location:
              https://go.urbanairship.com/api/channels/df6a6b50-9843-0304-d5a5-743f246a4946

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                  "ok": true,
                  "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/open/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/open/tags HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                "audience": {
                    "address": "Number Four",
                    "open_platform_name": "cylon"
                },
                "add": {
                  "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                  "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                  "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                }
               }
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              my_channel = ua.OpenChannel(airship).lookup(
                  'df6a6b50-9843-0304-d5a5-743f246a4946'
              )
              my_channel.tags = ['tag1', 'tag2']
              resp = my_channel.update()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              open_channel = UA::OpenChannel.new(client: airship)

              open_channel.opt_in = true

              open_channel.address = 'Number Four'

              open_channel.open_platform = 'cylon'

              open_channel.channel_id = 'df6a6b50-9843-0304-d5a5-743f246a4946'

              open_channel.tags = ['tag1', 'tag2', 'tag3']

              open_channel.update(set_tags: true)
          - lang: HTTP
            source: |
              HTTP/1.1 200 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok":true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/open/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/open/uninstall HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "address": "Number Four",
                "open_platform_name": "cylon"
              }
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              my_channel = ua.OpenChannel(airship).lookup(
                  'df6a6b50-9843-0304-d5a5-743f246a4946'
              )
              resp = my_channel.uninstall()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              cu = UA::OpenChannelUninstall.new(client: airship)

              cu.uninstall(address: 'Number Four', open_platform: 'cylon')
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/sms:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn" : "15035556789",
                "sender": "US:12345",
                "opted_in": "2020-02-13T11:58:59",
                "timezone": "America/Los_Angeles",
                "locale_country": "US",
                "locale_language": "en"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SmsRegistrationRequest request = SmsRegistrationRequest
                      .newRegistrationRequest("12345", "15035556789", DateTime.parse("2020-02-13T11:58:59Z"));

              Response<SmsRegistrationResponse> response =
              client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              sms = ua.Sms(airship, sender='12345', msisdn='15035556789')
              response = sms.register(opted_in='2020-02-13T11:58:59')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.opted_in = '2020-02-13T11:58:59'

              sms_channel.register
        showMissingLanguagePlaceholders: true
      - description: Example Response (With 'opted_in')
        examples:
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/channels/7c5d7328-9bb4-4ff7-86b0-96a5f1da5868

              Content-Type: application/json


              {
                "ok": true,
                "operation_id": "62077236-d032-11e9-af71-ab156113d166",
                "channel_id": "7c5d7328-9bb4-4ff7-86b0-96a5f1da5868"
              }
      - description: Example Response (Without 'opted_in')
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/json

              {
                "ok": true,
                "operation_id": "62077236-d032-11e9-af71-ab156113d166",
                "push_id": "26350f60-d033-11e9-80e3-33def0e528d1",
                "channel_id": "79fbe330-d033-11e9-adfb-df10b89c5e04",
                "status": "pending"
              }
      - description: Example Response (Project not configured with sender)
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 400 Bad Request
              Content-Type: application/json

              {
                  "ok": false,
                  "errors": "Unable to retrieve details for sender 12345 with app_key <application key>"
              }
  /api/channels/sms/opt-out:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/opt-out HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "sender": "US:12345",
                  "msisdn": "15035556789"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SmsRegistrationRequest request = SmsRegistrationRequest
                      .newOptOutRequest("12345", "15035556789");

              Response<SmsRegistrationResponse> response =
              client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              sms = ua.Sms(airship, sender='12345', msisdn='15035556789')
              response = sms.opt_out()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.opt_out
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/sms/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/uninstall HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "sender": "US:12345",
                  "msisdn": "15035556789"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SmsRegistrationRequest request = SmsRegistrationRequest
                      .newUninstallRequest("12345", "15035556789");

              Response<SmsRegistrationResponse> response =
              client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              sms = ua.Sms(airship, sender='12345', msisdn='15035556789')
              response = sms.uninstall()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.uninstall
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/sms/{channel_id}':
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/channels/sms/{channel_id} HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn": "15035556789",
                "sender": "US:12345",
                "opted_in": "2020-02-13T11:58:59",
                "timezone": "America/Los_Angeles",
                "locale_country": "US",
                "locale_language": "en"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true,
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/sms/{msisdn}/{sender}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels/sms/15035556789/12345 HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              sms = ua.Sms(airship, sender='12345', msisdn='15035556789')
              channel_info = sms.lookup()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.lookup
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: channel
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "84e36d69-873b-4ffe-81cd-e74c9f002057",
                    "device_type": "sms",
                    "installed": true,
                    "push_address": null,
                    "named_user_id": null,
                    "alias": null,
                    "tags": [],
                    "tag_groups": {
                       "ua_channel_type": [
                          "sms"
                       ],
                       "ua_sender_id": [
                          "US:12345"
                       ],
                       "ua_opt_in": [
                          "true"
                       ]
                    },
                    "created": "2020-04-27T22:06:21",
                    "opt_in": true,
                    "last_registration": "2020-05-14T19:51:38"
                 }
              }}
        showMissingLanguagePlaceholders: true
  /api/channels/subscription_lists:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/subscription_lists HTTP/1.1
              Authorization: Basic <App Auth>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "subscription_lists": [
                    {
                       "action":"subscribe",
                       "list_id":"intriguing_ideas"
                    },
                    {
                       "action":"unsubscribe",
                       "list_id":"animal_facts"
                    }
                 ],
                 "audience": {
                    "ios_channel": [
                       "b8f9b663-0a3b-cf45-587a-be880946e881"
                    ],
                    "email_address": [
                       "homer@springfield.net",
                       "nick@nite.org"
                    ]
                 }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

               SubscriptionList subscriptionList = SubscriptionList.newBuilder()
                     .setListId("big_deals")
                     .setAction(SubscriptionListAction.SUBSCRIBE)
                     .build();

               SubscriptionListPayload payload = SubscriptionListPayload.newBuilder()
                     .addSubscriptionList(subscriptionList)
                     .setAudience(ChannelAudience.newBuilder()
                              .addDeviceId(ChannelAudienceType.ANDROID_CHANNEL, "002b4104-c94f-418d-be86-ead3214b3244").build())
                     .build();

               SubscriptionListRequest request  = SubscriptionListRequest.newRequest(payload);
               Response<SubscriptionListResponse> response = client.execute(request);
        showMissingLanguagePlaceholders: true
  /api/channels/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/tags HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "audience": {
                    "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881",
                    "android_channel": "13863b3c-f860-4bbf-a9f1-4d785379b8a2"
                 },
                 "add": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                 }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelTagRequest request = ChannelTagRequest.newRequest()
                      .addIOSChannel("b8f9b663-0a3b-cf45-587a-be880946e881")
                      .addAndroidChannel("13863b3c-f860-4bbf-a9f1-4d785379b8a2")
                      .addTags("my_fav_tag_group1", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group2", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group3", ImmutableSet.of("tag1", "tag2", "tag3"));

              Response response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              channel_tags = ua.devices.ChannelTags(airship)
              ios_audience = ['b8f9b663-0a3b-cf45-587a-be880946e881']
              android_audience = ['13863b3c-f860-4bbf-a9f1-4d785379b8a2']
              channel_tags.set_audience(ios_audience, android_audience
              )
              channel_tags.add('my_fav_tag_group1', ['tag1', 'tag2', 'tag3'])
              channel_tags.remove('my_fav_tag_group2', 'tag4')
              channel_tags.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_tags = UA::ChannelTags.new(client: airship)

              ios_audience = 'b8f9b663-0a3b-cf45-587a-be880946e881'

              android_audience = '13863b3c-f860-4bbf-a9f1-4d785379b8a2'

              channel_tags.set_audience(
                  ios: ios_audience,
                  android: android_audience
              )

              channel_tags.add(group_name: 'my_fav_tag_group1', tags: ['tag1',
              'tag2', 'tag3'])

              channel_tags.remove(group_name: 'my_fav_tag_group2', tags: 'tag4')

              channel_tags.send_request
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "warnings": ["The following tag groups do not exist: my_fav_tag_group2", "The following tag groups are deactivated: my_fav_tag_group3"]
              }
        showMissingLanguagePlaceholders: true
  /api/channels/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/uninstall HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                 {
                    "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                    "device_type": "ios"
                 },
                 {
                    "channel_id": "13863b3c-f860-4bbf-a9f1-4d785379b8a2",
                    "device_type": "android"
                 }
              ]
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              channel_uninstall = ua.ChannelUninstall(airship)
              channel = {
                 "channel_id": 'b8f9b663-0a3b-cf45-587a-be880946e881',
                 "device_type": "ios"
                 }

              channel_uninstall.uninstall(channel)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              cu = UA::ChannelUninstall.new(client: airship)


              chans = [{"channel_id" => "b8f9b663-0a3b-cf45-587a-be880946e881",
                        "device_type" => "ios"},
                       {"channel_id" => "13863b3c-f860-4bbf-a9f1-4d785379b8a2",
                        "device_type" => "android"}]

              cu.uninstall(channels: chans)
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

               Set<ChannelUninstallDevice> channels = ImmutableSet.of(
                     new ChannelUninstallDevice("00f74677-4616-4958-bd91-30e949814d2c", ChannelUninstallType.IOS),
                     new ChannelUninstallDevice("007f7156-9b82-4cb6-a2f9-e2c8e7fce13d", ChannelUninstallType.ANDROID)
               );

               ChannelUninstallPayload payload = ChannelUninstallPayload.newBuilder()
                     .setChannels(channels)
                     .build();

               ChannelUninstallRequest request = ChannelUninstallRequest.newRequest(payload);
               Response<ChannelUninstallResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/{channel_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels/9c36e8c7-5a73-47c0-9716-99fd3d4197d5 HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelRequest request =
              ChannelRequest.newRequest("9c36e8c7-5a73-47c0-9716-99fd3d4197d5");

              Response<ChannelResponse> response = client.execute(request);

              ChannelView channel =
              response.getBody().get().getChannelView().get();
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              channel =
              ua.ChannelInfo(airship).lookup('9c36e8c7-5a73-47c0-9716-99fd3d4197d5')

              print (channel.channel_id, channel.device_type, channel.tags,
                    channel.push_address, channel.named_user_id, channel.opt_in)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_client = UA::ChannelInfo.new(client: airship)

              channel_info = channel_client.lookup(uuid:
              '9c36e8c7-5a73-47c0-9716-99fd3d4197d5')

              puts(channel_info)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5",
                    "device_type": "ios",
                    "installed": true,
                    "opt_in": false,
                    "background": true,
                    "push_address": "FE66489F304DC75B8D6E8200DFF8A456E8DAEACEC428B427E9518741C92C6660",
                    "created": "2020-08-08T20:41:06",
                    "last_registration": "2020-05-01T18:00:27",
                    "named_user_id": "some_id_that_maps_to_your_systems",
                    "alias": null,
                    "tags": [
                       "tag1",
                       "tag2"
                    ],
                    "tag_groups": {
                       "tag_group_1": ["tag1", "tag2"],
                       "tag_group_2": ["tag1", "tag2"]
                    },
                    "ios": {
                       "badge": 0,
                       "quiettime": {
                          "start": null,
                          "end": null
                       },
                       "tz": "America/Los_Angeles"
                    }
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/create-and-send:
    post:
      - description: Example Create and Send Using Email
        examples:
          - lang: HTTP
            source: |
              POST /api/create-and-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@email.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22"
                    },
                    {
                      "ua_address" : "ben@icetown.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10"
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "subject": "Welcome to the Winter Sale! ",
                    "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                    "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "click_tracking": false,
                    "open_tracking": false
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              String htmlBodyString = "<h1>Seasons Greetings</h1><p>Check out
              our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>";

              String plaintextBodyString = "Greetings! Check out our latest
              winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]";


              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@email.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@icetown.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setSubject("Welcome to the Winter Sale! ")
                      .setHtmlBody(htmlBodyString)
                      .setPlaintextBody(plaintextBodyString)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              Campaigns campaign = Campaigns.newBuilder()
                      .addCategory("winter sale")
                      .addCategory("west coast")
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .setCampaigns(campaign)
                      .build();

              CreateAndSendRequest request =
              CreateAndSendRequest.newRequest(payload);

              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              emails = [ua.Email(airship=airship,
                                address='new@email.com',
                                commercial_opted_in='2020-11-29T10:34:22'),
                        ua.Email(airship=airship,
                                address='ben@icetown.com',
                                commercial_opted_in='2020-11-29T12:45:10')]
              notification = ua.notification(
                  email=ua.email(
                          subject='Welcome to the Winter Sale!',
                          html_body='<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>',
                          plaintext_body='Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]',
                          message_type='commercial',
                          sender_name='Airship',
                          sender_address='team@airship.com',
                          reply_to='no-reply@airship.com'
                      )
              )
              campaigns = ua.campaigns(categories=['winter sale', 'west coast'])
              create_and_send = ua.CreateAndSendPush(airship=airship,
                                                    channels=emails)
              create_and_send.campaigns = campaigns
              create_and_send.notification = notification
              create_and_send.device_types = ua.device_types('email')
              response = create_and_send.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.bypass_opt_in_level = false

              email_notification.html_body = "<h1>Seasons Greetings</h1><p>Check
              out our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>"

              email_notification.message_type = 'transactional'

              email_notification.plaintext_body = 'Greetings! Check out our
              latest winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.subject = 'Welcome to the Winter Sale!'

              override = email_notification.email_override

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@email.com",
                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                },
                {
                  "ua_address": "ben@icetown.com",
                  "ua_commercial_opted_in": "2020-11-29T12:45:10"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.campaigns = ["winter sale", "west coast"]

              send_it.notification = email_notification.email_override

              send_it.create_and_send
        showMissingLanguagePlaceholders: true
      - description: Example Create and Send with Stored Template
        examples:
          - lang: HTTP
            source: |
              POST /api/create-and-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@email.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "name": "New Person, Esq.",
                      "location": "City, State"
                    },
                    {
                      "ua_address" : "ben@icetown.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10",
                      "name": "Ben Wyatt",
                      "location": "Pawnee, IN"
                    }
                  ]
                },
                "device_types": [
                    "email"
                ],
                "notification": {
                    "email": {
                      "bcc": [
                          "blind@copy.com"
                      ],
                      "message_type": "commercial",
                      "reply_to": "no-reply@airship.com",
                      "sender_address": "team@airship.com",
                      "sender_name": "Airship",
                      "template": {
                          "template_id": "9335bb2a-2a45-456c-8b53-42af7898236a"
                      }
                    }
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@email.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@icetown.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              EmailTemplate template = EmailTemplate.newBuilder()
                      .setTemplateId("9335bb2a-2a45-456c-8b53-42af7898236a")
                      .build();

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setEmailTemplate(template)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .build();

              CreateAndSendRequest request =
              CreateAndSendRequest.newRequest(payload);

              Response<String> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.message_type = 'transactional'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.template_id =
              "9335bb2a-2a45-456c-8b53-42af7898236a"

              inline_template = email_notification.email_with_inline_template

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@email.com",
                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                },
                {
                  "ua_address": "ben@icetown.com",
                  "ua_commercial_opted_in": "2020-11-29T12:45:10"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.notification = inline_template

              send_it.create_and_send
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "67c65146-c27f-431f-b54a-83aca694fdd3",
                  "push_ids": [
                      "c0eead17-333b-4f86-8a42-9fb7be1ed627"
                  ],
                  "message_ids": [],
                  "content_urls": []
              }
        showMissingLanguagePlaceholders: true
  /api/create-and-send/validate:
    post:
      - description: Example Validating Create-and-send Payload
        examples:
          - lang: HTTP
            source: |
              POST /api/create-and-send/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@email.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22"
                    },
                    {
                      "ua_address" : "ben@icetown.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10"
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "subject": "Welcome to the Winter Sale! ",
                    "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                    "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com"
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              String htmlBodyString = "<h1>Seasons Greetings</h1><p>Check out
              our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>";

              String plaintextBodyString = "Greetings! Check out our latest
              winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]";


              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@email.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@icetown.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setSubject("Welcome to the Winter Sale! ")
                      .setHtmlBody(htmlBodyString)
                      .setPlaintextBody(plaintextBodyString)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              Campaigns campaign = Campaigns.newBuilder()
                      .addCategory("winter sale")
                      .addCategory("west coast")
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .setCampaigns(campaign)
                      .build();

              CreateAndSendRequest request =
              CreateAndSendRequest.newRequest(payload)
                      .setValidateOnly(true);
              Response<String> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.bypass_opt_in_level = false

              email_notification.html_body = "<h1>Seasons Greetings</h1><p>Check
              out our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>"

              email_notification.message_type = 'transactional'

              email_notification.plaintext_body = 'Greetings! Check out our
              latest winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.subject = 'Welcome to the Winter Sale!'

              override = email_notification.email_override

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@email.com",
                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.campaigns = ["winter sale", "west coast"]

              send_it.notification = email_notification.email_override

              send_it.validate
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  /api/custom-events:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/custom-events HTTP/1.1
              Authorization: Bearer <authorization token>
              X-UA-Appkey: <application key>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                 {
                    "occurred": "2020-05-02T02:31:22",
                    "user": {
                       "named_user_id": "hugh.manbeing"
                    },
                    "body": {
                       "name": "purchased",
                       "value": 239.85,
                       "transaction": "886f53d4-3e0f-46d7-930e-c2792dac6e0a",
                       "interaction_id": "your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234",
                       "interaction_type": "url",
                       "properties": {
                          "description": "Sneaker purchase",
                          "brand": "Victory Sneakers",
                          "colors": [
                           "red",
                           "blue"
                          ],
                          "items": [
                             {
                                "text": "New Line Sneakers",
                                "price": "$ 79.95"
                             },
                             {
                                "text": "Old Line Sneakers",
                                "price": "$ 79.95"
                             },
                             {
                                "text": "Blue Line Sneakers",
                                "price": "$ 79.95"
                             }
                          ],
                          "name": "Hugh Manbeing",
                          "userLocation": {
                             "state": "CO",
                             "zip": "80202"
                          }
                       },
                       "session_id": "22404b07-3f8f-4e42-a4ff-a996c18fa9f1"
                    }
                 }
              ]
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .setBearerToken("<bearer token>")
                      .build();

              CustomEventUser customEventUser = CustomEventUser.newBuilder()
                      .setNamedUserId("hugh.manbeing")
                      .build();

              CustomEventPropertyValue customEventProperty =
              CustomEventPropertyValue.of("Victory Sneakers");


              List<CustomEventPropertyValue> items = new ArrayList<>();

              items.add(CustomEventPropertyValue.of("New Line Sneakers"));

              items.add(CustomEventPropertyValue.of("Old Line Sneakers"));


              DateTime occurred = new DateTime(2020, 05, 02, 02, 31, 22,
              DateTimeZone.UTC);


              CustomEventBody customEventBody = CustomEventBody.newBuilder()
                      .setName("purchased")
                      .addPropertiesEntry("brand", customEventProperty)
                      .addPropertiesEntry("items", CustomEventPropertyValue.of(items))
                      .build();

              CustomEventPayload customEventPayload =
              CustomEventPayload.newBuilder()
                      .setCustomEventBody(customEventBody)
                      .setCustomEventUser(customEventUser)
                      .setOccurred(occurred)
                      .build();

              CustomEventRequest customEventRequest =
              CustomEventRequest.newRequest(customEventPayload);

              Response<CustomEventResponse> response =
              client.execute(customEventRequest);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>', token: '<token>')


              example_events = [
                UA.custom_events(
                  body: UA.custom_events_body(
                    interaction_id: "https://docs.airship.com/api/ua/#schemas-customeventobject",
                    interaction_type: "url",
                    name: "example",
                    properties: {
                      "who" => "Alf",
                      "where" => "In the garage!",
                      "from" => "Melmac"
                    },
                    session_id: "8d168d40-bc9b-4359-800c-a546918354ac",
                    transaction: "d768f61f-73ba-495f-9e16-b3b9c3b598b7",
                    value: 1
                  ),
                  occurred: "2021-10-01T00:00:00",
                  user: UA.custom_events_user(named_user_id: "Gordon Shumway")
                )
              ]

              event = Urbanairship::CustomEvents::CustomEvent.new(client:
              airship)

              event.events = example_events

              event.create
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "operation_id": "8c61c0c4-95b0-45a6-bc38-733f7fcb8979"
              }
        showMissingLanguagePlaceholders: true
  /api/experiments:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/experiments HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')
              ab_test = ua.ABTest(airship)
              response = ab_test.list_experiments()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              ab_test = UA::AbTest.new(client: airship)

              ab_test.limit = 5

              ab_test.list_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: experiments
              Count: 2
              Total-Count: 2
              Content-Type: application/vnd.urbanairship+json; version=3

               {
                 "ok" : "true",
                 "count" : 2,
                 "total_count" : 2,
                 "experiments" : [{
                   "name" : "Experiment 1",
                   "control" : 0.33,
                   "audience" : "all",
                   "device_types": [ "ios", "android" ],
                   "variants" : [{
                     "push" : {
                       "notification" : {
                         "alert" : "message 1"
                       }
                     },
                     "id" : 0,
                   },
                   {
                     "push" : {
                         "notification" : {
                           "alert" : "message 2"
                         }
                     },
                     "id" : 1,
                   }],
                   "id" : "b5bc3dd1-9ea4-4208-b5f1-9e7ac3fe0502",
                   "created_at" : "2020-03-03T21:08:05",
                   "push_id" : "07cec298-6b8c-49f9-8e03-0448a06f4aac"
                 }, {
                   "name" : "Experiment 2",
                   "description" : "The second experiment",
                   "audience" : "all",
                   "device_types": [ "ios", "android" ],
                   "variants" : [{
                     "push" : {
                       "notification" : {
                         "alert" : "message 1"
                       }
                     },
                     "id" : 0,
                   },
                   {
                     "push" : {
                         "notification" : {
                           "alert" : "message 2"
                         }
                     },
                     "id" : 1,
                   }],
                   "id" : "e464aa7e-be40-4994-a290-1bbada7187d8",
                   "created_at" : "2020-03-03T21:08:05",
                   "push_id" : "07cec298-6b8c-49f9-8e03-0448a06f4aac"
                 }]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/experiments HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Experiment 1",
                  "audience": {"tag": "earlyBirds"},
                  "device_types": [ "ios", "android" ],
                  "variants": [
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 1"
                              }
                          }
                      },
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 2"
                              }
                          }
                      }
                  ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Schedule schedule = Schedule.newBuilder()
                      .setScheduledTimestamp(DateTime.now().plusMinutes(5))
                      .build();

              Variant variantOne = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 1")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Variant variantTwo = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 2")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Experiment experiment = Experiment.newBuilder()
                      .setName("Experiment 1")
                      .setDescription("Testing description")
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                      .setAudience(Selectors.tag("earlyBirds"))
                      .addVariant(variantOne)
                      .addVariant(variantTwo)
                      .build();

              ExperimentRequest request =
              ExperimentRequest.newRequest(experiment);

              Response<ExperimentResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              push_1 = airship.create_push()
              push_1.notification = ua.notification(alert='message 1')
              push_2 = airship.create_push()
              push_2.notification = ua.notification(alert='message 2')
              variants = [
                  ua.Variant(push=push_1),
                  ua.Variant(push=push_2)
              ]
              experiment = ua.Experiment(
                  audience=ua.tag('earlyBirds'),
                  name='Experiment 1',
                  device_types=ua.device_types('ios', 'android'),
                  variants=variants
              )
              ab_test = ua.ABTest(airship=airship)
              response = ab_test.create(experiment=experiment)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              variant_one = UA::Variant.new(client: airship)

              variant_one.push = {
                  "notification": {
                      "alert": "message 1"
                  }
              }

              variant_two = UA::Variant.new(client: airship)

              variant_two.push = {
                  "notification": {
                      "alert": "message 2"
                  }
              }

              experiment = UA::Experiment.new(client: airship)

              experiment.name = 'Experiment 1'

              experiment.description = 'Example experiment'

              experiment.audience = UA.tag('earlyBirds')

              experiment.device_types = ['ios','android']

              experiment.variants << variant_one.payload

              experiment.variants << variant_two.payload

              ab_test = UA::AbTest.new(client: airship)

              ab_test.experiment_object = experiment.payload

              ab_test.create_ab_test
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Length: 123

              Location:
              https://go.urbanairship.com/api/experiments/0f7704e9-5dc0-4f7d-9964-e89055701b0a

              Content-Type: application/vnd.urbanairship+json; version=3

                {
                  "ok" : "true",
                  "operation_id" : "03ca94a3-2b27-42f6-be7e-41efc2612cd4",
                  "experiment_id" : "0f7704e9-5dc0-4f7d-9964-e89055701b0a",
                  "push_id" : "7e13f060-594c-11e4-8ed6-0800200c9a66"
                }
        showMissingLanguagePlaceholders: true
  /api/experiments/scheduled:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/experiments/scheduled HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              ab_test = UA::AbTest.new(client: airship)

              ab_test.list_scheduled_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: experiments
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": "true",
                  "count": 2,
                  "total_count": 2,
                  "experiments": [
                      {
                          "id": "0f7704e9-5dc0-4f7d-9964-e89055701b0a",
                          "name": "Experiment 1",
                          "audience": "all",
                          "device_types": [ "ios", "android" ],
                          "variants": [
                              {
                                  "id": 0,
                                  "schedule": {
                                      "scheduled_time": "2020-11-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 1"
                                      }
                                  }
                              },
                              {
                                  "id": 1,
                                  "schedule": {
                                      "scheduled_time": "2020-11-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 2"
                                      }
                                  }
                              }
                          ]
                      },
                      {
                          "id": "29705c10-5951-11e4-8ed6-0800200c9a66",
                          "name": "Experiment 2",
                          "audience": "all",
                          "device_types": [ "ios", "android" ],
                          "variants": [
                              {
                                  "id": 0,
                                  "schedule": {
                                      "scheduled_time": "2020-12-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 1"
                                      }
                                  }
                              },
                              {
                                  "id": 1,
                                  "schedule": {
                                      "scheduled_time": "2020-12-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 2"
                                      }
                                  }
                              }
                          ]
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/experiments/scheduled/{experiment_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE
              /api/experiments/scheduled/0f7704e9-5dc0-4f7d-9964-e89055701b0a
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ExperimentDeleteRequest request =
              ExperimentDeleteRequest.newRequest("0f7704e9-5dc0-4f7d-9964-e89055701b0a");

              Response<ExperimentResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              ab_test = UA::AbTest.new(client: airship)

              ab_test.experiment_id = '0f7704e9-5dc0-4f7d-9964-e89055701b0a'

              ab_test.delete_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : "true",
                "operation_id" : "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  /api/experiments/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/experiments/validate HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Experiment 1",
                  "audience": {"tag": "earlyBirds"},
                  "device_types": [ "ios", "android" ],
                  "variants": [
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 1"
                              }
                          }
                      },
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 2"
                              }
                          }
                      }
                  ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Schedule schedule = Schedule.newBuilder()
                      .setScheduledTimestamp(DateTime.now().plusMinutes(5))
                      .build();

              Variant variantOne = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 1")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Variant variantTwo = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 2")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Experiment experiment = Experiment.newBuilder()
                      .setName("Experiment 1")
                      .setDescription("Testing description")
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                      .setAudience(Selectors.tag("earlyBirds"))
                      .addVariant(variantOne)
                      .addVariant(variantTwo)
                      .build();

              ExperimentRequest request =
              ExperimentRequest.newRequest(experiment).setValidateOnly(true);

              Response<ExperimentResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              push_1 = airship.create_push()
              push_1.notification = ua.notification(alert='message 1')
              push_2 = airship.create_push()
              push_2.notification = ua.notification(alert='message 2')
              variants = [
                ua.Variant(push=push_1),
                ua.Variant(push=push_2)
              ]
              experiment = ua.Experiment(
                audience=ua.tag('earlyBirds'),
                name='Experiment 1',
                device_types=ua.device_types('ios', 'android'),
                variants=variants
              )
              ab_test = ua.ABTest(airship=airship)
              response = ab_test.validate(experiment=experiment)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              variant_one = UA::Variant.new(client: airship)

              variant_one.push = {
                  "notification": {
                      "alert": "message 1"
                  }
              }

              variant_two = UA::Variant.new(client: airship)

              variant_two.push = {
                  "notification": {
                      "alert": "message 2"
                  }
              }

              experiment = UA::Experiment.new(client: airship)

              experiment.name = 'Experiment 1'

              experiment.description = 'Example experiment'

              experiment.audience = UA.tag('earlyBirds')

              experiment.device_types = ['ios','android']

              experiment.variants << variant_one.payload

              experiment.variants << variant_two.payload

              ab_test = UA::AbTest.new(client: airship)

              ab_test.experiment_object = experiment.payload

              ab_test.validate_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : "true",
                "operation_id" : "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  '/api/experiments/{experiment_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/experiments/0f7704e9-5dc0-4f7d-9964-e89055701b0a HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              ab_test = ua.ABTest(airship)

              response =
              ab_test.lookup(experiment_id='0f7704e9-5dc0-4f7d-9964-e89055701b0a')
          - lang: ruby
            source: >
              require 'urbanairship'

              UA = Urbanairship


              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')

              ab_test = UA::AbTest.new(client: airship)


              ab_test.experiment_id = '0f7704e9-5dc0-4f7d-9964-e89055701b0a'

              ab_test.lookup_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: experiment
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : "true",
                 "experiment" : {
                    "id" : "0f7704e9-5dc0-4f7d-9964-e89055701b0a",
                    "push_id": "d00f07b0-594c-11e4-8ed6-0800200c9a66",
                    "name" : "Experiment 1",
                    "audience" : "all",
                    "device_types": [ "ios", "android" ],
                    "variants" : [{
                          "push" : {
                             "notification" : {
                                "alert" : "message 1"
                             }
                          },
                          "id" : 0,
                       },
                       {
                          "push" : {
                             "notification" : {
                             "alert" : "message 2"
                          }
                       },
                       "id" : 1,
                   }]
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/feeds:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/feeds/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "feed_url": "http://example.com/atom.xml",
                 "template": {
                    "audience": "all",
                    "device_types": [ "ios", "android" ],
                    "notification": {
                       "alert": "Check this out! - {{ title }}",
                       "ios": {
                          "alert": "New item! - {{ title }}"
                       }
                    }
                 }
              }
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/feeds/SL_QBv8nT2yw5W9m_kDhQA/

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "feed_url": "http://example.com/atom.xml",
                 "last_checked": null,
                 "url": "https://go.urbanairship.com/api/feeds/SL_QBv8nT2yw5W9m_kDhQA/",
                 "id": "SL_QBv8nT2yw5W9m_kDhQA",
                 "api_version": "v3",
                 "template": {
                    "audience": "all",
                    "device_types": [ "ios", "android" ],
                    "notification": {
                       "alert": "Check this out! - {{ title }}",
                       "ios": {
                          "alert": "New item! - {{ title }}"
                       }
                    }
                 }
              }
        showMissingLanguagePlaceholders: true
  '/api/feeds/{feed_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/feeds/SL_QBv8nT2yw5W9m_kDhQA/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/feeds/SL_QBv8nT2yw5W9m_kDhQA/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "feed_url": "http://example.com/atom.xml",
                 "last_checked": "2020-03-08 21:52:21",
                 "url": "https://go.urbanairship.com/api/feeds/SL_QBv8nT2yw5W9m_kDhQA/",
                 "id": "SL_QBv8nT2yw5W9m_kDhQA",
                 "api_version": "v3",
                 "template": {
                    "audience": "all",
                    "device_types": [ "ios", "android" ],
                    "notification": {
                       "alert": "New Item! - {{ title }}"
                    }
                 }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/feeds/SL_QBv8nT2yw5W9m_kDhQA/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "template": {
                    "audience": { "tag": "new_customer" },
                    "device_types": [ "android" ],
                    "notification": {
                       "alert": "New item! - {{ title }}"
                    }
                 }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
        showMissingLanguagePlaceholders: true
  /api/lists:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListListingRequest request =
              StaticListListingRequest.newRequest();

              Response<StaticListListingResponse> response =
              client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              static_list = ua.devices.StaticLists(airship)

              for list in static_list:
                  print(
                      list.name,
                      list.description,
                      list.extra,
                      list.created,
                      list.last_updated,
                      list.channel_count,
                      list.status
                  )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_lists = UA::StaticLists.new(client: airship)


              static_lists.each do |static_list|
                  puts(static_list)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: lists
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true,
                 "lists" : [
                    {
                       "name" : "platinum_members",
                       "description" : "loyalty program platinum members",
                       "extra" : { "key" : "value" },
                       "created" : "2020-04-08T20:41:06",
                       "last_modified" : "2020-05-01T18:00:27",
                       "channel_count": 3145,
                       "status": "ready"
                    },
                    {
                       "name": "gold_members",
                       "description": "loyalty program gold member",
                       "extra": { "key": "value" },
                       "created": "2020-04-08T20:41:06",
                       "last_updated": "2020-05-01T18:00:27",
                       "channel_count": 678,
                       "status": "ready"
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/lists HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "name" : "platinum_members",
                 "description" : "loyalty program platinum members",
                 "extra" : {
                    "key" : "value"
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListRequest request =
              StaticListRequest.newRequest("platinum_members")
                              .setDescription("loyalty program platinum members")
                              .addExtra("key", "value");

              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              static_list = ua.devices.StaticList(airship, 'platinum_members')
              static_list.description = 'loyalty program platinum members'
              static_list.extra = {'key': 'value'}
              response = static_list.create()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.create(description: 'loyalty program platinum
              members')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Location: https://go.urbanairship.com/api/lists/platinum_members
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  '/api/lists/{list_name}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/lists/platinum_members HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListDeleteRequest request =
              StaticListDeleteRequest.newRequest("platinum_members");

              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              static_list = ua.devices.StaticList(airship, 'platinum_members')
              response = static_list.delete()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.delete
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists/platinum_members/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListLookupRequest request =
              StaticListLookupRequest.newRequest("platinum_members");


              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              static_list = ua.devices.StaticList(airship, 'platinum_members')
              response = static_list.lookup()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.lookup
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Data-Attribute: static_list

              Link:
              <https://go.urbanairship.com/api/platinum_members/list/?start=uuid101&limit=100>;
              rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "ok" : true,
                 "name" : "platinum_members",
                 "description" : "loyalty program platinum members",
                 "extra" : { "key" : "value" },
                 "created" : "2020-04-08T20:41:06",
                 "last_updated" : "2020-05-01T18:00:27",
                 "channel_count" : 1000,
                 "status" : "ready"
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/lists/platinum_members HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "name" : "platinum_members",
                 "description" : "loyalty program platinum members",
                 "extra" : {
                    "key" : "value"
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListRequest request =
              StaticListRequest.newUpdateRequest("platinum_members")
                              .setDescription("loyalty program platinum members")
                              .addExtra("key", "value");

              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              static_list = ua.devices.StaticList(airship, 'platinum_members')
              static_list.description = 'loyalty program platinum members'
              static_list.extra = {'key': 'value'}
              response = static_list.update()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.update(description: 'loyalty program platinum
              members')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  '/api/lists/{list_name}/csv':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists/foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+csv; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListDownloadRequest request =
              StaticListDownloadRequest.newRequest("foobar");

              Response<String> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: text/csv

              ios_channel,6d56ab7e-2c78-4ba9-ab11-d9b664ca2b32
              ios_channel,d5ebe607-a3e6-4601-b97e-83ec604223fe
              ios_channel,fa599af7-43e4-4862-a570-1470bf6f53ff
              android_channel,0e91d0f2-c65d-4b40-b968-b9f8e8b0c987
              android_channel,c346a3ce-5754-4d02-8ee5-500ce470a0b7
              android_channel,e9a01369-5f74-4167-b660-df84014a2e57
              amazon_channel,0356d138-d1d9-4572-b321-e1b67f4cd658
              amazon_channel,24dc9a76-45fe-4b17-8ed7-841f96b658ad
              amazon_channel,4d6b59f8-6d8c-4151-8b13-cd58d6ac8c6e
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/lists/platinum_members/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              named_user,customer-42
              named_user,room-27
              ios_channel,5i4c91s5-9tg2-k5zc-m592150z5634
              web_channel,d132f5b7-abcf-4920-aeb3-9132ddac3d5a
              android_channel,52b2b587-0152-4134-a8a0-38ae6933c88a
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              File dataDirectory = new File("src/data");

              String filePath = dataDirectory.getAbsolutePath() +
              "/platinum.csv";

              StaticListUploadRequest request =
              StaticListUploadRequest.newRequest("platinum_members", filePath);


              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              static_list = ua.devices.StaticList(airship, 'platinum_members')
              csv_file = open('path', 'rb')
              resp = static_list.upload(csv_file)
              csv_file.close()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              File.open('csv_file', 'rb') do |csv|
                  static_list.upload(csv_file: csv, gzip: false)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users:
    get:
      - description: 'Example: Named User Lookup'
        examples:
          - lang: HTTP
            source: |
              GET /api/named_users/?id=user-456 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserListingRequest request =
              NamedUserListingRequest.newRequest("user-456");

              Response<NamedUserListingResponse> response =
              client.execute(request);

              NamedUserView namedUser =
              response.getBody().get().getNamedUserView().get();


              // The named user ID

              String namedUserId = namedUser.getNamedUserId();


              // Map of tag groups and the associated sets of tags

              ImmutableMap<String, ImmutableSet<String>> namedUserTags =
              namedUser.getNamedUserTags();


              // All channel objects associated with the named user

              ImmutableSet<ChannelView> channelViews =
              namedUser.getChannelViews();
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              named_user = ua.NamedUser(airship, 'user-456')
              resp = named_user.lookup()
              print(resp)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-456'

              user = named_user.lookup
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "named_user": {
                    "named_user_id": "user-456",
                    "tags": {
                      "my_fav_tag_group": [
                          "tag1",
                          "tag2"
                      ]
                    },
                    "attributes": {
                      "item_purchased": "Fur removal tool",
                      "cats_name": "Sammy",
                      "pets_age": 12
                    },
                    "user_attributes": {
                      "ua_country": "US",
                      "ua_language": "en",
                      "ua_tz": "America/Los_Angeles"
                    },
                    "channels": [
                      {
                          "channel_id": "dceafd02-b852-4305-83df-98b65fa40dd4",
                          "device_type": "ios",
                          "installed": true,
                          "opt_in": true,
                          "push_address": "FFFF",
                          "created": "2020-04-08T20:41:06",
                          "last_registration": "2020-05-01T18:00:27",
                          "tags": [
                            "meow"
                          ]
                      }
                    ]
                }
              }
        showMissingLanguagePlaceholders: true
      - description: 'Example: Named User Listing'
        examples:
          - lang: HTTP
            source: |
              GET /api/named_users HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserListingRequest request =
              NamedUserListingRequest.newRequest();

              Response<NamedUserListingResponse> response =
              client.execute(request);

              ImmutableList<NamedUserView> namedUsers =
              response.getBody().get().getNamedUserViews().get();
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              named_user_list = ua.NamedUserList(airship)

              for n in named_user_list:
                  print(n.named_user_id)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user_list = UA::NamedUserList.new(client: airship)

              named_user_list.each do |named_user|
                  puts(named_user)
              end
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Data-Attribute: named_users

              Link:
              <https://go.urbanairship.com/api/named_users?start=user-1234>;
              rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "next_page": "https://go.urbanairship.com/api/named_users?start=user-1234",
                 "named_users": [
                    {
                       "named_user_id": "user-id-1234",
                       "tags": {
                          "crm": ["tag1", "tag2"]
                       },
                       "channels": [
                          {
                             "channel_id": "dceafd02-b852-4305-83df-98b65fa40dd5",
                             "device_type": "ios",
                             "installed": true,
                             "opt_in": true,
                             "push_address": "FFFF",
                             "created": "2020-04-08T20:41:06",
                             "last_registration": "2020-05-01T18:00:27",
                             "alias": "xxxx",
                             "tags": ["asdf"],
                             "ios": {
                                "badge": 0,
                                "quiettime": {
                                   "start": "22:00",
                                   "end": "06:00"
                                },
                                "tz": "America/Los_Angeles"
                             }
                          }
                       ]
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/associate:
    post:
      - description: 'Example: Associate an iOS channel with a named user'
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/associate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                 "device_type": "ios",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newAssociationRequest()
                      .setChannel("df6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.IOS)
                      .setNamedUserId("user-id-1234");

              Response<String> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              named_user = ua.NamedUser(airship, 'user-id-1234')

              resp =
              named_user.associate('df6a6b50-9843-0304-d5a5-743f246a4946',
              'ios')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-id-1234'

              named_user.associate(channel_id:
              'df6a6b50-9843-0304-d5a5-743f246a4946', device_type: 'ios')
        showMissingLanguagePlaceholders: true
      - description: >-
          Example: Associate a web channel with named user (do not declare
          device type)
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/associate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "wf6a6b50-9843-0304-d5a5-743f246a4946",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newAssociationRequest()
                      .setChannel("wf6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.WEB)
                      .setNamedUserId("user-id-1234");

              Response<String> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              named_user = ua.NamedUser(airship, 'user-id-1234')

              resp =
              named_user.associate('wf6a6b50-9843-0304-d5a5-743f246a4946',
              'web')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-id-1234'

              named_user.associate(channel_id:
              'wf6a6b50-9843-0304-d5a5-743f246a4946')
        showMissingLanguagePlaceholders: true
      - description: 'Example: Associate an email channel with named user'
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/associate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "email_address": "monopoly.man@boardwalk.com",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newAssociationRequest()
                      .setChannel("em6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.EMAIL)
                      .setNamedUserId("user-id-1234");

              Response<String> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-id-1234'

              named_user.associate(channel_id:
              'em6a6b50-9843-0304-d5a5-743f246a4946')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/disassociate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/disassociate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                 "device_type": "ios",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newDisassociationRequest()
                      .setChannel("df6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.IOS);

              Response<String> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.disassociate(channel_id:
              'df6a6b50-9843-0304-d5a5-743f246a4946', device_type: 'ios')
          - lang: python
            source: >

              import urbanairship as ua


              airship = ua.Airship('app_key', 'master_secret')

              named_user = ua.NamedUser(airship, 'user-id-1234')

              resp =
              named_user.disassociate('df6a6b50-9843-0304-d5a5-743f246a4946',
              'ios')
        showMissingLanguagePlaceholders: true
      - description: 'Example: Disassociate an email channel from named user'
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/disassociate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "email_address": "monopoly.man@gotojail.com",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newDisassociationRequest()
                      .setChannel("em6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.EMAIL)
                      .setNamedUserId("user-id-1234");

              Response<String> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.disassociate(channel_id:
              'em6a6b50-9843-0304-d5a5-743f246a4946')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/tags HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                    "named_user_id": [
                      "user-1",
                      "user-2",
                      "user-3"
                    ]
                },
                "add": {
                    "crm": [
                      "tag1",
                      "tag2",
                      "tag3"
                    ],
                    "loyalty": [
                      "tag1",
                      "tag4",
                      "tag5"
                    ]
                },
                "remove": {
                    "loyalty": [
                      "tag6",
                      "tag7"
                    ]
                }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserTagRequest request = NamedUserTagRequest.newRequest()
                      .addNamedUsers("user-1", "user-2", "user-3")
                      .addTags("crm", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("loyalty", ImmutableSet.of("tag1", "tag4", "tag5"))
                      .removeTags("loyalty", ImmutableSet.of("tag6", "tag7"));

              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              named_user = ua.NamedUser(airship, 'user-1')

              resp1 = named_user.tag(
                  'loyalty',
                  add=['tag2', 'tag3', 'tag4'],
                  remove='tag1'
              )

              resp2 = named_user.tag(
                  'crm',
                  set=['tag5', 'tag6']
              )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user_tags = UA::NamedUserTags.new(client: airship)

              named_user_ids = ['user-1', 'user-2', 'user-3']

              named_user_tags.set_audience(user_ids: named_user_ids)

              named_user_tags.add(group_name: 'crm', tags: ['tag1', 'tag2',
              'tag3'])

              named_user_tags.remove(group_name: 'loyalty', tags: ['tag6',
              'tag7'])

              named_user_tags.send_request
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/uninstall:
    post:
      - description: 'Example: Delete all users and their associated channels'
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/uninstall HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "named_user_id": ["user-id-1234","user-id-5678"]
              }
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user_uninstall = UA::NamedUserUninstaller.new(client:
              airship)

              named_user_uninstall.named_user_ids = ['user-id-1234']

              named_user_uninstall.uninstall
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserUninstallRequest namedUserUninstallRequest =
              NamedUserUninstallRequest
                      .newUninstallRequest(ImmutableList.of("user-id-1234","user-id-5678"));

              Response<String> response =
              client.execute(namedUserUninstallRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/named_users/{named_user_id}':
    post:
      - description: >
          Create a named user by associating an email and sms channel and
          setting tags and attributes.
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/john_doe HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "associate": [
                    {
                      "email_address": "john@company.com"
                    },
                    {
                      "channel_id": "f5346fa3-99f1-496d-be37-2895ef58f5a5",
                      "device_type": "sms"
                    }
                ],
                "tags": {
                    "set": {
                        "subscription_status": ["gold"],
                        "favorites" : ["sports", "stocks"]
                    }
                },
                "attributes": [
                  {
                    "action": "set",
                    "key": "name",
                    "value": "John"
                  }
                ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserUpdateChannel namedUserUpdateChannel =
              NamedUserUpdateChannel.newBuilder()
                      .addChannel(NamedUserUpdateDeviceType.ANDROID_CHANNEL, "aa2ae18c-f4b0-48ac-a859-55f26d2a7439")
                      .build();

              Attribute lastName = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("pseudo")
                      .setValue("Pataki")
                      .build();

              NamedUserUpdatePayload namedUserUpdatePayload =
              NamedUserUpdatePayload.newBuilder()
                      .addAttribute(lastName)
                      .addTags("go", List.of("test1","test2"))
                      .removeTags("go",List.of("test3","test4"))
                      .addNamedUserUpdateChannel(namedUserUpdateChannel)
                      .setAction(NamedUserUpdateChannelAction.ASSOCIATE)
                      .build();

              NamedUserUpdateRequest request =
              NamedUserUpdateRequest.newRequest("john", namedUserUpdatePayload);

              Response<NamedUserUpdateResponse> response =
              client.execute(request);
        showMissingLanguagePlaceholders: true
  '/api/named_users/{named_user_id}/attributes':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/my_named_user/attributes HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "attributes": [
                      {
                          "action": "set",
                          "key": "firstName",
                          "value": "Gyuri",
                          "timestamp": "2020-09-19 12:00:00"
                      },
                      {
                          "action": "remove",
                          "key": "birthDate",
                          "timestamp": "2020-09-19 12:00:00"
                      },
                      {
                          "action": "set",
                          "key": "lastName",
                          "value": "Pataki",
                          "timestamp": "2020-09-19 12:00:00"
                      }
                  ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Attribute firstName = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("firstName")
                      .setValue("Gyuri")
                      .setTimeStamp(DateTime.parse("2020-09-19T12:00:00Z"))
                      .build();

              Attribute birthDate = Attribute.newBuilder()
                      .setAction(AttributeAction.REMOVE)
                      .setKey("birthDate")
                      .setTimeStamp(DateTime.parse("2020-09-19T12:00:00Z"))
                      .build();

              Attribute lastName = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("lastName")
                      .setValue("Pataki")
                      .setTimeStamp(DateTime.parse("2020-09-19T12:00:00Z"))
                      .build();

              NamedUserAttributePayload payload =
              NamedUserAttributePayload.newBuilder()
                      .addAttribute(firstName)
                      .addAttribute(birthDate)
                      .addAttribute(lastName)
                      .build();

              NamedUserAttributeRequest request =
              NamedUserAttributeRequest.newRequest("my_named_user", payload);

              Response<NamedUserAttributeResponse> response =
              client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              for automation in ua.Automation(airship).list_automations():
                print(automation)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.limit = 5

              automation.list_automations
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "pipelines": [
                    {
                        "creation_time": "2020-03-20T18:37:23",
                        "enabled": true,
                        "immediate_trigger": {
                          "tag_added": { "tag": "bought_shoes" }
                        },
                        "last_modified_time": "2020-03-20T19:35:12",
                        "name": "Shoe buyers",
                        "outcome": {
                          "push": {
                              "audience": "triggered",
                              "device_types": [ "android" ],
                              "notification": { "alert": "So you like shoes, huh?" }
                          }
                        },
                        "status": "live",
                        "uid": "3987f98s-89s3-cx98-8z89-89adjkl29zds",
                        "url": "https://go.urbanairship.com/api/pipelines/3987f98s-89s3-cx98-8z89-89adjkl29zds"
                    },
                    {
                        "..."
                    }
                  ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/pipelines HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name":"The Darkest Pipeline",
                  "enabled":true,
                  "immediate_trigger":"first_open",
                  "outcome":{
                    "push":{
                        "audience":"triggered",
                        "device_types":[
                          "ios",
                          "android",
                          "web"
                        ],
                        "notification":{
                          "alert":"Cool goatee, Abed"
                        }
                    }
                  },
                  "timing":{
                    "delay":{
                        "seconds":7200
                    },
                    "schedule":{
                        "type":"local",
                        "miss_behavior":"wait",
                        "dayparts":[
                          {
                              "days_of_week":[
                                "thursday"
                              ],
                              "allowed_times":[
                                {
                                    "preferred":"21:30:00"
                                }
                              ]
                          }
                        ]
                    }
                  }
              }
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              automation = ua.Automation(airship)
              pipeline = ua.Pipeline(
                  name='The Darkest Pipeline',
                  enabled=True,
                  immediate_trigger=['first_open'],
                  outcome={
                      'audience': 'triggered',
                      'device_types': ua.device_types('ios', 'android', 'web'),
                      'notification': ua.notification(alert='Cool goatee, Abed')
                  },
                  timing={
                      delay': {'seconds': 7200},
                      'schedule': {
                          'type': 'local',
                          'miss_behavior': 'wait',
                          'dayparts': [{
                              'days_of_week': ['thursday'],
                              'allowed_times': [
                                  {'preferred': '21:30:00'}
                              ]
                          }]
                      }
                  }
              )
              response = automation.create(pipeline.payload)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              pipeline = UA::Pipeline.new(client: airship)

              pipeline.enabled = true

              pipeline.immediate_trigger = "first_open"

              pipeline.outcome = {
                  "push": {
                      "audience": "triggered",
                      "device_types": ['ios','android','web'],
                      "notification": {
                          "alert": "Cool goatee, Abed"
                      }
                  }
              }

              automation = UA::Automation.new(client: airship)

              automation.pipeline_object = pipeline.payload

              details = automation.create_automation

              puts(details)
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Content-Length: 123
              Data-Attribute: pipeline_urls
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "86ad9239-373d-d0a5-d5d8-04fed18f79bc",
                  "pipeline_urls": [
                    "https://go.urbanairship/api/pipelines/86ad9239-373d-d0a5-d5d8-04fed18f79bc"
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines/deleted:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/deleted/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')
              response = ua.Automation(airship).list_deleted_automations()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.start = 2020-11-23

              automation.list_deleted_automations
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "pipelines": [
                    {
                        "deletion_time": "2020-03-31T20:54:45",
                        "pipeline_id": "0sdicj23-fasc-4b2f-zxcv-0baf934f0d69"
                    },
                    {
                        "..."
                    }
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/pipelines/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name":"The Darkest Pipeline",
                  "enabled":true,
                  "immediate_trigger":"first_open",
                  "outcome":{
                    "push":{
                        "audience":"triggered",
                        "device_types":[
                          "ios",
                          "android"
                        ],
                        "notification":{
                          "alert":"Cool goatee, Abed"
                        }
                    }
                  },
                  "timing":{
                    "delay":{
                        "seconds":7200
                    },
                    "schedule":{
                        "type":"local",
                        "miss_behavior":"wait",
                        "dayparts":[
                          {
                              "days_of_week":[
                                "thursday"
                              ],
                              "allowed_times":[
                                {
                                    "preferred":"21:30:00"
                                }
                              ]
                          }
                        ]
                    }
                  }
              }
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              automation = ua.Automation(airship)
              pipeline = ua.Pipeline(
                  name='The Darkest Pipeline',
                  enabled=True,
                  immediate_trigger=['first_open'],
                  outcome={
                      'audience': 'triggered',
                      'device_types': ua.device_types('ios', 'android', 'web'),
                      'notification': ua.notification(alert='Cool goatee, Abed')
                  },
                  timing={
                      delay': {'seconds': 7200},
                      'schedule': {
                          'type': 'local',
                          'miss_behavior': 'wait',
                          'dayparts': [{
                              'days_of_week': ['thursday'],
                              'allowed_times': [
                                  {'preferred': '21:30:00'}
                              ]
                          }]
                      }
                  }
              )
              response = automation.validate(pipeline.payload)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              pipeline = UA::Pipeline.new(client: airship)

              pipeline.enabled = true

              pipeline.immediate_trigger = "first_open"

              pipeline.outcome = {
                  "push": {
                      "audience": "triggered",
                      "device_types": ['ios','android','web'],
                      "notification": {
                          "alert": "Cool goatee, Abed"
                      }
                  }
              }

              automation = UA::Automation.new(client: airship)

              automation.pipeline_object = pipeline.payload

              automation.validate_automation
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 11
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/pipelines/{pipeline_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE /api/pipelines/0f927674-918c-31ef-51ca-e96fdd234da4
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')

              response =
              ua.Automation(airship).delete('0f927674-918c-31ef-51ca-e96fdd234da4')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.pipeline_id = '0f927674-918c-31ef-51ca-e96fdd234da4'

              automation.delete_automation
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/4d3ff1fd-9ce6-5ea4-5dc9-5ccbd38597f4 HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')

              response =
              ua.Automation(airship).lookup('4d3ff1fd-9ce6-5ea4-5dc9-5ccbd38597f4')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.pipeline_id = '4d3ff1fd-9ce6-5ea4-5dc9-5ccbd38597f4'

              automation.lookup_automation
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "pipeline": {
                    "creation_time": "2020-02-14T19:19:19",
                    "enabled": true,
                    "immediate_trigger": { "tag_added": "new_customer" },
                    "last_modified_time": "2020-03-01T12:12:54",
                    "name": "New customer",
                    "outcome": {
                        "push": {
                          "audience": "triggered",
                          "device_types": [ "ios", "android" ],
                          "notification": { "alert": "Hello new customer!" }
                        }
                    },
                    "status": "live",
                    "uid": "86ad9239-373d-d0a5-d5d8-04fed18f79bc",
                    "url": "https://go.urbanairship/api/pipelines/86ad9239-373d-d0a5-d5d8-04fed18f79bc"
                  }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/pipelines/0f927674-918c-31ef-51ca-e96fdd234da4 HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json;

              {
                  "enabled": true,
                  "immediate_trigger": {
                    "tag_added": "new_customer"
                  },
                  "outcome": {
                    "push": {
                        "audience": "triggered",
                        "device_types": [
                          "ios"
                        ],
                        "notification": {
                          "alert": "Hello new customer!"
                        }
                    }
                  }
              }
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              automation = ua.Automation(airship)
              pipeline = ua.Pipeline(
                  enabled=True,
                  immediate_trigger={
                      'tag_added': 'new_customer'
                  },
                  outcome={
                      'audience': 'triggered',
                      'device_types': ua.device_types('ios'),
                      'notification': ua.notification(alert='Hello new customer!')
                  }
              )
              response = automation.update(
                  pipeline_id='0f927674-918c-31ef-51ca-e96fdd234da4',
                  pipeline=pipeline.payload
              )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              pipeline = UA::Pipeline.new(client: airship)

              pipeline.enabled = true

              pipeline.immediate_trigger = {
                "tag_added": {
                   "tag": "new_customer",
                   "group": "crm"
                  }
              }

              pipeline.outcome = {
                "push": {
                   "audience": "triggered",
                   "device_types": ["ios"],
                   "notification": {
                       "alert": "Hello new customer!"
                      }
                  }
              }

              automation = UA::Automation.new(client: airship)

              automation.pipeline_id = '0f927674-918c-31ef-51ca-e96fdd234da4'

              automation.pipeline_object = pipeline.payload

              automation.update_automation
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/push:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                      "ios_channel": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5"
                  },
                  "notification": {
                      "alert": "Hello!"
                  },
                  "device_types": [ "ios" ]
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushPayload payload = PushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("9c36e8c7-5a73-47c0-9716-99fd3d4197d5"))
                      .setNotification(Notifications.alert("Hello!"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .build();

              PushRequest request = PushRequest.newRequest(payload);
              Response<PushResponse> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')

              push = airship.create_push()

              push.audience =
              ua.ios_channel('9c36e8c7-5a73-47c0-9716-99fd3d4197d5')

              push.notification = ua.notification(alert='Hello!')

              push.device_types = ua.device_types('ios')

              push.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.or(
              UA.ios_channel('9c36e8c7-5a73-47c0-9716-99fd3d4197d5'))

              push.notification = UA.notification(alert: 'Hello!')

              push.device_types = UA.device_types(['ios'])

              push.send_push
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "9d78a53b-b16a-c58f-b78d-181d5e242078"
                  ]
              }
        showMissingLanguagePlaceholders: true
      - description: Example Push with Localizations
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "device_types": [ "ios", "android" ],
                 "audience": {
                    "tag": "needs_a_greeting",
                    "group": "new_customer"
                 },
                 "notification": {
                    "alert": "Hi!"
                 },
                 "localizations": [
                     {
                        "language": "de",
                        "country": "AT",
                        "notification": {
                           "alert": "Grüss Gott"
                        }
                     },
                     {
                        "language": "de",
                        "country": "DE",
                        "notification": {
                           "alert": "Guten Tag"
                        }
                     }
                  ]
               }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Localization localization = Localization.newBuilder()
                      .setCountry("AT")
                      .setLanguage("de")
                      .setNotification(Notifications.alert("Grüss Gott"))
                      .build();

              PushPayload payload = PushPayload.newBuilder()
                      .setAudience(Selectors.or(Selectors.tagWithGroup("needs_a_greeting", "new_customer")))
                      .addLocalization(localization)
                      .setNotification(Notifications.alert("Hi!"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                      .build();

              PushRequest request = PushRequest.newRequest(payload);
              Response<PushResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.tag("needs_a_greeting", group:'new_customer')

              push.notification = UA.notification(alert: 'Hi!')

              push.device_types = UA.device_types(['ios'])

              push.localizations = {
                "language": "de",
                "country": "AT",
                "notification": {
                "alert": "Grüss Gott"
                }
              }

              push.send_push
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "9d78a53b-b16a-c58f-b78d-181d5e242078",
                      "1cbfbfa2-08d1-92c2-7119-f8f7f670f5f6",
                      "939c3796-a755-413b-a36b-3026b1f92df8"
                  ],
                  "localized_ids": [
                     "1a38a2ba-c174-d32f-d01b-481a5d241934"
                  ]
              }
        showMissingLanguagePlaceholders: true
      - description: Example Email being sent using Push API with Template ID
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                      "tag": "needs_a_greeting",
                      "group": "new_customer"
                  },
                  "device_types": [
                      "email"
                  ],
                  "notification": {
                    "email": {
                      "message_type": "commercial",
                      "reply_to": "no-reply@airship.com",
                      "sender_address": "team@airship.com",
                      "sender_name": "Airship",
                      "template": {
                          "template_id": "876624ff-0120-4364-bf02-dba3d0cb5b85"
                      }
                    }
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "be97b696-8d6b-4aec-ac50-c9cfc4be57d6",
                  "push_ids": [
                      "72ce9ade-aa71-4fbe-b960-246f1a2ca9ee"
                  ],
                  "message_ids": [],
                  "content_urls": [],
                  "localized_ids": []
              }
        showMissingLanguagePlaceholders: true
  /api/push/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/push/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                      "ios_channel": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5"
                  },
                  "notification": {
                      "alert": "Hello!"
                  },
                  "device_types": [ "ios" ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushPayload payload = PushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("9c36e8c7-5a73-47c0-9716-99fd3d4197d5"))
                      .setNotification(Notifications.alert("Hello!"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .build();

              PushRequest request =
              PushRequest.newRequest(payload).setValidateOnly(true);

              Response<PushResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/regions:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/regions/?limit=100&start=100 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Data-Attribute: regions

              Link:
              <https://go.urbanairship.com/api/regions?limit=100&start=100>;
              rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "ok": true,
                 "next_page": "https://go.urbanairship.com/api/regions?limit=100&start=100",
                 "count": 100,
                 "regions": [
                     {
                         "region_id": "abe5deb3-01d0-436e-8c5d-94b6421a01e0",
                         "name": "My Favorite Place",
                         "created_at": "2020-06-09T12:34:56",
                         "updated_at": "2020-06-09T12:34:56",
                         "geofence": {
                             "type": "POLYGON",
                             "points": [
                                 {
                                     "latitude": 90.0,
                                     "longitude": 120.0
                                 },
                                 {
                                     "latitude": 45.0,
                                     "longitude": 120.0
                                 },
                                 {
                                     "latitude": 0.0,
                                     "longitude": 0.0
                                 }
                             ]
                         },
                         "beacons": [
                             {
                                 "name": "entryway",
                                 "id": "VLSHZAOEXOFCMLDVTKFQ"
                             },
                             {
                                 "name": "Exhibit A",
                                 "id": "ZAQYMNOZKRFCRPYEUCZI"
                             }
                         ],
                         "attributes": {
                             "store_name": "Tonali's Donuts"
                         },
                         "source_info": {
                             "source": "GIMBAL",
                             "region_id": "C56654BC0C3243D6A4B7A3673560D6F8",
                             "vendor_href": "https://manager.gimbal.com/api/v2/places/C56654BC0C3243D6A4B7A3673560D6F8"
                         }
                     }
                 ]
              }
        showMissingLanguagePlaceholders: true
  '/api/regions/{region_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/regions/7d4d9a5c-eff5-40f2-b648-4352c166e878 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: region
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "region": {
                      "region_id": "7dbd9a5c-eff5-40f2-b648-4352c1668878",
                      "created_at": "2020-08-24T23:15:22.900",
                      "updated_at": "2020-08-24T23:15:22.900",
                      "name": "Alberta Park",
                      "source_info": {
                          "source": "GIMBAL",
                          "region_id": "C56654BC0C3243D6A4B7A3673560D6F8",
                          "vendor_href": "https://manager.gimbal.com/api/v2/places/C56654BC0C3243D6A4B7A3673560D6F8"
                      },
                      "geofence": {
                          "type": "CIRCLE",
                          "center": {
                              "latitude": 45.56447530000002,
                              "longitude": -122.64461097354126
                          },
                          "radius": 200
                      },
                      "attributes": {
                           "park_name": "alberta",
                           "type": "park"
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/devices:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/reports/devices HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              DevicesReportRequest request = DevicesReportRequest.newRequest()
                      .setDate(DateTime.parse("2020-08-28T10:34:22Z"));

              Response<DevicesReportResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              date = datetime(2020, 8, 28)
              response = ua.reports.DevicesReport(airship).get(date)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              d = UA::DevicesReport.new(client: airship)

              devices = d.get(date: '2020/08/28')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "total_unique_devices": 13186,
                  "date_closed": "2020-08-28 00:00:00",
                  "date_computed": "2020-08-29 13:30:45",
                  "counts": {
                      "ios": {
                          "unique_devices": 231,
                          "opted_in": 142,
                          "opted_out": 89,
                          "uninstalled": 2096
                      },
                      "android": {
                          "unique_devices": 11795,
                          "opted_in": 226,
                          "opted_out": 11569,
                          "uninstalled": 1069
                      },
                      "amazon": {
                          "unique_devices": 29,
                          "opted_in": 22,
                          "opted_out": 7,
                          "uninstalled": 9
                      },
                      "sms": {
                          "unique_devices": 26,
                          "opted_in": 23,
                          "opted_out": 3,
                          "uninstalled": 17
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/events:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/events?start=2020-08-01T10:00:00.000Z&end=2020-08-15T20:00:00.000Z&precision=MONTHLY&page_size=20
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "total_value": 2,
                  "total_count": 709,
                  "next_page": "https://go.urbanairship.com/api/reports/events?start=2020-08-01T10:00:00.000Z&end=2020-08-15T20:00:00.000Z&precision=MONTHLY&page_size=20&page=2",
                  "events": [
                      {
                          "name": "banner_image",
                          "conversion": "indirect",
                          "location": "ua_mcrap",
                          "count": 1,
                          "value": 1
                      },
                      {
                          "name": "bounce",
                          "conversion": "direct",
                          "location": "custom",
                          "count": 23,
                          "value": 0
                      },
                      {
                          "name": "button-click-Do it ",
                          "conversion": "direct",
                          "location": "in_app_message",
                          "count": 1,
                          "value": 0
                      },
                      {
                          "name": "button-click-Get Notifications",
                          "conversion": "unattributed",
                          "location": "in_app_message",
                          "count": 3,
                          "value": 0
                      },
                      {
                          "name": "button-click-RATE NOW",
                          "conversion": "direct",
                          "location": "in_app_message",
                          "count": 1,
                          "value": 0
                      },
                      {
                          "name": "button-click-Rate the app.",
                          "conversion": "direct",
                          "location": "in_app_message",
                          "count": 1,
                          "value": 0
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/experiment/detail/{push_id}/{variant_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/experiment/detail/b43ae1b2-3ff6-4c02-adb2-79deac0bbb19/2
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "app_key": "some_app_key",
                  "experiment_id": "a7806815-6483-4cb9-9d74-bc3b4f3dc1b8",
                  "push_id": "b43ae1b2-3ff6-4c02-adb2-79deac0bbb19",
                  "created": "2020-02-25 23:03:12",
                  "variant": 2,
                  "variant_name": "thing_two",
                  "sends": 64,
                  "direct_responses": 3,
                  "influenced_responses": 1,
                  "platforms": {
                      "android": {
                          "direct_responses": 0,
                          "influenced_responses": 0,
                          "sends": 22
                      },
                      "ios": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 36
                      },
                      "amazon": {
                          "direct_responses": 0,
                          "influenced_responses": 0,
                          "sends": 0
                      },
                      "web": {
                          "direct_responses": 3,
                          "indirect_responses": 0,
                          "sends": 6
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/experiment/overview/{push_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/experiment/overview/b43ae1b2-3ff6-4c02-adb2-79deac0bbb19
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "app_key": "some_app_key",
                 "experiment_id": "a7806815-6483-4cb9-9d74-bc3b4f3dc1b8",
                 "push_id": "b43ae1b2-3ff6-4c02-adb2-79deac0bbb19",
                 "created": "2020-02-25 23:03:12",
                 "sends": 532,
                 "direct_responses": 50,
                 "influenced_responses": 60,
                 "web_clicks": 6,
                 "web_sessions": 8,
                 "variants": [
                    {
                       "id" : 0,
                       "name": "call to action",
                       "audience_pct": 45.0,
                       "sends": 238,
                       "direct_responses": 32,
                       "direct_response_pct": 13.44,
                       "indirect_responses": 0,
                       "indirect_response_pct": 0.0
                    },
                    {
                       "id" : 1,
                       "name": "gentle reminder",
                       "audience_pct": 45.0,
                       "sends": 251,
                       "direct_responses": 20,
                       "direct_response_pct": 7.97,
                       "indirect_responses": 4,
                       "indirect_response_pct": 1.59
                    }
                 ],
                 "control": {
                   "audience_pct": 10.0,
                   "sends": 50,
                   "responses": 1,
                   "response_rate_pct": 2.0
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/opens:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/opens?start=2020-08-01%2010:00&end=2020-08-15%2020:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.APP_OPENS)
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 8, 1)
              end_date = datetime(2020, 8, 15)

              listing = ua.AppOpensList(airship=airship,
                                      start_date=start_date,
                                      end_date=end_date,
                                      precision='MONTHLY')
              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::AppOpensList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-15',
                  precision: 'MONTHLY')
              listing.each do |app_opens|
                  puts(app_opens)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "opens": [
                      {
                          "date": "2020-08-01 00:00:00",
                          "ios": 350,
                          "android": 250
                      }
                  ]
              }
        showMissingLanguagePlaceholders: tru
  /api/reports/optins:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/optins?start=2020-08-01%2010:00&end=2020-08-15%2020:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.OPT_INS)
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 8, 1)
              end_date = datetime(2020, 8, 15)

              listing = ua.OptInList(airship=airship,
                                      start_date=start_date,
                                      end_date=end_date,
                                      precision='MONTHLY')
              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::OptInList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-15',
                  precision: 'MONTHLY')
              listing.each do |opt_ins|
                  puts(opt_ins)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "optins": [
                    {
                       "android": 50,
                       "date": "2020-05-01 00:00:00",
                       "ios": 500
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/optouts:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/optouts?start=2020-08-01%2010:00&end=2020-08-15%2020:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.OPT_OUTS)
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 8, 1)
              end_date = datetime(2020, 8, 15)

              listing = ua.OptOutList(airship=airship,
                                    start_date=start_date,
                                    end_date=end_date,
                                    precision='MONTHLY')
              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::OptOutList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-15',
                  precision: 'MONTHLY')
              listing.each do |opt_outs|
                  puts(opt_outs)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "optouts": [
                    {
                       "android": 5,
                       "date": "2020-05-01 00:00:00",
                       "ios": 25
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/responses:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/responses?start=2020-05-01%2010:00&end=2020-05-30%2010:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ResponseReportRequest request = ResponseReportRequest
                      .newRequest(DateTime.parse("2020-05-01T10:34:22Z"),
                                  DateTime.parse("2020-05-30T10:34:22Z"),
                                  Precision.MONTHLY);

              Response<ResponseReportResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 5, 1)
              end_date = datetime(2020, 5, 30)
              listing = ua.ResponseReportList(airship=airship,
                                              start_date=start_date,
                                              end_date=end_date,
                                              precision='MONTHLY')
              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::ResponseReportList.new(
                  client: airship,
                  start_date: '2020-05-01',
                  end_date: '2020-05-30',
                  precision: 'MONTHLY'
              )

              listing.each do |resp|
                  puts(resp)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "next_page": "https://go.urbanairship.com/api/reports/...",
                 "responses": [
                    {
                       "android": {
                          "direct": 25,
                          "influenced": 118
                       },
                       "date": "2020-05-01 00:00:00",
                       "ios": {
                          "direct": 16,
                          "influenced": 87
                       }
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/reports/responses/list:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/responses/list?start=2020-08-01%2010:00&end=2020-08-15%2010:00&limit=20
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushListingRequest request = PushListingRequest.newRequest()
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setLimit(20);

              Response<PushListingResponse> response = client.execute(request);


              // Get the first item in an array of push info responses. You can
              use all of the getters

              // listed in the "Individual Push Response Statistics" section.

              PushInfoResponse pushInfo =
              response.getBody().get().getPushInfoList().get().get(0);
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 8, 1)
              end_date = datetime(2020, 8, 15)

              listing = ua.ResponseList(airship=airship,
                                        start_date=start_date,
                                        end_date=end_date)
              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              response_list = UA::ResponseList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-30',
                  limit: 20,
                  push_id_start: 'start_id'
              )

              response_list.each do |resp|
                  puts(resp)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "next_page": "https://go.urbanairship.com/api/reports/responses/list?start=2020-08-01+10%...",
                  "pushes": [
                      {
                          "push_uuid": "f4db3752-a982-4a2b-994e-7b5fd1c7f02f",
                          "push_time": "2020-08-15 02:12:22",
                          "push_type": "UNICAST_PUSH",
                          "group_id": "4e768dc7-4ebc-4206-890a-60b5627763a7",
                          "direct_responses": 0,
                          "sends": 1,
                          "open_channels_sends": {
                              "platforms": []
                          }
                      },
                      {
                          "push_uuid": "5a4ade58-fbd3-43a2-ac3c-e834ee190151",
                          "push_time": "2020-08-14 19:58:15",
                          "push_type": "UNICAST_PUSH",
                          "group_id": "c5664e1f-106e-4616-9820-7d9ecce8a3f3",
                          "direct_responses": 1,
                          "sends": 2,
                          "open_channels_sends": {
                              "platforms": []
                          }
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/responses/{push_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET /api/reports/responses/90f28bc6-6c9b-4c99-b970-973afc266e08
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushInfoRequest request =
              PushInfoRequest.newRequest("90f28bc6-6c9b-4c99-b970-973afc266e08");


              Response<PushInfoResponse> response = client.execute(request);

              PushInfoResponse pushInfo = response.getBody().get();


              // Number of sends

              int sends = pushInfo.getSends();

              // Number of direct responses to the push

              int directResponses = pushInfo.getDirectResponses();

              // When the push was sent

              DateTime date = pushInfo.getPushTime();

              // The push type - can be one of BROADCAST_PUSH, SCHEDULED_PUSH,
              TAG_PUSH, UNICAST_PUSH

              PushInfoResponse.PushType type = pushInfo.getPushType();

              // The unique identifier for the push

              UUID pushId = pushInfo.getPushId();
          - lang: python
            source: |
              from datetime import datetime
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              push_id = '90f28bc6-6c9b-4c99-b970-973afc266e08'
              response = ua.IndividualResponseStats(airship).get(push_id)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              d = UA::IndividualResponseStats.new(client: airship)

              statistics = d.get(push_id:
              '90f28bc6-6c9b-4c99-b970-973afc266e08')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "push_uuid": "90f28bc6-6c9b-4c99-b970-973afc266e08",
                 "push_time": "2020-02-25 23:03:12",
                 "push_type": "UNICAST_PUSH",
                 "sends": 167,
                 "direct_responses": 15,
                 "open_channels_sends": {
                    "platforms": [
                      {
                         "id": "PLATFORM_NAME",
                         "sends": 22
                      },
                      {
                         "id": "ANOTHER_PLATFORM",
                         "sends": 145
                      }
                    ]
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/sends:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/sends?start=2020-05-01%2010:00&end=2020-05-30%2020:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.SENDS)
                      .setStart(DateTime.parse("2020-05-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-05-30T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua

              from datetime import datetime


              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 5, 1)

              end_date = datetime(2020, 5, 30)

              precision = 'MONTHLY'

              listing = ua.reports.PushList(airship, start_date, end_date,
              precision)


              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::PushList.new(
                  client: airship,
                  start_date: '2020/05/01',
                  end_date: '2020/05/30',
                  precision: 'MONTHLY'
              )

              listing.each do |resp|
                  puts(resp)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "sends": [
                    {
                       "android": 50,
                       "date": "2020-05-01 00:00:00",
                       "ios": 500
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/timeinapp:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/timeinapp?start=2020-05-01%2010:00&end=2020-05-15%2020:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.TIME_IN_APP)
                      .setStart(DateTime.parse("2020-05-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-05-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua

              from datetime import datetime


              airship = ua.Airship('<app key>', '<master secret>')

              start_date = datetime(2020, 5, 1)

              end_date = datetime(2020, 5, 15)

              precision = 'MONTHLY'

              listing = ua.reports.TimeInAppList(airship, start_date, end_date,
              precision)

              for resp in listing:
                  print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::TimeInAppList.new(
                  client: airship,
                  start_date: '2020-05-01',
                  end_date: '2020-05-30',
                  precision: 'MONTHLY')
              listing.each do |time_in_app|
                  puts(time_in_app)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "timeinapp": [
                    {
                       "android": 50,
                       "date": "2020-05-01 00:00:00",
                       "ios": 500
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/web/interaction:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/web/interaction?app_key=ZGIwZTY3YjEtZTRiMi00ZG&start=2020-05-01%2010:00&end=2020-05-03%2020:00&precision=HOURLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "app_key": "ZGIwZTY3YjEtZTRiMi00ZG",
                 "end": "2020-05-03 00:00:00",
                 "precision": "HOURLY",
                 "start": "2020-05-01 00:00:00",
                 "total_counts": [
                    {"counts": {"clicks": 36, "sessions": 55 }, "date": "2020-05-01 10:00:00"},
                    {"counts": {"clicks": 50, "sessions": 79 }, "date": "2020-05-01 11:00:00"},
                    {"..."},
                    {"..."},
                    {"counts": {"clicks": 67, "sessions": 75 }, "date": "2020-05-03 20:00:00"}
                ]
              }
        showMissingLanguagePlaceholders: true
  /api/schedules:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleListingRequest request =
              ScheduleListingRequest.newRequest();

              Response<ListAllSchedulesResponse> response =
              client.execute(request);

              List<SchedulePayloadResponse> schedules =
              response.getBody().get().getSchedules();
          - lang: python
            source: |
              import urbanairship as ua
              airship = ua.Airship('<app key>', '<master secret>')

              for schedule in ua.ScheduledList(airship):
                  print(
                  schedule.name, schedule.url, schedule.push_ids,
                  schedule.schedule, schedule.push
                  )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              scheduled_push_list = UA::ScheduledPushList.new(client: airship)

              scheduled_push_list.each do |schedule|
                  puts(schedule)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Count: 2
              Data-Attribute: schedules
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "count": 2,
                  "total_count": 4,
                  "next_page": "https://go.urbanairship.com/api/schedules/?start=5c69320c-3e91-5241-fad3-248269eed104&limit=2&order=asc",
                  "schedules": [
                      {
                          "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109",
                          "schedule": { },
                          "push": { }
                      },
                      {
                          "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed10A",
                          "schedule": { },
                          "push": { }
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                {
                  "name": "Morning People",
                  "schedule": {
                      "scheduled_time": "2020-06-03T09:15:00"
                  },
                  "push": {
                      "audience": { "tag": "earlyBirds" },
                      "notification": { "alert": "Good Day Sunshine" },
                      "device_types": [ "ios", "android" ]
                  }
                },
                {
                  "name": "Everybody Else",
                  "schedule": {
                      "best_time": {
                        "send_date": "2020-06-03"
                      }
                  },
                  "push": {
                      "audience": { "tag": "normalPeople" },
                      "notification": { "alert": "Stay Up Late" },
                      "device_types": [ "ios", "android" ]
                  }
                }
              ]
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SchedulePayload schedulePayload = SchedulePayload.newBuilder()
                      .setName("Morning People")
                      .setSchedule(Schedule.newBuilder()
                              .setScheduledTimestamp(DateTime.parse("2020-06-03T09:15:00Z"))
                              .build())
                      .setPushPayload(PushPayload.newBuilder()
                              .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                              .setNotification(Notifications.alert("Good Day Sunshine"))
                              .setAudience(Selectors.tag("earlyBirds"))
                              .build())
                      .build();

              ScheduleRequest scheduleRequest =
              ScheduleRequest.newRequest(schedulePayload);

              Response<ScheduleResponse> response =
              client.execute(scheduleRequest);
          - lang: python
            source: >
              import datetime

              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              sched = airship.create_scheduled_push()

              sched.name = 'Morning People'

              sched.schedule = ua.scheduled_time(
                datetime.datetime.utcnow() + datetime.timedelta(minutes=60)
              )

              sched.push = airship.create_push()

              sched.push.audience = ua.tag('earlyBirds')

              sched.push.notification = ua.notification(alert='Good Day
              Sunshine')

              sched.push.device_types = ['ios', 'android']

              sched.send()


              response = sched.send()

              print ('Created schedule. URL:', response.schedule_url)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.tag('earlyBirds')

              push.notification = UA.notification(alert: 'Morning People')

              push.device_types = UA.device_types(['ios','android'])


              schedule = airship.create_scheduled_push

              schedule.push = push

              schedule.name = "Morning People"

              schedule.schedule = UA.scheduled_time(Time.now.utc + 60)

              response = schedule.send_push

              print ("Created schedule. url: " + response.schedule_url)
        showMissingLanguagePlaceholders: true
      - description: Example schedule with localizations
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                {
                  "name": "Greetings",
                  "schedule": {
                      "best_time": {
                        "send_date": "2020-11-15"
                      }
                  },
                  "push": {
                      "device_types": [
                        "ios",
                        "android"
                      ],
                      "audience": {
                        "tag": "needs_a_greeting",
                        "group": "new_customer"
                      },
                      "notification": {
                        "alert": "Hi!"
                      },
                      "localizations": [
                        {
                            "language": "de",
                            "country": "AT",
                            "notification": {
                              "alert": "Grüss Gott"
                            }
                        },
                        {
                            "language": "de",
                            "country": "DE",
                            "notification": {
                              "alert": "Guten Tag"
                            }
                        }
                      ]
                  }
                }
              ]
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Localization one = Localization.newBuilder()
                      .setCountry("AT")
                      .setLanguage("de")
                      .setNotification(Notifications.alert("Grüss Gott"))
                      .build();

              Localization two = Localization.newBuilder()
                      .setCountry("DE")
                      .setLanguage("de")
                      .setNotification(Notifications.alert("Guten Tag"))
                      .build();

              SchedulePayload schedulePayload = SchedulePayload.newBuilder()
                      .setName("Greetings")
                      .setSchedule(Schedule.newBuilder()
                              .setBestTime(BestTime.newBuilder()
                                      .setSendDate(DateTime.parse("2020-11-15T00:00:00Z"))
                                      .build())
                              .build())
                      .setPushPayload(PushPayload.newBuilder()
                              .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                              .setNotification(Notifications.alert("Hi!"))
                              .setAudience(Selectors.tagWithGroup("needs_a_greeting", "new_customer"))
                              .addLocalization(one)
                              .addLocalization(two)
                              .build())
                      .build();

              ScheduleRequest scheduleRequest =
              ScheduleRequest.newRequest(schedulePayload);

              Response<ScheduleResponse> response =
              client.execute(scheduleRequest);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.tag('needs_a_greeting', group:'new_customer')

              push.notification = UA.notification(alert: 'Hi!')

              push.device_types = UA.device_types(['ios', 'android'])

              push.localizations = {
                "language": "de",
                "country": "AT",
                "notification": {
                "alert": "Grüss Gott"
                }
              }


              schedule = airship.create_scheduled_push

              schedule.push = push

              schedule.name = "Greetings"

              schedule.schedule = UA.scheduled_time(Time.now.utc + 60)

              response = schedule.send_push

              print ("Created schedule. url: " + response.schedule_url)
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Data-Attribute: schedule_urls
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "operation_id": "efb18e92-9a60-6689-45c2-82fedab36399",
                 "schedule_urls": [
                      "https://go.urbanairship.com/api/schedules/eac2ace6-349a-41a2-b874-5496d7bf0100",
                      "https://go.urbanairship.com/api/schedules/6c7c9bf5-cb2b-47cb-b27f-f85981391c4e"
                  ],
                  "schedule_ids": [
                      "eac2ace6-349a-41a2-b874-5496d7bf0100",
                      "6c7c9bf5-cb2b-47cb-b27f-f85981391c4e"
                  ],
                 "schedules": [
                    {
                       "url": "https://go.urbanairship.com/api/schedules/eac2ace6-349a-41a2-b874-5496d7bf0100",
                       "schedule": {
                          "scheduled_time": "2020-06-03T09:15:00"
                       },
                       "name": "Morning People",
                       "push": {
                          "audience": { "tag": "earlyBirds" },
                          "notification": { "alert": "Good Day Sunshine" },
                          "device_types": [ "ios", "android" ]
                       },
                       "push_ids": [ "83046227-9b06-4114-9f23-0df349792bbd" ]
                    }
                    {
                        "url": "https://go.urbanairship.com/api/schedules/6c7c9bf5-cb2b-47cb-b27f-f85981391c4e",
                        "schedule": {
                          "best_time": {
                            "send_date": "2020-06-03"
                          }
                        },
                        "name": "Everybody Else",
                        "push": {
                          "audience": { "tag": "normalPeople" },
                          "notification": { "alert": "Stay Up Late" },
                          "device_types": [ "ios", "android" ]
                       },
                       "push_ids": [ "8438e81-bb31-82a9-5feb-e7fd5b21ca7e" ]
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/schedules/create-and-send:
    post:
      - description: Example Scheduled Create and Send
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules/create-and-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "schedule": {
                  "scheduled_time" : "2020-11-11T12:00:00"
                },
                "name" : "scheduled winter sale email",
                "push" : {
                  "audience": {
                    "create_and_send" : [
                      {
                        "ua_address": "new@email.com",
                        "ua_commercial_opted_in": "2020-11-29T10:34:22"
                      },
                      {
                        "ua_address" : "ben@icetown.com",
                        "ua_commercial_opted_in": "2020-11-29T12:45:10"
                      }
                    ]
                  },
                  "device_types" : [ "email" ],
                  "notification" : {
                    "email": {
                      "subject": "Welcome to the Winter Sale! ",
                      "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                      "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                      "message_type": "commercial",
                      "sender_name": "Airship",
                      "sender_address": "team@airship.com",
                      "reply_to": "no-reply@airship.com"
                    }
                  },
                  "campaigns": {
                      "categories": ["winter sale", "west coast"]
                  }
                }
              }
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.bypass_opt_in_level = false

              email_notification.html_body = "<h1>Seasons Greetings</h1><p>Check
              out our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>"

              email_notification.message_type = 'transactional'

              email_notification.plaintext_body = 'Greetings! Check out our
              latest winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.subject = 'Welcome to the Winter Sale!'

              override = email_notification.email_override

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@email.com",
                  "ua_commercial_opted_in": "2020-10-28T10:34:22"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.campaigns = ["winter sale", "west coast"]

              send_it.notification = email_notification.email_override

              send_it.name = "scheduled winter sale email"

              send_it.scheduled_time = "2020-12-08T11:06:00"

              send_it.schedule
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "operation_id": "67c65146-c27f-431f-b54a-83aca694fdd3",
                "push_ids": [
                    "8cf8b2a5-7655-40c2-a500-ff498e60453e"
                ],
                "schedule_urls": [
                    "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109"
                ],
                "schedules": [
                    {
                      "push": {
                          "audience": {
                            "create_and_send": [
                                {
                                  "ua_address": "new@email.com",
                                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                                },
                                {
                                  "ua_address": "ben@icetown.com",
                                  "ua_commercial_opted_in": "2020-11-29T12:45:10"
                                }
                            ]
                          },
                          "device_types": [
                            "email"
                          ],
                          "notification": {
                            "campaigns": {
                                "categories": [
                                  "winter sale",
                                  "west coast"
                                ]
                            },
                            "email": {
                                "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                                "message_type": "commercial",
                                "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                                "reply_to": "no-reply@airship.com",
                                "sender_address": "team@airship.com",
                                "sender_name": "Airship",
                                "subject": "Welcome to the Winter Sale! "
                            }
                          }
                      },
                      "schedule": {
                          "scheduled_time": "2020-11-11T12:00:00"
                      },
                      "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109"
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
  '/api/schedules/{schedule_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE /api/schedules/b384ca54-0a1d-9cb3-2dfd-ae5964630e66
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleDeleteRequest request =
              ScheduleDeleteRequest.newRequest("b384ca54-0a1d-9cb3-2dfd-ae5964630e66");

              Response<String> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')

              schedule = ua.ScheduledPush.from_url(airship,
              'https://go.urbanairship.com/api/schedules/b384ca54-0a1d-9cb3-2dfd-ae5964630e66')


              # Cancel schedule

              schedule.cancel()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              schedule = airship.create_scheduled_push

              schedule = UA::ScheduledPush.from_url(client: airship, url:
              'https://go.urbanairship.com/api/schedules/b384ca54-0a1d-9cb3-2dfd-ae5964630e66')

              schedule.cancel
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/schedules/5cde3564-ead8-9743-63af-821e12337812 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleListingRequest request =
              ScheduleListingRequest.newRequest("5cde3564-ead8-9743-63af-821e12337812");

              Response<ListAllSchedulesResponse> response =
              client.execute(request);

              SchedulePayloadResponse schedule =
              response.getBody().get().getSchedules().get(0);

              // Get the schedule's name

              Optional<String> name = schedule.getName();

              // Get the push IDs

              Set<String> pushIds = schedule.getPushIds();

              // Get the scheduled time

              Schedule sched = schedule.getSchedule();

              // Get the associated push payload

              PushPayload payload = schedule.getPushPayload();

              // Get the URL

              Optional<String> url = schedule.getUrl();
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              schedule = airship.create_scheduled_push

              scheduled_push = UA::ScheduledPush.new(airship)

              schedule_details = scheduled_push.list(schedule_id:
              '5cde3564-ead8-9743-63af-821e12337812')

              puts(schedule_details)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "name": "I would like to subscribe to your newsletter",
                 "schedule": {
                    "scheduled_time": "2020-04-01T18:45:30"
                 },
                 "push": {
                    "audience": {
                       "tag": [
                          "intriguing",
                          "ideas"                       ]
                    },
                    "notification": {
                       "alert": "Check your inbox!"
                    },
                    "device_types": [ "ios", "android" ]
                 }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/schedules/5cde3564-ead8-9743-63af-821e12337812 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "name": "I would like to subscribe to your newsletter",
                 "schedule": {
                    "scheduled_time": "2020-04-01T18:45:30"
                 },
                 "push": {
                    "audience": {
                       "tag": [
                          "intriguing",
                          "ideas",
                          "thought_leadership"
                       ]
                    },
                    "notification": {
                       "alert": "Check your inbox!"
                    },
                    "device_types": [ "ios", "android" ]
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SchedulePayload schedulePayload = SchedulePayload.newBuilder()
                      .setName("I would like to subscribe to your newsletter")
                      .setSchedule(Schedule.newBuilder()
                              .setScheduledTimestamp(DateTime.parse("2020-04-01T18:45:00Z"))
                              .build())
                      .setPushPayload(PushPayload.newBuilder()
                              .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                              .setNotification(Notifications.alert("Check your inbox!"))
                              .setAudience(Selectors.tag("intriguing"))
                              .build())
                      .build();

              ScheduleRequest scheduleRequest =
              ScheduleRequest.newUpdateRequest(schedulePayload,
              "5cde3564-ead8-9743-63af-821e12337812");

              Response<ScheduleResponse> response =
              client.execute(scheduleRequest);
          - lang: python
            source: >
              import datetime

              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              schedule = ua.ScheduledPush.from_url(airship,
              'https://go.urbanairship.com/api/schedules/5cde3564-ead8-9743-63af-821e12337812')


              # change scheduled time to tomorrow

              schedule.schedule = ua.scheduled_time(
                  datetime.datetime.utcnow() + datetime.timedelta(days=1))
              resp = schedule.update()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              schedule = airship.create_scheduled_push

              schedule = UA::ScheduledPush.from_url(client: airship, url:
              'https://go.urbanairship.com/api/schedules/5cde3564-ead8-9743-63af-821e12337812')

              # change scheduled time to tomorrow

              schedule.schedule = UA.scheduled_time(Time.now.utc + (60 * 60 *
              24))

              schedule.update
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "7c56d013-5599-d66d-6086-6205115d85e2",
                  "schedule_urls": [ "https://go.urbanairship.com/api/schedules/0af1dead-e769-4b78-879a-7c4bb52d7c9e" ],
                  "schedules": [
                      {
                          "url": "https://go.urbanairship.com/api/schedules/0af1dead-e769-4b78-879a-7c4bb52d7c9e",
                          "schedule": {
                              "scheduled_time": "2020-04-01T18:45:30"
                          },
                          "name": "I would like to subscribe to your newsletter",
                          "push": {
                              "audience": {"tag": ["intriguing", "ideas", "thought_leadership"] },
                              "notification": {"alert": "Check your inbox!"},
                              "device_types": [ "ios", "android" ]
                          },
                          "push_ids": [ "48fb8e8a-ee51-4e2a-9a47-9fab9b13d846" ]
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/schedules/{schedule_id}/pause':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              POST /api/schedules/5cde3564-ead8-9743-63af-821e12337812/pause
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleStatusRequest pauseRequest =
              ScheduleStatusRequest.pauseScheduleRequest("68b2d71f-1c10-4592-bd96-2725aee0ae57");

              Response<String> pauseResponse =
              client.execute(pauseRequest);      
        showMissingLanguagePlaceholders: true
  '/api/schedules/{schedule_id}/resume':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              POST /api/schedules/5cde3564-ead8-9743-63af-821e12337812/resume
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleStatusRequest resumeRequest =
              ScheduleStatusRequest.resumeScheduleRequest("68b2d71f-1c10-4592-bd96-2725aee0ae57");

              Response<String> resumeResponse = client.execute(resumeRequest);
        showMissingLanguagePlaceholders: true
  /api/segments:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/segments/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SegmentListingRequest request =
              SegmentListingRequest.newRequest();

              Response<SegmentListingResponse> response =
              client.execute(request);


              // Get the first segment in the list

              SegmentListingView segment =
              response.getBody().get().getSegmentListingViews().get(0);


              // Get the segment display name

              String displayName = segment.getDisplayName();


              // Get the segment ID

              String id = segment.getSegmentId();
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              segment_list = ua.SegmentList(airship)

              for segment in segment_list:
                print(segment.display_name)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment_list = UA::SegmentList.new(client: airship)


              segment_list.each do |segment|
                 puts(segment['display_name'])
              end
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Link:
              <https://go.urbanairship.com/api/segments?limit=1&sort=id&order=asc&start=3832cf72-cb44-4132-a11f-eafb41b82f64>;rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "next_page": "https://go.urbanairship.com/api/segments?limit=1&sort=id&order=asc&start=3832cf72-cb44-4132-a11f-eafb41b82f64",
                 "segments": [
                    {
                       "creation_date": 1346248822221,
                       "display_name": "A segment",
                       "id": "00c0d899-a595-4c66-9071-bc59374bbe6b",
                       "modification_date": 1346248822221
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/segments HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "display_name": "News but not sports",
                 "criteria": {
                    "and": [
                       {"tag": "news"},
                       {"not":
                          {"tag": "sports"}
                       }
                    ]
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              // Define the segment criteria

              Selector compound = Selectors.and(Selectors.tag("news"),
              Selectors.not(Selectors.tag("sports")));


              SegmentRequest request = SegmentRequest.newRequest();

              request.setCriteria(compound);

              request.setDisplayName("News but not sports");


              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              segment = ua.Segment()
              segment.display_name = "Display Name"
              segment.criteria = {"tag": "Existing Tag"}
              resp = segment.create(airship)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              segment.display_name = 'Display Name'

              segment.criteria = { 'tag' => 'existing_tag' }

              segment.create
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/segments/f35da41d-59c1-4106-a192-9594bd480cb6

              Content-Type: application/vnd.urbanairship+json;version=3


              {
                 "ok": true,
                 "segment_id": "f35da41d-59c1-4106-a192-9594bd480cb6",
                 "operation_id": "1d154121-951f-45b9-896d-e70718b5865b"
              }
        showMissingLanguagePlaceholders: true
  '/api/segments/{segment_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/segments/00c0d899-a595-4c66-9071-bc59374bbe6b HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SegmentDeleteRequest request =
              SegmentDeleteRequest.newRequest("00c0d899-a595-4c66-9071-bc59374bbe6b");

              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              segment = ua.Segment()
              segment.from_id(airship, "00c0d899-a595-4c66-9071-bc59374bbe6b")
              response = segment.delete(airship)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              segment.from_id(id: '00c0d899-a595-4c66-9071-bc59374bbe6b')

              segment.delete
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/segments/00c0d899-a595-4c66-9071-bc59374bbe6b HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SegmentLookupRequest request =
              SegmentLookupRequest.newRequest("00c0d899-a595-4c66-9071-bc59374bbe6b");

              Response<SegmentView> response = client.execute(request);


              // Get the segment criteria

              Selector criteria = response.getBody().get().getCriteria();


              // Get the segment display name

              String displayName = response.getBody().get().getDisplayName();
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              segment = ua.Segment()

              response = segment.from_id(airship,
              "00c0d899-a595-4c66-9071-bc59374bbe6b")
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              details = segment.from_id(id:
              '00c0d899-a595-4c66-9071-bc59374bbe6b')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "criteria": {
                    "and": [
                       {
                          "tag": "ipad"
                       },
                       {
                          "not": {
                             "tag": "foo"
                          }
                       }
                    ]
                 },
                 "display_name": "A segment"
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/segments/00c0d899-a595-4c66-9071-bc59374bbe6b HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "display_name": "Entertainment but not sports",
                 "criteria": {
                    "and": [
                       {"tag": "entertainment"},
                       {"not":
                          {"tag": "sports"}
                       }
                    ]
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              // Define the segment criteria

              Selector compound = Selectors.and(Selectors.tag("entertainment"),
              Selectors.not(Selectors.tag("sports")));


              SegmentRequest request =
              SegmentRequest.newUpdateRequest("00c0d899-a595-4c66-9071-bc59374bbe6b");

              request.setCriteria(compound);

              request.setDisplayName("Entertainment but not sports");


              Response<String> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              segment = ua.Segment()
              segment.from_id(airship, "00c0d899-a595-4c66-9071-bc59374bbe6b")
              segment.display_name = "Entertainment but not sports"
              segment.criteria = {'and': [{'tag': 'entertainment'},
                                          {'not': {'tag': 'sports'}}]}
              response = segment.update(airship)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              segment.from_id(id: '00c0d899-a595-4c66-9071-bc59374bbe6b')

              segment.display_name = 'New Display Name'

              segment.criteria = { 'tag' => 'new_tag' }

              segment.update
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 65
              Content-Type: application/vnd.urbanairship+json;version=3

              {
                 "ok": true,
                 "operation_id": "1f93ca85-b8fd-4833-8d1a-6e2b7f4ceea9"
              }
        showMissingLanguagePlaceholders: true
  /api/sms/custom-response:
    post:
      - description: SMS Example
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/custom-response HTTP/1.1
              Authorization: Bearer <authorization token>
              X-UA-Appkey: <app key>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "sms" : {
                    "alert": "Your balance is $1234.56. Go to https://www.mybank.com/myaccount/my-balance?ua-tag-add=balance_prefs:sms to see more about your account.",
                    "shorten_links": true
                },
                "mobile_originated_id" : "28883743-4868-4083-ab5d-77ac4542531a"
              }
        showMissingLanguagePlaceholders: true
      - description: MMS Example
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/custom-response HTTP/1.1
              Authorization: Bearer <bearer token>
              X-UA-Appkey: <app key>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "mms" : {
                  "fallback_text": "See fun cat pics at https://example.com/cat/pics/12345678",
                  "slides": [
                    {
                      "media": {
                        "url": "https://example.com/cat/pics/12345678.gif",
                        "content_type": "image/gif",
                        "content_length": 23098
                      }
                    }
                  ],
                  "shorten_links": true
                },
                "mobile_originated_id" : "3e1e4fb3-2d3c-431e-96bf-9b235a12f84b"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                    "ok": true,
                    "operation_id": "f3d0993e-e3e1-4aae-b1c0-864a715bfaff",
                    "push_id": "7502abe6-e6ea-4f2b-906f-ebbab612c69e"
              }
  '/api/sms/{msisdn}/keywords':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/15035556789/keywords HTTP/1.1
              User-Agent: Apache-HttpAsyncClient/4.0.1 (java 1.5)
              Content-Type: application/json
              Authorization: Basic <user:pass>
              Connection: close

              {
                "keyword" : "stop",
                "sender_ids" : [ "US:54321", "1234"]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
      - description: Example Failure Response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 400 Bad Request
              Content-Type: application/json

              {
                "ok" : false,
                "error" : "The following sender(s) are not configured for the 'stop' keyword: ['US:1234']",
                "error_code" : 400
              }
  /api/templates:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/templates HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateListingRequest request =
              TemplateListingRequest.newRequest();

              Response<TemplateListingRequest> response =
              client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')

              for template in ua.TemplateList(airship):
                print (
                    template.template_id, template.created_at, template.modified_at,
                    template.last_used, template.name, template.description,
                    template.variables, template.push
                )
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: templates
              Count: 1
              Total-Count: 1
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "count": 1,
                  "total_count": 1,
                  "templates": [
                      {
                          "id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                          "created_at": "2020-08-17T11:10:01Z",
                          "modified_at": "2020-08-17T11:10:01Z",
                          "last_used": null,
                          "name": "Welcome Message",
                          "description": "Our welcome message",
                          "variables": [
                              {
                                  "key": "TITLE",
                                  "name": "Title",
                                  "description": "e.g. Mr, Ms, Dr, etc.",
                                  "default_value": ""
                              },
                              {
                                  "key": "FIRST_NAME",
                                  "name": "First Name",
                                  "description": "Given name",
                                  "default_value": null
                              },
                              {
                                  "key": "LAST_NAME",
                                  "name": "Last Name",
                                  "description": "Family name",
                                  "default_value": null
                              }
                          ],
                          "push": {
                              "notification": {
                                  "alert": "Hello {{FIRST_NAME}}, this is your welcome message!"
                              }
                          }
                      }
                  ],
                  "next_page": null,
                  "prev_page": null
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Welcome Message",
                  "description": "Our welcome message",
                  "variables": [
                      {
                          "key": "TITLE",
                          "name": "Title",
                          "description": "e.g. Mr, Ms, Dr, etc.",
                          "default_value": ""
                      },
                      {
                          "key": "FIRST_NAME",
                          "name": "First Name",
                          "description": "Given name",
                          "default_value": null
                      },
                      {
                          "key": "LAST_NAME",
                          "name": "Last Name",
                          "description": "Family name",
                          "default_value": null
                      }
                  ],
                  "push": {
                      "notification": {
                          "alert": "Hello {{FIRST_NAME}}, this is your welcome message!"
                      }
                  }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateVariable titleVariable = TemplateVariable.newBuilder()
                      .setKey("TITLE")
                      .setName("Title")
                      .setDescription("e.g. Mr, Ms, Dr, etc.")
                      .setDefaultValue("")
                      .build();

              TemplateVariable firstNameVariable = TemplateVariable.newBuilder()
                      .setKey("FIRST_NAME")
                      .setName("First Name")
                      .setDescription("Given name")
                      .setDefaultValue(null)
                      .build();

              TemplateVariable lastNameVariable = TemplateVariable.newBuilder()
                      .setKey("LAST_NAME")
                      .setName("Last Name")
                      .setDescription("Family name")
                      .setDefaultValue("")
                      .build();

              PartialPushPayload partialPushPayload =
              PartialPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("Hello {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!")
                              .build()
                      )
                      .build();

              TemplateRequest request = TemplateRequest.newRequest()
                      .setName("Welcome Message")
                      .setDescription("Our welcome message")
                      .addVariable(titleVariable)
                      .addVariable(firstNameVariable)
                      .addVariable(lastNameVariable)
                      .setPush(partialPushPayload);

              Response<TemplateResponse> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              new_template = ua.Template(airship)

              new_template.name = 'Welcome Message'

              new_template.description = 'Our welcome message'

              new_template.variables = [
                  {
                      'key': 'TITLE',
                      'name': 'Title',
                      'description': 'e.g. Mr., Ms., Dr., etc.',
                      'default_value': ''
                  },
                  {
                      'key': 'FIRST_NAME',
                      'name': 'First Name',
                      'description': 'Given name',
                      'default_value': None
                  },
                  {
                      'key': 'LAST_NAME',
                      'name': 'Last Name',
                      'description': 'Family name',
                      'default_value': None
                  }
              ]

              new_template.push = {
                  'notification': {
                      'alert': 'Hello {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!'
                  }
              }

              new_template.create()

              print (new_template.template_id)  # To get the template ID for
              future use
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                  "ok" : true,
                  "operation_id" : "9ce808c8-7176-45dc-b79e-44aa74249a5a",
                  "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161"
              }
        showMissingLanguagePlaceholders: true
  /api/templates/push:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "device_types": [ "ios" ],
                  "audience": {
                     "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881"
                  },
                  "merge_data": {
                      "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "substitutions": {
                          "FIRST_NAME": "Bob",
                          "LAST_NAME": "Smith",
                          "TITLE": ""
                      }
                  }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplatePushPayload payload = TemplatePushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("b8f9b663-0a3b-cf45-587a-be880946e881"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .setMergeData(TemplateSelector.newBuilder()
                              .setTemplateId("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                              .addSubstitution("FIRST_NAME", "Bob")
                              .addSubstitution("LAST_NAME", "Smith")
                              .addSubstitution("TITLE", "Mr.")
                              .build())
                      .build();

              TemplatePushRequest request = TemplatePushRequest.newRequest()
                      .addTemplatePushPayload(payload);

              Response<TemplateResponse> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              push = airship.create_template_push()

              push.audience =
              ua.ios_channel('b8f9b663-0a3b-cf45-587a-be880946e881')

              push.device_types = ua.device_types('ios')

              push.merge_data = ua.merge_data(
                  template_id='ef34a8d9-0ad7-491c-86b0-aea74da15161',
                  substitutions={
                      'FIRST_NAME': 'Bob',
                      'LAST_NAME': 'Smith',
                      'TITLE': ''
                  }
              )

              response = push.send()
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Length: 123
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "operation_id" : "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "1cbfbfa2-08d1-92c2-7119-f8f7f670f5f6"
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/templates/push/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/push/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "device_types": [ "ios" ],
                  "audience": {
                     "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881"
                  },
                  "merge_data": {
                      "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "substitutions": {
                          "FIRST_NAME": "Bob",
                          "LAST_NAME": "Smith",
                          "TITLE": ""
                      }
                  }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplatePushPayload payload = TemplatePushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("b8f9b663-0a3b-cf45-587a-be880946e881"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .setMergeData(TemplateSelector.newBuilder()
                              .setTemplateId("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                              .addSubstitution("FIRST_NAME", "Bob")
                              .addSubstitution("LAST_NAME", "Smith")
                              .addSubstitution("TITLE", "Mr.")
                              .build())
                      .build();

              TemplatePushRequest request = TemplatePushRequest.newRequest()
                      .addTemplatePushPayload(payload)
                      .setValidateOnly(true);

              Response<TemplateResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true
              }
        showMissingLanguagePlaceholders: true
  /api/templates/schedules:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                  {
                      "name": "Hello Bob",
                      "schedule": {
                         "scheduled_time": "2020-05-02T22:00:00Z"
                      },
                      "device_types": [ "ios" ],
                      "audience": {
                         "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881"
                      },
                      "merge_data": {
                          "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                          "substitutions": {
                              "FIRST_NAME": "Bob",
                              "LAST_NAME": "Takahashi",
                              "TITLE": null
                          }
                      }
                  },
                  {
                      "name": "Hello Joe",
                      "schedule": {
                         "scheduled_time": "2020-05-05T18:00:00Z"
                      },
                      "device_types": [ "android" ],
                      "audience": {
                         "android_channel": "df6a6b50-9843-0304-d5a5-743f246a4946"
                      },
                      "merge_data": {
                          "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                          "substitutions": {
                              "FIRST_NAME": "Joe",
                              "LAST_NAME": "Smith",
                              "TITLE": "Sir"
                          }
                      }
                  }
              ]
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateScheduledPushPayload payload =
              TemplateScheduledPushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("b8f9b663-0a3b-cf45-587a-be880946e881"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .setMergeData(TemplateSelector.newBuilder()
                              .setTemplateId("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                              .addSubstitution("FIRST_NAME", "Bob")
                              .addSubstitution("LAST_NAME", "Takahashi")
                              .addSubstitution("TITLE", "Dr.")
                              .build())
                      .setSchedule(Schedule.newBuilder()
                              .setScheduledTimestamp(DateTime.parse("2020-05-05T18:00:00Z"))
                              .build())
                      .build();

              TemplateScheduledPushRequest request =
              TemplateScheduledPushRequest.newRequest()
                                                        .addTemplateScheduledPushPayload(payload);
              Response<ScheduleResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Length: 123
              Data-Attribute: schedule_urls
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "operation_id" : "efb18e92-9a60-6689-45c2-82fedab36399",
                  "schedule_urls" : [
                      "http://go.urbanairship/api/schedules/a0cef4f9-1fcd-47ef-b459-01f432b64043",
                      "http://go.urbanairship/api/schedules/fe2dab5e-f837-4707-8d0c-0e8c589ef4cf"
                  ],
                  "schedule_ids" : [
                      "a0cef4f9-1fcd-47ef-b459-01f432b64043",
                      "fe2dab5e-f837-4707-8d0c-0e8c589ef4cf"
                  ],
                  "schedules" : [
                      {
                          "url" : "http://go.urbanairship/api/schedules/a0cef4f9-1fcd-47ef-b459-01f432b64043",
                          "name": "Hello Joe",
                          "schedule" : { "..." },
                          "push" : { "..." },
                          "push_ids": [ "6a5ecb9c-46ee-4af4-9ced-9308121afaf9" ]
                      },
                      {
                          "url" : "http://go.urbanairship/api/schedules/fe2dab5e-f837-4707-8d0c-0e8c589ef4cf",
                          "name": "Hello Bob",
                          "schedule" : { "..." },
                          "push" : { "..." },
                          "push_ids": [ "5162bbf8-7de7-4040-a64d-e018b71f02f6" ]
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/templates/{template_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE /api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateDeleteRequest request =
              TemplateDeleteRequest.newRequest("ef34a8d9-0ad7-491c-86b0-aea74da15161");

              Response<TemplateResponse> response = client.execute(request);
          - lang: python
            source: >
              import urbanairship as ua


              airship = ua.Airship('<app key>', '<master secret>')

              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'


              # Delete via template lookup

              response = ua.Template(airship).lookup(template_id).delete()


              # OR, if you want to delete a template without fetching it from
              the API

              response = ua.Template(airship).delete(template_id)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "a6394ff8-8a65-4494-ad06-677eb8b7ad6a"
              }
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateListingRequest request =
              TemplateListingRequest.newRequest("ef34a8d9-0ad7-491c-86b0-aea74da15161");

              Response<TemplateListingResponse> response =
              client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'
              template = ua.Template(airship).lookup(template_id)
              print (
                  template.template_id, template.created_at, template.modified_at,
                  template.last_used, template.name, template.description,
                  template.variables, template.push
              )
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: template
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "template": {
                      "id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "created_at": "2020-08-17T11:10:02Z",
                      "modified_at": "2020-08-17T11:10:02Z",
                      "last_used": null,
                      "name": "Welcome Message",
                      "description": "Our welcome message",
                      "variables": [
                          {
                              "key": "TITLE",
                              "name": "Title",
                              "description": "e.g. Mr, Ms, Dr, etc.",
                              "default_value": ""
                          },
                          {
                              "key": "FIRST_NAME",
                              "name": "First Name",
                              "description": "Given name",
                              "default_value": null
                          },
                          {
                              "key": "LAST_NAME",
                              "name": "Last Name",
                              "description": "Family name",
                              "default_value": null
                          }
                      ],
                      "push": {
                          "notification": {
                              "alert": "Hello {{FIRST_NAME}}, this is your welcome message!"
                          }
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Welcome Message",
                  "description": "Our welcome message",
                  "push": {
                      "notification": {
                          "alert": "Hello {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!"
                      }
                  }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PartialPushPayload partialPushPayload =
              PartialPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("Hello {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!")
                              .build()
                      )
                      .build();

              TemplateRequest request =
              TemplateRequest.newRequest("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                      .setName("Welcome Message")
                      .setDescription("Our welcome message")
                      .setPush(partialPushPayload);

              Response<TemplateResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946"
              }
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'
              updated_template = ua.Template(airship)
              updated_template.push = {
                  'notification': {
                      'alert': 'Hi {{FIRST_NAME}} {{LAST_NAME}}!'
                  }
              }
              response = updated_template.update(template_id)
        showMissingLanguagePlaceholders: true
      - description: 'Alternatively, call the lookup function on your updated template:'
        examples:
          - lang: python
            source: |
              import urbanairship as ua

              airship = ua.Airship('<app key>', '<master secret>')
              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'
              updated_template = ua.Template(airship).lookup(template_id)
              updated_template.push = {
                  'notification': {
                      'alert': 'Greetings {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}!'
                  }
              }
              response = updated_template.update()
  '/api/user/messages/{push_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/user/messages/(push_id) HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

               InboxDeleteRequest request = InboxDeleteRequest.newRequest("68b2d71f-1c10-4592-bd96-2725aee0ae57");
               Response<String> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
