components:
  schemas:
    absoluteWindow:
      - description: Example absolute time window
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "date": {
                       "days": {
                          "start": "2020-01-01",
                          "end": "2020-01-15"
                       }
                    }
                 }
              }
    actionsObject:
      - description: Example tag actions
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "add_tag": [
                       "airship",
                       "blimp"
                    ],
                    "remove_tag": [
                       "boat",
                       "car"
                    ],
                    "share": "Check out Airship!",
                    "open": {
                       "type": "url",
                       "content": "http://www.urbanairship.com"
                    },
                    "app_defined": {
                       "some_app_defined_action": "some_value"
                    }
                 }
              }
      - description: Example landing page action
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "open": {
                       "type": "landing_page",
                       "content": {
                          "body": "<html>content</html>",
                          "content_type": "text/html",
                          "content_encoding": "utf-8"
                       },
                       "fallback_url" : "https://www.urbanairship.com/settings"
                    }
                 }
              }
      - description: Example open phone app
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "open": {
                       "type": "url",
                       "content": "tel:15035551234"
                    }
                 }
              }
      - description: Example deep link action
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "open": {
                       "type": "deep_link",
                       "content": "prefs",
                       "fallback_url": "https://www.urbanairship.com/settings"
                    }
                 }
              }
      - description: Example Subscription List action
        examples:
          - lang: json
            source: |
              {
                 "actions": {
                    "subscription_list": [
                       {
                          "action": "subscribe",
                          "type": "contact",
                          "list_id": "cool_deals",
                          "scope": "app"
                       }
                    ]
                 }
              }
    activityObject:
      - description: Activity audience object
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "activity": "app_open",
                    "operator": "greater",
                    "value": 2,
                    "after": 3,
                    "precision": "days",
                    "where": {
                       "property": "/_triggering_push/campaigns/categories",
                       "operator": "equals",
                       "value": "neowise"
                    }
                 }
              }
    alertItem:
      - description: Example preference form alert item
        examples:
          - lang: json
            source: |
              {
                "type": "alert",
                "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                "display": {
                  "icon": "https://example.com/cool_icon.png",
                  "name": "Turn on notifications",
                  "description": "You're not opted into notifications. Don't miss out!"
                },
                "conditions": [
                  {
                    "type": "notification_opt_in",
                    "when_status": "opt_out"
                  }
                ],
                "button": {
                  "text": "Opt-in",
                  "content_description": "Enable notifications on this device",
                  "actions": {
                    "enable_feature": "user_notifications"
                  }
                }
              }
    amazonOverrideWithTemplate:
      - description: Fire OS override with a template
        examples:
          - lang: json
            source: |
              {
                 "amazon": {
                    "title": "Shoe sale on {{level}} floor!",
                    "alert": "All the shoes are on sale {{name}}!",
                    "summary": "Don't miss out!",
                    "icon": "shoes",
                    "icon_color": "{{iconColor}}"
                 }
              }
      - description: Fire OS override with a template_id
        examples:
          - lang: json
            source: |
              {
                 "amazon": {
                     "template": {
                         "template_id": "608f1f6c-8860-c617-a803-b187b491568e"
                     }
                 }
              }
    androidOverrideObject:
      - description: Android override in a notification
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "title": "Shoe sale",
                    "alert": "All the shoes are on sale!",
                    "summary": "Don't miss out!",
                    "extra": {
                        "url": "http://example.com",
                        "story_id": "1234",
                        "moar": "{\"key\": \"value\"}"
                    },
                    "icon": "shoes",
                    "icon_color": "#8B4513",
                    "notification_channel": "promos"
                 }
               }
      - description: Example wearable notification
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "local_only": true,
                    "wearable": {
                       "background_image": "http://example.com/background.png",
                       "extra_pages": [
                          {
                             "title": "Page 1 title - optional title",
                             "alert": "Page 1 title - optional alert"
                          },
                          {
                             "title": "Page 2 title - optional title",
                             "alert": "Page 2 title - optional alert"
                          }
                       ],
                       "interactive": {
                          "type": "ua_yes_no_foreground",
                          "button_actions": {
                             "yes": {
                                "add_tag": "butter",
                                "remove_tag": "cake",
                                "open": {
                                   "type": "url",
                                   "content": "http://www.urbanairship.com"
                                }
                             },
                             "no": {
                                "add_tag": "nope"
                             }
                          }
                       }
                    }
                 }
              }
      - description: Android override in a notification with notification_tag
        examples:
          - lang: json
            source: |
              {
                 "android": {
                     "notification_tag": "push-xyz"
                 }
               }
    androidOverrideWithTemplate:
      - description: Android override with a template
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "title": "Shoe sale on {{level}} floor!",
                    "alert": "All the shoes are on sale {{name}}!",
                    "summary": "Don't miss out!",
                    "icon": "shoes",
                    "icon_color": "{{iconColor}}",
                    "extra": {
                          "url": "http://example.com",
                          "story_id": "1234",
                          "moar": "{\"key\": \"value\"}"
                    },
                    "notification_channel": "promos"
                 }
              }
      - description: Android override with a template_id
        examples:
          - lang: json
            source: |
              {
                 "android": {
                    "template": {
                          "template_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    },
                    "extra": {
                          "url": "http://example.com",
                          "story_id": "1234",
                          "moar": "{\"key\": \"value\"}"
                    },
                    "notification_channel": "promos"
                 }
              }
    atomicSelector:
      - description: Example audience selection by tag
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "tag": "sfGiants",
                    "group": "favorite_teams"
                 }
              }
      - description: Example SMS channel audience
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "sms_id" :  {
                          "sender" : "12345",
                          "msisdn" : "15552243311"
                      }
                  }
              }
      - description: Example audience segment
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "segment" : "<segment-id>"
                  }
              }
      - description: Example audience of Named Users
        examples:
          - lang: json
            source: |
              {
                 "audience" : {
                    "named_user" : "user-id-54320"
                 }
              }
      - description: Example audience of static list
        examples:
          - lang: json
            source: |
              {
                 "audience" : {
                    "static_list" : "name_of_list"
                 }
              }
    attributes:
      - description: Example Attributes object
        examples:
          - lang: json
            source: |
              {
                 "device_attributes": {
                    "ua_device_os": "10",
                    "ua_country": "US",
                    "ua_device_model": "SM-G973U",
                    "ua_local_tz": "America/Los_Angeles",
                    "ua_app_version": "2020-02-01T002322-goat",
                    "ua_location_settings": "true",
                    "ua_language": "en",
                    "ua_sdk_version": "13.1.0",
                    "ua_carrier": "Verizon "
                 },
                 "attributes": {
                    "first_name": "Cool",
                    "last_name": "Person",
                    "birthdate": "1983-03-15T00:00:00",
                 }
              }
    attributesObject:
      - description: Attributes assignment
        examples:
          - lang: json
            source: |
              {
                "attributes": [
                  {
                    "action": "remove",
                    "key": "minor_league"
                  },
                  {
                    "action": "set",
                    "key": "position",
                    "value": "LF"
                  }
                ]
              }
    audienceLimitsObject:
      - description: Audience limits
        examples:
          - lang: json
            source: |
              {
                "options": {
                  "audience_limits": {
                    "max_recipients": 1000
                  }
                }
              }
    banListParametersObject:
      - description: Ban List parameters
        examples:
          - lang: json
            source: |
              {
                "ban_list_parameters": {
                  "category": "api-cat"
                }
              }
    batchUpdateChannelRequestBody:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "tags": {
                    "add": {
                       "group1": ["tag1"],
                       "group2": ["tag3"]
                    },
                    "set": {
                       "group2": ["tag4"]
                    }
                 },
                 "attributes": [
                    {
                       "action": "remove",
                       "key": "minor_league"
                    },
                    {
                       "action": "set",
                       "key": "position",
                       "value": "LF"
                    }
                 ],
                 "subscription_lists": [
                    {
                       "action": "subscribe",
                       "list_id": "intriguing_ideas"
                    },
                    {
                       "action": "unsubscribe",
                       "list_id": "animal_facts"
                    }
                 ]
              }
    billableChannelObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                  "device_type": "ios",
                  "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                  "last_registration": "2023-08-01T18:00:27",
                  "uninstalled": "2022-08-01T19:00:27"
              }
    billingCountObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                "device_type": "ios",
                "count": 1234,
                "last_updated": "2023-10-01T18:00:27"
              }
    bulkSendObject:
      - description: Bulk send object
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                  },
                  "device_types" : [ "open::rcs" ],
                  "notification" : {
                      "alert" : "Welcome to the winter sale!!"
                  },
                  "campaigns": {
                      "categories": ["winter sale", "west coast"]
                  }
              }            
    campaignsObject:
      - description: Example campaigns in a push payload
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "notification": {
                    "alert": "Taco Kitten wins Kentucky Derby by a whisker"
                 },
                 "campaigns": {
                    "categories": [
                       "kittens",
                       "tacos",
                       "horse_racing"
                    ]
                 },
                 "device_types": [ "ios", "android" ]
              }
    channelContactOperationIdentifyActionObject:
      - description: Example identify contact operation
        examples:
          - lang: json
            source: |
              {
                "device_info": {
                  "device_type": "android"
                },
                "action": {
                  "type": "identify",
                  "named_user_id": "my-named-user",
                  "contact_id": "a29ce8c7-4a63-37cb-9716-dffd3d419c4a"
                }
              }
    channelContactOperationResetActionObject:
      - description: Example reset contact operation
        examples:
          - lang: json
            source: |
              {
                "device_info": {
                  "device_type": "android"
                },
                "action": {
                  "type": "reset"
                }
              }
    channelContactOperationResolveActionObject:
      - description: Example resolve contact operation
        examples:
          - lang: json
            source: |
              {
                "device_info": {
                  "device_type": "ios"
                },
                "action": {
                  "type": "resolve"
                }
              }
    channelListingObject:
      - description: Example iOS channel
        examples:
          - lang: json
            source: |
              {
                 "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                 "device_type": "ios",
                 "installed": true,
                 "background": true,
                 "opt_in": false,
                 "push_address": "FE66489F304DC75B8D6E8200DFF8A456E8DAEACEC428B427E9518741C92C6660",
                 "created": "2020-08-08T20:41:06",
                 "last_registration": "2020-05-01T18:00:27",
                 "named_user_id": "some_id_that_maps_to_your_systems",
                 "alias": null,
                 "tags": [
                    "tag1",
                    "tag2"
                 ],

                 "tag_groups": {
                    "sports fan": ["Federer fan", "Messi fan"],
                    "music fan": [ "Beyonce", "Muse" ],
                    "ua_locale_country": [ "US" ],
                    "ua_locale_language": [ "en" ]
                 },

                 "ios": {
                    "badge": 0,
                    "quiettime": {
                       "start": null,
                       "end": null
                    },
                    "tz": "America/Los_Angeles"
                 }
              }
    channelRequestBody:
      - description: Example
        examples:
          - lang: json
            source: |
              {  "channel" : {
                    "device_type": "ios",
                    "opt_in": true,
                    "background": true,
                    "push_address": "FFFF",
                    "set_tags": true,
                    "tags": ["asdf"],
                    "ios": { "badge": 0,
                             "quiettime": { "start": "22:00", "end": "06:00" },
                             "tz": "America/Los_Angeles" } },
                 "identity_hints": {
                    "user_id": "eDAXv7aQTQaAaUHOXuePLQ",
                    "apid": "df6a6b50-9843-0304-d5a5-743f246a4946" } }
    channelSubscriptionItem:
      - description: Example preference form channel subscription item
        examples:
          - lang: json
            source: |
              {
                "type": "channel_subscription",
                "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                "display": {
                  "description": "Be the first to know about what's on sale each week.",
                  "name": "Weekly Special"
                },
                "subscription_id": "weekly_special"
              }
    complexEventSelector:
      - description: Compound event selector using 'and'
        examples:
          - lang: json
            source: |
              {
                 "and": [
                    {
                       "key": "name",
                       "value": {
                          "equals": "POWER_LEVEL"
                       }
                    },
                    {
                       "key": "value",
                       "value": {
                          "greater_than": 9000,
                          "at_most": 10000
                       }
                    }
                 ]
              }
    compoundSelector:
      - description: Example with implicit `OR`
        examples:
          - lang: json
            source: |
              {
                 "audience" : {
                    "tag" : ["apples", "oranges", "bananas"]
                 }
              }
      - description: Example with nested selectors
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "AND": [
                       {"OR": [
                          {"tag": "sports"},
                          {"tag": "entertainment"}
                       ]},
                       {"tag": "language_en"}
                    ]
                 }
              }
      - description: Example `NOT` selector
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "AND": [
                       { "tag": "Federer fan" },
                       { "NOT":
                          { "tag": "Messi fan" }
                       }
                    ]
                 }
              }
    contactManagementItem:
      - description: Example preference form contact management item (SMS)
        examples:
          - lang: json
            source: "{\n  \"type\": \"contact_management\",\n  \"platform\": \"sms\",\n  \"id\": \"efe3e322-33c7-4157-b765-046b9cd2647a\",\n  \"display\": {\n    \"name\": \"SMS\",\n    \"description\": \"Sign up for special promotions via text messaging\"\n  },\n  \"registration_options\": {\n    \"resend\": {\n      \"interval\": 120,\n      \"message\": \"Not yet verified\",\n      \"button\": {\n        \"text\": \"Resend\"\n      },\n      \"on_success\": {\n        \"name\": \"Verification resent\",\n        \"description\": \"Check your phone for a new verification text.\",\n        \"button\": {\n          \"text\": \"OK\"\n        }\n      }\n    },\n    \"error_messages\": {\n      \"invalid\": \"Please enter a valid phone number.\",\n      \"default\": \"Something went wrong, please try again.\"\n    },\n    \"country_label\": \"Country\",\n    \"msisdn_label\": \"Phone number\",\n    \"senders\": [\n      {\n        \"sender_id\": \"87503\",\n        \"placeholder_text\": \"XXX-XXX-XXXX\",\n        \"country_code\": \"US\",\n        \"country_calling_code\": \"1\",\n        \"display_name\": \"\U0001F1FA\U0001F1F8 +1\"\n      }\n    ]\n  },\n  \"empty_message\": \"Add your first phone number now!\",\n  \"add\": {\n    \"button\": {\n      \"text\": \"Add\",\n      \"content_description\": \"Add a phone number\"\n    },\n    \"view\": {\n      \"type\": \"prompt\",\n      \"display\": {\n        \"title\": \"Sign up\",\n        \"description\": \"Enter your number to sign up for sweet deals\",\n        \"footer\": \"By submitting, you agree to our [Terms and Conditions](https://example.com).\"\n      },\n      \"submit_button\": {\n        \"text\": \"Submit\"\n      },\n      \"cancel_button\": {\n        \"text\": \"Cancel\"\n      },\n      \"close_button\": {\n        \"content_description\": \"Close\"\n      },\n      \"on_submit\": {\n        \"name\": \"Success!\",\n        \"description\": \"Check your phone for a verification text.\",\n        \"button\": {\n          \"text\": \"OK\"\n        }\n      }\n    }\n  },\n  \"remove\": {\n    \"button\": {\n      \"content_description\": \"Remove phone number\"\n    },\n    \"view\": {\n      \"type\": \"prompt\",\n      \"display\": {\n        \"title\": \"Are you sure?\",\n        \"description\": \"You'll no longer receive texts.\",\n      },\n      \"submit_button\": {\n        \"text\": \"Yes, very sure\"\n      },\n      \"cancel_button\": {\n        \"text\": \"No wait\"\n      },\n      \"close_button\": {\n        \"content_description\": \"Close\"\n      },\n      \"on_submit\": {\n        \"name\": \"Sorry to see you go!\",\n        \"description\": \"You've been opted out.\",\n        \"button\": {\n          \"text\": \"OK\"\n        }\n      }\n    }\n  },\n}\n"
      - description: Example preference form contact management item (Email)
        examples:
          - lang: json
            source: |
              {
                "type": "contact_management",
                "platform": "email",
                "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                "display": {
                  "name": "Email",
                  "description": "Sign up for special promotions via email"
                },
                "registration_options": {
                  "resend": {
                    "interval": 120,
                    "message": "Not yet verified",
                    "button": {
                      "text": "Resend"
                    },
                    "on_success": {
                      "name": "Verification resent",
                      "description": "Check your inbox for a new verification message.",
                      "button": {
                        "text": "OK"
                      }
                    }
                  },
                  "error_messages": {
                    "invalid": "Please enter a valid email address.",
                    "default": "Something went wrong, please try again."
                  },
                  "address_label": "Email address",
                  "placeholder": "coolguy@example.com",
                  "properties": {
                    "source": "Cool Preference Center"
                  }
                },
                "empty_message": "No emails yet!",
                "add": {
                  "button": {
                    "text": "Add",
                    "content_description": "Add an email address"
                  },
                  "view": {
                    "type": "prompt",
                    "display": {
                      "title": "Sign up",
                      "description": "Enter your email to sign up for sweet deals",
                      "footer": "By submitting, you agree to our [Terms and Conditions](https://example.com)."
                    },
                    "submit_button": {
                      "text": "Submit"
                    },
                    "cancel_button": {
                      "text": "Cancel"
                    },
                    "close_button": {
                      "content_description": "Close"
                    },
                    "on_submit": {
                      "name": "Success!",
                      "description": "Check your inbox for a verification message.",
                      "button": {
                        "text": "OK"
                      }
                    }
                  }
                },
                "remove": {
                  "button": {
                    "content_description": "Remove email"
                  },
                  "view": {
                    "type": "prompt",
                    "display": {
                      "title": "Are you sure?",
                      "description": "You'll no longer receive emails."
                    },
                    "submit_button": {
                      "text": "Yes, very sure"
                    },
                    "cancel_button": {
                      "text": "No wait"
                    },
                    "close_button": {
                      "content_description": "Close"
                    },
                    "on_submit": {
                      "name": "Sorry to see you go!",
                      "description": "You've been opted out.",
                      "button": {
                        "text": "OK"
                      }
                    }
                  }
                },
              }
    contactSubscriptionGroupItem:
      - description: Example preference form contact subscription group item
        examples:
          - lang: json
            source: |
              {
                "type": "contact_subscription_group",
                "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                "display": {
                  "description": "Be the first to know about what's on sale each week.",
                  "name": "Weekly Special"
                },
                "subscription_id": "weekly_special",
                "components": [
                  {
                    "scopes": ["app"],
                    "display": {
                      "name": "App"
                    }
                  },
                  {
                    "scopes": ["email"],
                    "display": {
                      "name": "Email"
                    }
                  }
                ]
              }
    contactSubscriptionItem:
      - description: Example preference form contact subscription item
        examples:
          - lang: json
            source: |
              {
                "type": "contact_subscription",
                "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                "display": {
                  "description": "Be the first to know about what's on sale each week.",
                  "name": "Weekly Special"
                },
                "subscription_id": "weekly_special",
                "scopes": ["app"]
              }
    contactSubscriptionListObject:
      - description: Example contact Subscription Lists object
        examples:
          - lang: json
            source: |
              {
                 "list_ids": ["example_listId-2", "example_listId-4"],
                 "scope": "app"
              }
    contactsScopedBatchItem:
      - description: Example contacts scoped batch item
        examples:
          - lang: json
            source: |
              {
                 "scope": ["web", "email", "app"],
                 "subscription_lists": {
                    "subscribe": ["subscription_1", "subscription_2"],
                    "unsubscribe": ["subscription_3"]
                 }
              }
    customEventObject:
      - description: Example Custom Event
        examples:
          - lang: json
            source: |
              {
                 "occurred": "2020-05-02T02:31:22",
                 "user": {
                     "named_user_id": "cool.person"
                 },
                 "body": {
                     "name": "purchased",
                     "value": 239.85,
                     "transaction": "686f53d4-7e0s-36d7-234e-c9792dac6e7b",
                     "interaction_id": "your.store/us/en_us/pd/shoe/pid-123456/pgid-123456",
                     "interaction_type": "email",
                     "unique_id": "4c2c380a-0400-4d34-ab04-aaf31f0967c7",
                     "properties": {
                        "description": "sky high",
                        "brand": "victory",
                        "colors": [
                        "red",
                        "blue"
                        ],
                        "items": [
                        {
                           "text": "New Line Sneakers",
                           "price": "$ 79.95"
                        },
                        {
                           "text": "Old Line Sneakers",
                           "price": "$ 79.95"
                        },
                        {
                           "text": "Blue Line Sneakers",
                           "price": "$ 79.95"
                        }
                        ],
                        "name": "Cool Person",
                        "userLocation": {
                        "state": "CO",
                        "zip": "80202"
                        }
                     },
                    "session_id": "22404b07-3f8f-4e42-a4ff-a996c18fa9f1"
                 }
              }
    dateAttribute:
      - description: Date Attribute example
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "birth_date",
                    "operator": "equals",
                    "precision": "month_day",
                    "value": "05-04"
                 }
              }
      - description: Add four days to the current date
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "day_of_travel",
                    "operator": "equals",
                    "value": "4",
                    "precision": "days",
                    "relative_to": "future"
                 }
              }
      - description: Compound selector using before and after date operators
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "AND": [
                          {
                             "attribute": "birth_date",
                             "operator": "after",
                             "value": 55,
                             "precision": "years"
                          },
                          {
                             "attribute": "birth_date",
                             "operator": "before",
                             "value": 40,
                             "precision": "years"
                          }
                    ]
                 },
                 "device_types": [
                    "android"
                 ],
                 "notification": {
                    "alert": "Hello, Generation X!"
                 }
              }
      - description: Audience who purchased jeans
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "item_purchased",
                    "operator": "contains",
                    "value": "jeans"
                 }
              }
      - description: Audience who did not purchase jeans
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "NOT":{
                       "attribute": "item_purchased",
                       "operator": "contains",
                       "value": "jeans"
                    }
                 }
              }
      - description: Audience who did not make any purchase
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "item_purchased",
                    "operator": "is_empty",
                 }
              }
      - description: Integer value range
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "AND":[
                       {
                          "attribute": "size",
                          "operator": "greater",
                          "value":12
                       },
                       {
                          "attribute": "size",
                          "operator": "less",
                          "value": 15
                       }
                    ]
                 }
              }
    email:
      - description: Example object
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@example.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22"
                    },
                    {
                      "ua_address" : "ben@example.com",
                      "ua_commercial_opted_out": "2020-11-29T12:45:10"
                    },
                    {
                      "ua_address" : "mary@example.com",
                      "ua_email_suppression_state": "BOUNCE"
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "subject": "Welcome to the Winter Sale! ",
                    "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                    "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                    "message_type": "transactional",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "click_tracking": false,
                    "open_tracking": false,
                    "attachments": [
                      {
                        "id": "0e10a6b9-725c-4f6b-9af2-9ef5b31328c0",
                      },
                      {
                        "id": "5503b5fe-ed69-4609-bef6-6fef0e6e428f"
                      }
                    ]
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
    emailChannelAssociatedByContactObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                "type": "email",
                "channel_id": "463c4643-a16c-48da-9585-f2c5406f828b",
                "email_address": "d*******r@example.com",
                "commercial_opted_in": "2024-02-11T00:00:00"
              }
    emailOverrideObject:
      - description: Example with email notification
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "named_user": "jane_doe"
                 },
                 "device_types": [
                    "email",
                    "android"
                 ],
                 "notification": {
                    "android": {
                       "alert": "Hello Android user!"
                    },
                    "email": {
                       "subject": "Did you get that thing I sent you?",
                       "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                       "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                       "message_type": "transactional",
                       "sender_name": "Airship",
                       "sender_address": "team@urbanairship.com",
                       "reply_to": "no-reply@urbanairship.com",
                       "click_tracking": false,
                       "open_tracking": false,
                       "attachments": [
                          {
                             "id": "0e10a6b9-725c-4f6b-9af2-9ef5b31328c0",
                          },
                          {
                             "id": "5503b5fe-ed69-4609-bef6-6fef0e6e428f"
                          }
                       ],
                       "url_parameters": {
                         "utm_source": "airship",
                         "utm_channel": "email"
                       }
                    }
                 }
              }
      - description: >-
          Example email with dynamic sender name, sender address, and reply-to
          address
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "named_user": "jane_doe"
                 },
                 "device_types": [
                    "email"
                 ],
                 "notification": {
                    "email": {
                       "subject": "Did you get that thing I sent you?",
                       "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                       "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                       "message_type": "transactional",
                       "sender_name": "{{email_sender_name}}",
                       "sender_address": "{{email_sender_username}}@airship.com",
                       "reply_to": "{{email_reply_to_username}}@airship.com",
                    }
                 }
              }               
    emailOverrideWithTemplate:
      - description: Example with inline template
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@example.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "template": {
                      "fields": {
                        "subject": "Hi {{customer.first_name}}, your products are ready!",
                        "plaintext_body": "Hi {{customer.first_name}},/n Your order is ready for pickup at our {{customer.location}} store!/n Your order:/n {{#each cart}}{{this.qty}}x {{this.name}}/n{{/each}} Thanks,/n Your local AwesomeStore."
                      }
                    },
                    "url_parameters": {
                      "utm_source": "airship",
                      "utm_channel": "email"
                    }
                  }
                }
              }
      - description: Example with template_id
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@example.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "template": {
                      "template_id": "9335bb2a-2a45-456c-8b53-42af7898236a"
                    },
                    "url_parameters": {
                      "utm_source": "airship",
                      "utm_channel": "email"
                    }
                  }
                }
              }
    error:
      - description: 400 response
        examples:
          - lang: json
            source: |
              {
                "ok" : false,
                "error" : "Could not parse request body.",
                "error_code" : 40000,
                "details" : {
                    "error" : "The key 'alert1' is not allowed in this context",
                    "path" : "notification.alert1",
                    "location" : {
                        "line" : 5,
                        "column" : 18
                    }
                }
      - description: 400 response without location
        examples:
          - lang: json
            source: |
              {
                  "ok": false,
                  "error": "Could not parse request body.",
                  "error_code": 40902,
                  "details": {
                      "error": "malformed sender"
                  }
              }
      - description: 404 response
        examples:
          - lang: json
            source: |
              {
                  "ok": false,
                  "error": "Entity not found",
                  "error_code": 40401
              }
    eventIdentifier:
      - description: Simple `open` event identifier
        examples:
          - lang: json
            source: |
              {
                "event": "open"
              }
      - description: Tag added example
        examples:
          - lang: json
            source: |
              {
                "tag_added": "cool_user"
              }
      - description: Custom Event example
        examples:
          - lang: json
            source: |
              {
                "custom_event": {
                  "key": "name",
                  "value": {
                    "equals": "christmas"
                  }
                }
              }
    experimentObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "name": "<experiment name>",
                 "description": "<experiment description>",
                 "control": "<control group>",
                 "audience": "<audience-selection>",
                 "device_types": "<device-types>",
                 "campaigns": "<campaigns>",
                 "variants": "[<variant specifications>]",
                 "id": "<id>",
                 "created_at": "timestamp",
                 "push_id": "<push_id>"
              }
    feedReferences:
      - description: Example push external data feeds request
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "device_types": ["ios"],
                  "audience": { "tag": "earlyBirds" },
                  "notification": {
                     "alert": "{{#feed \"featured_product\"}}Hello, {{user}}, could I interest you in {{product_name}} today?{{/feed}}"
                  },
                  "options": {
                     "personalization": true
                  },
                  "feed_references": {
                     "feeds": [
                        {
                           "name": "featured_product"
                        }
                     ],
                     "defaults": {
                        "featured_product": {
                           "category": "featured"
                        }
                     }
                  }
               }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3
              Content-Length: 123
              Data-Attribute: push_ids

              {
                  "ok": true,
                  "operation_id": "5e7852b0-6909-4e60-a73f-4d6b92d94c80",
                  "push_ids": [
                     "bf28d158-fefe-475a-9c2a-ed4f69cc891e"
                  ]
              }   
        showMissingLanguagePlaceholders: true
      - description: Example feed references object
        examples:
          - lang: json
            source: |
              {
                 "feed_references": {
                    "feeds": [
                       {
                          "name": "featured_product",
                          "params": {
                             "sub_category": "shoes"
                          },
                          "on_error": "continue"
                       }
                    ],
                    "defaults": {
                       "featured_product": {
                          "category": "featured"
                       }
                    }
                 }
              }
    frequencyLimitsObject:
      - description: Frequency limits
        examples:
          - lang: json
            source: |
              {
                "options": {
                  "audience_limits": {
                    "max_recipients": 1000,
                    "targeting_type": "contact",
                    "frequency_limits": [
                      {
                        "id": "4cde02bb-5b8e-45b2-a76f-29c153750885",
                        "boundary": 100000,
                        "period": "days",
                        "range": 30
                      }
                    ]
                  }
                }
              }
    geofenceObject:
      - description: Polygon Geofence
        examples:
          - lang: json
            source: |
              {
                  "type": "POLYGON",
                  "points": [
                      {
                          "latitude": 1.000,
                          "longitude": 90
                      },
                      {
                          "latitude": 2.000,
                          "longitude": 90
                      },
                      {
                          "latitude": 3.000,
                          "longitude": 0
                      }
                  ]
              }
      - description: Circle Geofence
        examples:
          - lang: json
            source: |
              {
                  "type": "CIRCLE",
                  "center": {
                      "latitude": 0,
                      "longitude": 0
                  },
                  "radius": 1000
              }
      - description: Confidential Geofence
        examples:
          - lang: json
            source: |
              {
                  "type": "CONFIDENTIAL",
                  "source": "Maponics",
                  "version": "1.0.17-BETA",
                  "id": "TheLouvreMuseumFloodZoneParis"
              }
    inAppObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "device_types": [ "ios", "android" ],
                 "notification": { "alert": "This part appears on the lockscreen" },
                 "in_app": {
                    "alert": "This part appears in-app!",
                    "display_type": "banner",
                    "expiry": "2020-04-01T12:00:00",
                    "display": {
                       "position": "top"
                    },
                    "actions": {
                       "add_tag": "in-app"
                    }
                 }
              }
    inactivityConditions:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                  "name" : "Pipeline with Inactivity Conditions",
                  "enabled" : true,
                  "immediate_trigger" : "/* ... */",
                  "outcome" : "/* ... */",
                  "condition": [
                      {
                          "and" : [
                              {
                                  "inactivity": {
                                      "type": "since_triggered"
                                  }
                              }
                          ]
                      }
                  ],
                  "timing": {
                      "delay": { "seconds" : 259200 }
                  }
              }
    interactiveObject:
      - description: Example with `type` actions
        examples:
          - lang: json
            source: |
              {
                 "interactive": {
                    "type": "ua_yes_no_foreground",
                    "button_actions": {
                       "yes": {
                          "add_tag": "more_cake_please",
                          "remove_tag": "lollipop",
                          "open": {
                             "type": "url",
                             "content": "http://www.urbanairship.com"
                          }
                       },
                       "no": {
                          "add_tag": "nope"
                       }
                    }
                 }
              }
      - description: Example with `ua_share` actions
        examples:
          - lang: json
            source: |
              {
                 "interactive": {
                    "type": "ua_share",
                    "button_actions": {
                       "share": { "share": "Look at me! I'm on a boat." }
                    }
                 }
              }
    iosOverrideObject:
      - description: Example with media attachment
        examples:
          - lang: json
            source: |
              {
                  "audience": "all",
                  "device_types": [
                          "ios"
                      ],
                  "notification": {
                      "ios": {
                          "thread_id": "sfGiants_news",
                          "alert": {
                              "title": "Kevin Gausman Throws a Perfect Game",
                              "body": "Kevin Gausman stymies the Houston Astros for San Francisco's second perfect game in franchise history.",
                              "summary-arg": "San Francisco Giants",
                              "summary-arg-count": 1
                          },
                          "relevance-score": 1.0,
                          "interruption_level": "passive",
                          "sound": "strike-call",
                          "media_attachment": {
                              "content": {
                                  "title": "Kevin Gausman",
                                  "body": "Gausman strikes out Justin Turner"
                              },
                              "options": {
                                  "crop": {
                                      "height": 0.5,
                                      "width": 0.5,
                                      "x": 0.25,
                                      "y": 0.25
                                  },
                                  "time": 15
                              },
                              "url": "https://media.example.com/media/6nJmrhlu4aL1m/giphy.gif"
                          },
                          "mutable_content": 1
                      }
                  }
              }
      - description: iOS override in a notification with collapse_id
        examples:
          - lang: json
            source: |
              {
                 "ios": {
                     "collapse_id": "push-xyz"
                 }
               }
    iosOverrideWithTemplate:
      - description: iOS override with a template
        examples:
          - lang: json
            source: |
              {
                 "ios": {
                    "thread_id": "sfGiants_news",
                    "title": "{{NAME}} Throws a Perfect Game",
                    "body": "{{NAME}} stymies the {{OTHER_TEAM}} for San Francisco's first perfect game in franchise history.",
                    "subtitle": "San Francisco Giants {{DATE}}",
                    "sound": "strike-call",
                    "media_attachment": {
                       "content": {
                          "title": "Kevin Gausman",
                          "body": "Gausman strikes out Justin Turner"
                       },
                       "options": {
                          "crop": {
                             "height": 0.5,
                             "width": 0.5,
                             "x": 0.25,
                             "y": 0.25
                          },
                          "time": 15
                       },
                       "url": "https://media.example.com/media/6nJmrhlu4aL1m/giphy.gif"
                    },
                    "mutable_content": 1
                 }
              }
      - description: iOS override with a template_id
        examples:
          - lang: json
            source: |
              {
                 "ios": {
                    "template": {
                          "template_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    }
                 }
              }
    jsonAttribute:
      - description: JSON Attribute examples
        examples:
          - lang: json
            source: |
              {
                // Example 1
                "audience":
                 {
                    "attribute": "books_on_books",
                    "where": {
                       "property": "$.x.store.book[*].title",
                       "operator": "equals",
                       "value": "Dracula",
                       "compare_as": "text"
                    }
                 }
              }
              {
                // Example 2
                "audience":
                 {
                    "attribute": "oh_look_a_book",
                    "where": {
                       "property": "$.x['store']['book'][0]['title']",
                       "operator": "equals",
                       "value": "Dracula",
                       "compare_as": "text"
                    }
                 }
              }
              {
                // Example 3
                "audience":
                 {
                    "attribute": "another_one",
                    "where": {
                       "property": "$.x.store.codes[*].sneakers",
                       "operator": "equals",
                       "value": 178394549,
                       "compare_as": "number"
                    }
                 }
              }
              {
                // Example 4
                "audience":
                 {
                    "attribute": "and_one_more",
                    "where": {
                       "property": "$.x['store']['codes'][0]['available']",
                       "operator": "equals",
                       "value": "true",
                       "compare_as": "boolean"
                    }
                 }
              }
    listObject:
      - description: List response object
        examples:
          - lang: json
            source: |
              {
                "ok": true,
                "lists": [
                    {
                      "name": "ua_attributes_my_list",
                      "description": "My first list",
                      "extra": {
                          "filename": "list.csv",
                          "source": "crm"
                      },
                      "created": "2020-05-13T21:41:25",
                      "last_updated": "2020-05-13T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_my_list/errors",
                      "status": "ready"
                    },
                    {
                      "name": "ua_attributes_another_list",
                      "description": "My second list",
                      "extra": {
                          "filename": "list2.csv",
                          "source": "api"
                      },
                      "created": "2020-05-14T21:41:25",
                      "last_updated": "2020-05-14T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_another_list/errors",
                      "status": "ready"
                    }
                ]
              }
    localization:
      - description: Example array of localizations
        examples:
          - lang: json
            source: |
              {
                "localizations": [
                    {
                       "language": "de",
                       "country": "AT",
                       "notification": {
                          "alert": "Grüss Gott"
                       }
                    },
                    {
                       "language": "de",
                       "country": "DE",
                       "notification": {
                          "alert": "Guten Tag"
                       }
                    }
                 ]
              }
    messageObject:
      - description: Message object example
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "notification": {
                    "ios": {
                       "badge": "+1"
                    }
                 },
                 "message": {
                    "title": "This week's offer",
                    "body": "<html><body><h1>blah blah</h1> etc...</html>",
                    "content_type": "text/html",
                    "expiry": "2020-04-01T12:00:00",
                    "extra": {
                       "offer_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    },
                    "icons": {
                       "list_icon": "http://cdn.example.com/message.png"
                    }
                 }
              }
    messageObjectWithTemplate:
      - description: Message Center with template using handlebars example
        examples:
          - lang: json
            source: |
              {
                 "message": {
                    "title": "Save on {{product}} through {{end_date}}!",
                    "body": "<html><body><h1>here's a cool {{offer}}</h1> etc...</html>",
                    "content_type": "text/html",
                    "expiry": "2020-04-01T12:00:00",
                    "extra": {
                       "offer_id": "608f1f6c-8860-c617-a803-b187b491568e"
                    },
                    "icons": {
                       "list_icon": "http://cdn.example.com/message.png"
                    }
                 }
              }
      - description: Message Center with template by ID example
        examples:
          - lang: json
            source: |
              {
                 "message": {
                    "template": {
                       "template_id": "my_template_id"
                    }
                 }
              }
    mms:
      - description: Example Create and Send for MMS without template
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send": [
                      {
                          "ua_msisdn": "15558675309",
                          "ua_sender": "15551234567",
                          "ua_opted_in": "2020-11-11T18:45:30",
                      }
                  ]
                },
                "device_types": [
                  "mms"
                ],
                "notification": {
                  "mms": {
                    "fallback_text": "Delivery failed, but you should still check this out.",
                    "subject" : "Hey, thanks for subscribing!",
                    "slides": [
                      {
                        "text": "Check this out!",
                        "media": {
                            "url": "https://i.example.com/1t466Om.jpg",
                            "content_type": "image/jpeg",
                            "content_length": 52918
                          }
                        }
                      ]
                    }
                  }
                }
    mmsOverrideObject:
      - description: Example MMS notification
        examples:
          - lang: json
            source: |
              {
                 "mms": {
                    "subject" : "Double Rainbows",
                    "fallback_text": "See https://urbanairship.com/double-rainbows?ua-tag-add=rainbows:used_fallback_text for double rainbows!",
                    "shorten_links": true,
                    "slides" : [
                       {
                          "text": "A double rainbow is a wonderful sight where you get two spectacular natural displays for the price of one.",
                          "media": {
                             "url": "https://www.metoffice.gov.uk/binaries/content/gallery/mohippo/images/learning/learn-about-the-weather/rainbows/full_featured_double_rainbow_at_savonlinna_1000px.jpg",
                             "content_type": "image/jpeg",
                             "content_length": 238686
                          }
                       }
                    ]
                 },
                 "device_types": ["sms"]
              }
    mmsOverrideWithTemplate:
      - description: Example object with merge fields in audience object
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "delivery_image": "url",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "order" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "mms" ],
                "notification" : {
                  "mms" : {
                    "subject" : "Your order is on the way!",
                    "fallback_text": "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} just shipped",
                    "slides": [
                      {
                        "media": {
                          "url": "https://www.example.com/order12345.jpg",
                          "content_type": "image/jpeg",
                          "content_length": 123100
                        },
                        "text": "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} just shipped."
                      }
                    ]
                  }
                }
              }
      - description: Example with inline template
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "delivery_image": "https://www.example.com/order12345.jpg",
                      "content-length": "1234567",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "order" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "mms" ],
                "notification" : {
                  "mms" : {
                    "subject": "Your order is on the way!",
                    "fallback_text": "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} was delivered!",
                    "slides": [
                      {
                        "media": {
                          "url": "https://www.example.com/order12345.jpg",
                          "content_type": "image/jpeg",
                          "content_length": 123100
                        },
                        "text" : "Hi, {{customer.first_name}}, your {{#each order}}{{order.name}}{{/each}} was delivered!"
                      }
                    ]
                  }
                }
              }
      - description: Example with template_id
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "delivery_image": "https://www.example.com/order12345.jpg",
                      "content-length": "1234567",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "order" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "mms" ],
                "notification" : {
                  "mms" : {
                    "template" : {
                      "template_id" : "9335bb2a-2a45-456c-8b53-42af7898236a"
                    },
                    "slides": [
                      {
                        "media": {
                          "url": "https://cdn.example.com/coolImage.jpg",
                          "content_type": "image/jpeg",
                          "content_length": 123100
                        }
                      }
                    ]
                  }
                }
              }
    namedUserConditions:
      - description: Example
        examples:
          - lang: json
            source: |
              { "name" : "Pipeline with Named User Condition",
                "enabled" : true,
                "immediate_trigger" : "/* ... */",
                "outcome" : "/* ... */",
                "condition": [
                  { "and" : [ {"named_user": {"state": "associated"}}]}
                ]
              }
    namedUserResponseBody:
      - description: Example Named User
        examples:
          - lang: json
            source: |
              {
                "named_user": {
                    "named_user_id": "user-id-1234",
                    "created" : "2020-04-08T20:41:06",
                    "last_modified" : "2020-05-01T18:00:27",
                    "tags": {
                      "loyalty program": [
                          "silver-member",
                          "ten-plus-years",
                          "valued-customer"
                      ],
                      "crm id": [
                          "abc-123-def-456"
                      ]
                    },
                    "subscription_lists": [
                      {
                        "list_ids": ["example_listId-1", "example_listId-5"],
                        "scope": "web"
                      },
                      {
                        "list_ids": ["example_listId-2", "example_listId-3"],
                        "scope": "app"
                      },
                      {
                        "list_ids": ["example_listId-2"],
                        "scope": "web"
                      },
                      {
                        "list_ids": ["example_listId-3"],
                        "scope": "email"
                      },
                      {
                        "list_ids": ["example_listId-4"],
                        "scope": "sms"
                      }
                    ],
                    "attributes": {
                      "item_purchased": "Fur removal tool",
                      "cats_name": "Sammy",
                      "pets_age": 12
                    },
                    "user_attributes": {
                      "ua_country": "US",
                      "ua_language": "en",
                      "ua_tz": "America/Los_Angeles"
                    },
                    "channels": [
                      {
                          "channel_id": "dceafd02-b852-4305-83df-98b65fa40dd4",
                          "device_type": "ios",
                          "installed": true,
                          "opt_in": true,
                          "push_address": "FFFF",
                          "created": "2020-04-08T20:41:06",
                          "last_registration": "2020-05-01T18:00:27",
                          "tags": [
                            "meow"
                          ]
                      }
                    ]
                }
              }
    namedUserSubscriptionListItem:
      - description: Example Subscription List item
        examples:
          - lang: json
            source: |
              {
                "list_ids": ["example_listId-2", "example_listId-3"],
                "scope": "app"
              }
    namedUserSubscriptionListsObject:
      - description: Example Subscription Lists object
        examples:
          - lang: json
            source: |
              {
                  "subscribe": ["stickers", "gifs"],
                  "unsubscribe": ["cookies"]
              }
    notificationObject:
      - description: Example notification with all platforms
        examples:
          - lang: json
            source: |
              {
                 "audience": "all",
                 "device_types": [
                    "ios",
                    "android",
                    "amazon",
                    "web",
                    "email",
                    "open::toaster"
                 ],
                 "notification": {
                    "ios": {
                       "alert": "Hello, iDevices"
                    },
                    "android": {
                       "alert": "These are not the...yeah, lame joke."
                    },
                    "amazon": {
                       "alert": "Read any good books lately?"
                    },
                    "web": {
                       "alert": "Oh the tangled web we weave"
                    },
                    "email": {
                       "subject": "Did you get that thing I sent you?",
                       "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                       "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                       "message_type": "commercial",
                       "sender_name": "Airship",
                       "sender_address": "team@urbanairship.com",
                       "reply_to": "no-reply@urbanairship.com"
                    },
                    "open::toaster": {
                       "alert": "Would you like avocados with that?"
                    }
                 }
              }
    numberAttribute:
      - description: Number Attribute example
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "lifetime_value",
                    "operator": "greater",
                    "value": 15000
                 }
              }
    okResponseObject:
      - description: OK response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
              }
      - description: OK with identifiers
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "9d78a53b-b16a-c58f-b78d-181d5e242078"
                  ]
              }
    open:
      - description: Example object
        examples:
          - lang: json
            source: |
              {
                "audience" : {
                  "create_and_send": [
                    {
                      "ua_address" : "36d5a261-0454-40f5-b952-942c4b2b0f22",
                      "name": "Perry"
                    }
                  ]
                },
                "device_types" : [ "open::smart_fridge" ],
                "notification" : {
                    "open::smart_fridge": {
                        "alert" : "Hey {{name}}, you're out of ice cream!"
                    }
                },
                "campaigns": {
                    "categories": ["needs_ice_cream", "cookies_and_cream"]
                }
              }
    openChannelOverrideObject:
      - description: Example push with open channel override
        examples:
          - lang: json
            source: |
              {
                 "audience" : {
                    "OR" : [
                          { "tag" : ["sports", "entertainment"]},
                          { "device_token" : "871922F4F7C6DF9D51AC7ABAE9AA5FCD7188D7BFA19A2FA99E1D2EC5F2D76506" },
                          { "open_channel" : "6bcf3e63-a38a-44d8-8b0d-2fb5941e74ab" } ]
                 },
                 "notification" : {
                    "alert" : "Someone did sports!",
                    "ios" : {
                       "extra" : {
                          "url" : "http://www.example.com" } },
                    "open::sms" : {
                       "alert" : "SMS override alert value! I will replace the top-level alert.",
                       "extra" : {
                          "sms_key" : "Some SMS specific payload data for all SMS devices." } },
                    "open::email" : {
                       "alert" : "Email override alert value! I will replace the top-level alert.",
                       "title" : "A title for email payloads - neat!" }
                 },
                 "options" : { "expiry" : 60 },
                 "device_types" : [ "ios", "open::sms", "open::email" ]
              }
      - description: Open platform example
        examples:
          - lang: json
            source: |
              {
                 "alert": "A generic alert sent to all open platforms",
                 "device_types" : ["open::sms", "open::email"],
                 "open::sms": {
                    "title": "SMS Alert!",
                    "alert": "A shorter alert for SMS users",
                    "summary": "A longer summary of some content or whatever",
                    "media_attachment": "https://example.com/cat_standing_up.jpeg",
                    "extra": {
                       "some_info": "For SMS only",
                       "some_id": "671ecd12-ad56-4b2f-98f1-107ce33d33e6" },
                    "interactive": {
                       "type": "ua_yes_no_foreground",
                       "button_actions": {
                          "yes": {
                             "open": {
                                "type": "url",
                                "content": "http://www.example.com" } },
                          "no": {
                             "app_defined": {
                                "foo": "bar" } } } }
                 },
                 "open::email": {
                    "alert": "A longer alert for users of email, who have more space." }
              }            
    pipelineObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                 "name":"The Darkest Pipeline",
                 "enabled":true,
                 "immediate_trigger":"first_open",
                 "outcome":{
                    "push":{
                       "audience":"triggered",
                       "device_types":[
                          "ios",
                          "android"
                       ],
                       "notification":{
                          "alert":"Cool goatee, Abed"
                       }
                    }
                 },
                 "timing":{
                    "delay":{
                       "seconds":7200
                    },
                    "schedule":{
                       "type":"local",
                       "miss_behavior":"wait",
                       "dayparts":[
                          {
                             "days_of_week":[
                                "thursday"
                             ],
                             "allowed_times":[
                                {
                                   "preferred":"21:30:00"
                                }
                             ]
                          }
                       ]
                    }
                 }
              }
      - description: Example email pipeline
        examples:
          - lang: json
            source: |
              {
               "name":"Read Receipt",
               "enabled":true,
               "immediate_trigger": {
                  "tag_added": "newSubscription"
               },
               "outcome":{
                  "push":{
                     "audience":"triggered"
                     },
                     "device_types": [
                        "email"
                     ],
                     "notification": {
                        "email": {
                           "subject": "Did you get that thing I sent you?",
                           "html_body": "<h2>Richtext body goes here</h2><p>Wow!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                           "plaintext_body": "Plaintext version goes here [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                           "message_type": "commercial",
                           "sender_name": "Airship",
                           "sender_address": "team@urbanairship.com",
                           "reply_to": "no-reply@urbanairship.com"
                        }
                     }
                  },
                 "timing":{
                    "delay":{
                       "seconds":7200
                    }
                 }
              }
    pointObject:
      - description: Coordinate point example
        examples:
          - lang: json
            source: |
              {
                  "latitude": 45,
                  "longitude": 179.999999
              }
    preferenceFormSection:
      - description: Example preference form section
        examples:
          - lang: json
            source: |
              {
                "display": {
                  "name": "Select the wonderful things you would like to receive notifications for:"
                },
                "id": "161bb08b-5e09-424b-8265-b0458920aa74",
                "items": [
                  {
                    "display": {
                      "description": "Be the first to know about what's on sale each week.",
                      "name": "Weekly Special"
                    },
                    "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                    "subscription_id": "weekly_special",
                    "type": "channel_subscription"
                  },
                ],
                "type": "section"
              }
      - description: Example preference form section break
        examples:
          - lang: json
            source: |
              {
                "display": {
                  "name": "Take a break, the next section will be there when you come back."
                },
                "id": "161bb08b-5e09-424b-8265-b0458920aa74",
                "type": "labeled_section_break"
              }
    preferenceFormStorageState:
      - description: Example preference form state
        examples:
          - lang: json
            source: |
              {
                "display": {
                  "description": "Choose your own adventure",
                  "name": "Preferences"
                },
                "id": "seanbird_mobile_app",
                "sections": [
                  {
                    "display": {
                      "name": "Select the wonderful things you would like to receive notifications for:"
                    },
                    "id": "161bb08b-5e09-424b-8265-b0458920aa74",
                    "items": [
                      {
                        "display": {
                          "description": "Be the first to know about what's on sale each week.",
                          "name": "Weekly Special"
                        },
                        "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                        "subscription_id": "weekly_special",
                        "type": "channel_subscription"
                      },
                    ],
                    "type": "section"
                  }
                ]
              }
    pushObject:
      - description: Example push object
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "OR": [
                       {
                          "tag": [
                             "sports",
                             "entertainment"
                          ]
                       },
                       {
                          "ios_channel": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5"
                       }
                    ]
                 },
                 "notification": {
                    "alert": "Hi from Airship!{{#if super_sale }} We're having a sale on {{ products.0.name }}!{{/if}}",
                    "ios": {
                       "extra": {
                          "url": "http://www.urbanairship.com"
                       }
                    }
                 },
                 "options": {
                    "expiry": "2020-04-01T12:00:00"
                 },
                 "message": {
                    "title": "Message title",
                    "body": "<Your message here>",
                    "content_type": "text/html"
                 },
                 "in_app": {
                    "alert": "This part appears in-app!",
                    "display_type": "banner",
                    "expiry": "2020-04-01T12:00:00",
                    "display": {
                       "position": "top"
                    }
                 },
                 "device_types": [ "ios", "android" ],
                 "global_attributes": {
                    "super_sale": true,
                    "products": [
                        {"id": 1, "name": "New Line Sneakers", "price": "79.95"},
                        {"id": 2, "name": "Old Line Sneakers", "price": "59.95"}
                    ]
                 }
              }
      - description: Example personalized push
        examples:
          - lang: json
            source: |
              {
                 "device_types": [
                    "sms"
                 ],
                 "options": {
                    "personalization": true
                 },
                 "notification": {
                    "sms": {
                       "alert": "Hi {{name}}, {{#feed \"weather_updates\" kw="today" as |weather|}}It's going to be {{weather.temp}} in {{weather.loc}} today!{{/feed}}",
                    }
                 },
                 "audience": {
                    "tag": "local_updates",
                    "group": "weather"
                 },
                 "feeds": [
                    {
                       "name": "weather_updates",
                       "params": {
                          "kw": "today"
                       }
                    }
                 ]
              }
      - description: Example localized push
        examples:
          - lang: json
            source: |
              {
                "device_types": [ "ios", "android" ],
                "audience": {
                   "tag": "needs_a_greeting",
                   "group": "new_customer"
                },
                "notification": {
                   "alert": "Hi!"
                },
                "localizations": [
                    {
                       "language": "de",
                       "country": "AT",
                       "notification": {
                          "alert": "Grüss Gott"
                       }
                    },
                    {
                       "language": "de",
                       "country": "DE",
                       "notification": {
                          "alert": "Guten Tag"
                       }
                    }
                ]
              }
    pushTemplatePayload:
      - description: Push template payload example
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "tag": [
                       "yanny",
                       "laurel"
                    ]
                 },
                 "device_types": [
                    "email",
                    "ios",
                    "android",
                    "web"
                 ],
                 "merge_data": {
                    "template_id": "8cce6cc8-7d78-43c7-80b5-81ac24c07672",
                    "substitutions": {
                       "FIRST_NAME": "Bob",
                       "LAST_NAME": "Takahashi",
                       "TITLE": null
                    }
                 },
                 "campaigns": {
                    "categories": [
                       "winter sale",
                       "west coast"
                    ]
                 }
              }
    regionObject:
      - description: Example polygon-type Geofence imported from Gimbal
        examples:
          - lang: json
            source: |
              {
                  "region_id": "abe5deb3-00d0-446e-8c5d-94b6421a01e0",
                  "name": "My Favorite Place",
                  "created_at": "2020-06-09T12:34:56",
                  "updated_at": "2020-06-09T12:34:56",
                  "geofence": {
                      "type": "POLYGON",
                      "points": [
                          {
                              "latitude": 90.0,
                              "longitude": 180.0
                          },
                          {
                              "latitude": 90.0,
                              "longitude": 180.0
                          },
                          {
                              "latitude": 0.0,
                              "longitude": 0.0
                          }
                      ]
                  },
                  "beacons": [
                      {
                          "name": "entryway",
                          "id": "VLSHLAOEXOFCMLDVTKFQ"
                      },
                      {
                          "name": "Exhibit A",
                          "id": "ZAQQMNOZKRFCRPYEUCZI"
                      }
                  ],
                  "attributes": {
                      "store_name": "REI"
                  },
                  "source_info": {
                      "source": "GIMBAL",
                      "region_id": "4BPSFLKJSDFLKJSDFLKJ",
                      "vendor_href": "http://api.gimbal.com/2/places/4BPSFLKJSDFLKJSDFLKJ"
                  }
              }
    relativeWindow:
      - description: Example relative time window
        examples:
          - lang: json
            source: |
              {
                "date": {
                   "days": {
                      "recent": 1
                   }
                }
              }
    removeAttributeObject:
      - description: Remove Attribute
        examples:
          - lang: json
            source: |
              {
                "action": "remove",
                "key": "minor_league"
              }
    scheduleObject:
      - description: Example schedule
        examples:
          - lang: json
            source: |
              {
                  "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109",
                  "schedule": {"scheduled_time": "2020-04-01T18:45:30"},
                  "name": "My schedule",
                  "push": {
                      "audience": {"tag": "49ers"},
                      "device_types": [ "ios", "android" ],
                      "notification": {"alert": "Touchdown!"},
                      "options": {"expiry": 10800}
                  }
              }
    scheduleSpec:
      - description: Global schedule
        examples:
          - lang: json
            source: |
              {
                 "scheduled_time": "2020-04-01T18:45:30"
              }
      - description: Best time example
        examples:
          - lang: json
            source: |
              {
                "best_time": {
                  "send_date": "2020-06-01"
                }
              }
      - description: Local time
        examples:
          - lang: json
            source: |
              {
                 "local_scheduled_time": "2020-04-01T18:45:30"
              }
    scheduledBulkSendObject:
      - description: Scheduled bulk send object
        examples:
          - lang: json
            source: |
              {
                  "schedule": {
                      "scheduled_time" : "2024-11-07T12:00:00"
                  },
                  "name" : "scheduled bulk send",
                  "push" : {
                      "audience" : {
                          "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                      },
                      "device_types" : [ "open::rcs" ],
                      "notification" : {
                          "alert" : "Hope you voted"
                      },
                      "campaigns": {
                          "categories": ["midterms2024", "getoutthevote2024"]
                      }
                  }
              }
    scopedBatchItem:
      - description: Example scoped batch item
        examples:
          - lang: json
            source: |
              {
                  "scope": ["app"],
                  "subscription_lists": {
                      "subscribe": ["stickers", "gifs"],
                      "unsubscribe": ["cookies"]
                  }
              }
    segmentationConditions:
      - description: Example
        examples:
          - lang: json
            source: |
              { "name" : "Pipeline with Segmentation Conditions",
                "enabled" : true,
                "immediate_trigger" : "/* ... */",
                "outcome" : "/* ... */",
                "condition": [
                  { "OR": [
                      { "segmentation": {
                          "audience": {
                            "AND": [
                                { "OR": [ {  "tag": "sports" },
                                          { "tag": "entertainment" } ] },
                                { "segment": "mailing-segment" } ]
                          }
                        }
                      },
                      { "segmentation": { "audience": { "named_user": "admin" } }
                      }
                    ]
                  }
                ]
              }
    setAttributeObject:
      - description: Set Attribute with string value
        examples:
          - lang: json
            source: |
              {
                "action": "set",
                "key": "position",
                "value": "LF"
              }
      - description: Set JSON Attribute with its required object value
        examples:
          - lang: json
            source: |
              {
                "action": "set",
                "key": "position#instance_42",
                "value": {
                  "exp": 1731531110,
                  "name": "LeftField",
                  "rank": 2,
                  "active" true,
                  "extras": [
                    "rookie",
                    "mvp"
                  ]
                }
              }
    sms:
      - description: Example object
        examples:
          - lang: json
            source: |
              {
               "audience": {
                  "create_and_send" : [
                    {
                      "ua_msisdn": "15558675309",
                      "ua_sender": "12345",
                      "ua_opted_in": "2020-11-11T18:45:30"
                    }
                  ]
                },
                "device_types" : [ "sms" ],
                "notification" : {
                  "sms": {
                    "alert": "Check out our winter sale! https://www.example.com/amazingly/long/url-that-I-want-to-shorten",
                    "expiry": 172800,
                    "shorten_links": true
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
    smsChannelAssociatedByContactObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                "type": "sms",
                "channel_id": "a537ac78-ef4f-4f74-8536-6fd620549186",
                "sender": "1234",
                "msisdn": "*******3379",
                "opt_in": true
              }   
    smsOverrideObject:
      - description: Example SMS notification
        examples:
          - lang: json
            source: |
              {
                  "audience": {
                     "named_user": "user"
                  },
                  "notification": {
                     "alert": "A generic alert sent to all platforms without overrides in device_types",
                     "sms": {
                        "alert": "A shorter alert with a link for SMS users to click https://www.example.com/long/form/url?ua-tag-add=this_group:this_tag",
                        "expiry": 172800,
                        "shorten_links": true
                     }
                  },
                  "device_types": [ "sms" ]
              }
    smsOverrideWithTemplate:
      - description: Example object with merge fields in audience object
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "sms" ],
                "notification" : {
                  "sms" : {
                    "alert" : "Hi, {{customer.first_name}}, your {{#each cart}}{{this.name}}{{/each}} are ready to pickup at our {{customer.location}} location!"
                  }
                },
                "campaigns" : {
                  "categories" : [ "order-pickup" ]
                }
              }
      - description: Example object with template_id
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_sender" : "12345",
                      "ua_msisdn" : "15558675309",
                      "ua_opted_in" : "2020-08-30T22:35:00",
                      "customer": {
                          "first_name": "Jenny",
                          "last_name": "Smith",
                          "location": "Vancouver"
                      },
                      "cart" : [
                        {
                          "name" : "Rubber Gloves",
                          "code" : "abaccgdsagsde",
                          "qty": 1
                        },
                        {
                          "name" : "Bleach Alternative",
                          "code" : "cacadgdesgaga",
                          "qty": 1
                        }
                      ]
                    }
                  ]
                },
                "device_types" : [ "sms" ],
                "notification" : {
                  "sms" : {
                    "template" : {
                      "template_id": "9335bb2a-2a45-456c-8b53-42af7898236a"
                    }
                  }
                }
              }
    snippetReferences:
      - description: Example push snippets request
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <Master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "device_types": ["ios"],
                  "audience": { "tag": "earlyBirds" },
                  "notification": {
                     "alert": "Hello, {{user}}, how are you today?{{> \"signoff\" }}"
                  },
                  "options": {
                     "personalization": true
                  },
                  "snippet_references": {
                     "snippets": [
                        {
                           "name": "signoff"
                        }
                     ]
                  }
               }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3
              Content-Length: 123
              Data-Attribute: push_ids

               {
                  "ok": true,
                  "operation_id": "5e7852b0-6909-4e60-a73f-4d6b92d94c80",
                  "push_ids": [
                     "bf28d158-fefe-475a-9c2a-ed4f69cc891e"
                  ]
               }
        showMissingLanguagePlaceholders: true
      - description: >
          Snippet references example: The `copyright` snippet is loaded by the
          `snippet_references` object and inserted at the end of the `alert`
          text.
        examples:
          - lang: json
            source: |
              {
                 "notification": {
                    "alert": "Hi {{ name }}: Thanks for your purchase! {{> copyright }}"
                 },
                 "snippet_references": {
                    "snippets": [
                       {
                          "name": "copyright"
                       }
                    ]
                 }
              }
    subscriptionConditions:
      - description: Example
        examples:
          - lang: json
            source: |
              { "name" : "Pipeline with Subscription Conditions",
                "enabled" : true,
                "immediate_trigger" : "/* ... */",
                "outcome" : "/* ... */",
                "condition": [
                { "or" : [
                    {"subscription" : {"list_name": "sports_updates"}},
                    {"subscription" : {"list_name": "silence", "negated": true}}]
                }]
              }
    subscriptionListObject:
      - description: Example Subscription List object
        examples:
          - lang: json
            source: |
              {
                "action": "subscribe",
                "list_id": "exciting_news"
              }
    subscriptionListResultObject:
      - description: Example Subscription List result object
        examples:
          - lang: json
            source: |
              {
                 "list_id": "example_listId-2",
                 "name": "A nice readable name 2",
                 "description": "A very nice description for you.",
                 "scopes": ["app", "web"],
                 "default_opted_in": true
              }
    tagConditions:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                  "name" : "Pipeline with Tag Conditions",
                  "enabled" : true,
                  "immediate_trigger" : "/* ... */",
                  "outcome" : "/* ... */",
                  "condition": [
                      {
                          "or" : [
                              {
                                  "tag" : {
                                      "tag_name" : "VIP"
                                  }

                              },
                              {
                                  "tag" : {
                                      "tag_name": "dont_push",
                                      "group": "my_special_sandbox",
                                      "negated": true
                                  }
                              }
                          ]
                      }
                  ]
              }
    tagGroupObject:
      - description: A simple tag group that has 2 tags associated with the group tags.
        examples:
          - lang: json
            source: |
              {
                "sports fan": ["Federer fan", "Messi fan"]
              }
      - description: >-
          A simple Airship-specific tag group, associating one tag with the
          group
        examples:
          - lang: json
            source: |
              {
                "tag_groups": {
                    "ua_locale_country": ["US"]
                }
              }
      - description: >-
          An array of Tag Groups for a channel. Channels can have
          Airship-specific tag groups; Named Users do not have Airship-specific
          Tag Groups.
        examples:
          - lang: json
            source: |
              {
                "tag_groups": [
                    {
                      "sports fan": [
                          "Federer fan",
                          "Messi fan"
                      ]
                    },
                    {
                      "music fan": [
                          "Beyonce",
                          "Muse"
                      ]
                    },
                    {
                      "ua_locale_country": [
                          "US"
                      ]
                    },
                    {
                      "ua_locale_language": [
                          "en"
                      ]
                    }
                ]
              }
      - description: >-
          An array of Tag Groups for a Named User. Named Users do not have
          Airship-specific tag groups.
        examples:
          - lang: json
            source: |
              {
                "tags": {
                    "crm_id": [
                      "abc-123-def-456"
                    ],
                    "loyalty program": [
                      "silver-member",
                      "ten-plus-years",
                      "valued-customer"
                    ]
                }
              }
    tagListResponseObject:
      - description: Tag list response object
        examples:
          - lang: json
            source: |
              {
                "name" : "ua_tags_foo",
                "description" : "",
                "extra" : { "key": "value" },
                "add":{
                  "tag-group-name": [
                    "tag-value"
                  ],
                  "tag-group-name2": [
                    "tag-value2a",
                    "tag-value2b"
                  ]
                },
                "remove": {
                  "tag-group-name3": [
                    "tag-value"
                  ]
                },
                "set": {
                  "tag-group-name4": [
                    "tag-value"
                  ]
                },
                "created" : "2013-08-08T20:41:06",
                "last_updated" : "2014-05-01T18:00:27",
                "channel_count" : 0,
                "mutation_success_count": 1000,
                "mutation_error_count": 10,
                "error_path":  "https://go.urbanairship.com/api/tag-lists/users_a/errors",
                "status" : "ready"
              }
    templateObject:
      - description: Basic template object
        examples:
          - lang: json
            source: |
              {
                 "name": "<template name>",
                 "description": "<template description>",
                 "variables": ["<variable specifications>"],
                 "push": "<push-object>",
                 "id": "<template-id>",
                 "created_at" : "timestamp",
                 "modified_at" : "timestamp",
                 "last_used" : "timestamp"
              }
    templatePushObject:
      - description: Example
        examples:
          - lang: json
            source: |
              {
                  "audience" : {
                      "OR" : [
                          { "tag" : ["sports", "entertainment"]},
                          { "device_token" : "871922F4F7C6DF9D51AC7ABAE9AA5FCD7188D7BFA19A2FA99E1D2EC5F2D76506" },
                          { "apid" : "5673fb25-0e18-f665-6ed3-f32de4f9ddc6" }
                      ]
                  },
                  "device_types" : [ "ios" ],
                  "merge_data": {
                      "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "substitutions": {
                          "FIRST_NAME": "Bob"
                      }
                  }
              }
    templateVariableObject:
      - description: Template variable example
        examples:
          - lang: json
            source: |
              {
                 "key" : "<key>",
                 "name" : "<variable name>",
                 "description" : "<variable description>",
                 "default_value" : "<fallback value>"
              }
    templatedMessageContent:
      - description: Example templated Create and Send a message with bulk ID
        examples:
          - lang: json
            source: |
              {
                "audience" : {
                    "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                },
                "device_types" : [ "open::rcs" ],
                "notification" : {
                    "open::rcs" : {
                        "template": {
                            "template_id" : "09641749-f288-46e6-8dc6-fae592e8c092"
                        }
                    }
                }
              }
      - description: Example templated Create and Send a message
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send": [
                    {
                      "ua_address": "some-person@example.com",
                      "ua_commercial_opted_in": "2023-04-01T18:45:30",
                      "ua_open_tracking_opted_in": "2023-04-01T18:45:30",
                      "name": "Some Person, Esq.",
                      "totalPurchases": "$ 239.85",
                      "items": [
                        {
                          "text": "New Line Sneakers",
                          "image": "https://marketing-image-production.example.com/uploads/newlinesneakers.png",
                          "price": "$ 79.95"
                        },
                        {
                          "text": "Old Line Sneakers",
                          "image": "https://marketing-image-production.example.com/uploads/oldlinesneakers.png",
                          "price": "$ 79.95"
                        },
                        {
                          "text": "Blue Line Sneakers",
                          "image": "https://marketing-image-production.example.com/uploads/bluelinesneakers.png",
                          "price": "$ 79.95"
                        }
                      ],
                      "receipt": true,
                      "onlineAccount": {
                        "username": "coolUser",
                        "email_receipt": true,
                        "email": "someone@example.com"
                      },
                      "userAddress": {
                        "address01": "1234 Fake St.",
                        "address02": "Apt. 123",
                        "city": "Place",
                        "state": "CO",
                        "zip": "80202"
                      },
                      "num_of_purchases": 4
                    },
                    {
                      "ua_address": "some-other-person@example.com",
                      "ua_commercial_opted_in": "2023-04-01T18:45:30",
                      "ua_click_tracking_opted_in": "2023-04-01T18:45:30",
                      "name": "The Honorable Some Other Person"
                    }
                  ]
                },
                "device_types": [
                  "email"
                ],
                "notification": {
                  "email": {
                    "template": {
                      "fields": {
                        "subject": "Hi there, {{name}}",
                        "plaintext_body": "Your \n{{#each items}} {{this.text}} {{this.price}} {{/each}}\n are on the way{{#with userAddress}} to {{address01}}{{/with}}!"
                      }
                    },
                    "sender_name": "Ultimate Sender",
                    "message_type": "transactional",
                    "sender_address": "no-reply@valid-sender-example.com",
                    "reply_to": "no-reply@valid-sender-example.com"
                  }
                }
              }
      - description: Example CSV audience with nested keys
        examples:
          - lang: text/csv
            source: >
              ua_address,ua_commercial_opted_in,name,address.city,address.state,items.[0].name,items.[0].code,items.[1].name,items.[1].code

              someone@example.com,2023-04-01T18:45:30,Joe
              Someone,Portland,OR,Rubber Gloves,abaccgdsagsde,Bleach
              Alternative,cacadgdesgaga

              else@example.com,2023-04-21T16:13:01,Sir
              Else,Seattle,WA,Flashlight,zxcvxcbzxcbza,Shovel,aldfkghalsdkg
      - description: Equivalent JSON audience definition
        examples:
          - lang: json
            source: |
              {
                "audience": {
                  "create_and_send" : [
                      {
                        "ua_address" : "someone@example.com",
                        "ua_commercial_opted_in" : "2023-04-01T18:45:30",
                        "name" : "Joe Someone",
                        "address" : {
                          "city" : "Portland",
                          "state" : "OR"
                        },
                        "items" : [
                          {
                            "name" : "Rubber Gloves",
                            "code" : "abaccgdsagsde"
                          },
                          {
                            "name" : "Bleach Alternative",
                            "code" : "cacadgdesgaga"
                          }
                        ]
                      },
                      {
                        "ua_address" : "else@example.com",
                        "ua_commercial_opted_in" : "2023-04-21T16:13:01",
                        "name" : "Sir Else",
                        "address" : {
                          "city" : "Seattle",
                          "state" : "WA"
                        },
                        "items" : [
                          {
                            "name" : "Flashlight",
                            "code" : "zxcvxcbzxcbza"
                          },
                          {
                            "name" : "Shovel",
                            "code" : "aldfkghalsdkg"
                          }
                        ]
                      }
                  ]
                }
              }
    textAttribute:
      - description: Text Attribute example
        examples:
          - lang: json
            source: |
              { "audience":
                 {
                    "attribute": "item_purchased",
                    "operator": "contains",
                    "value": "jeans"
                 }
              }
    webOverrideObject:
      - description: Example with web override
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "channel": "cab69081-0196-4f6b-91dc-53bc88a2e6ce"
                 },
                 "device_types": [
                    "web"
                 ],
                 "notification": {
                    "alert": "Hello, world!",
                    "web": {
                       "alert": "Hello Web World",
                       "title": "A Custom Web Title",
                       "require_interaction": true,
                       "buttons": [
                          {
                             "id": "yes",
                             "label": "Yes",
                             "actions": {
                                "open": {
                                   "type": "home"
                                },
                                "add_tag": [
                                   "new_tag"
                                ]
                             }
                          },
                          {
                             "id": "no",
                             "label": "No"
                          }
                       ],
                       "extra": {
                          "story_id": "1234",
                          "moar": "{\"key\": \"value\"}"
                       }
                    }
                 }
              }
    webOverrideWithTemplate:
      - description: Web override with a template
        examples:
          - lang: json
            source: |
              {
                 "web": {
                    "alert": "Vote now, {{name}}!",
                    "title": "Geese? Or ducks!",
                    "icon": "{{icon}}",
                    "require_interaction": true,
                    "buttons": [
                       {
                          "id": "yes",
                          "label": "Yes",
                          "actions": {
                             "open": {
                                "type": "home"
                             },
                             "add_tag": ["new_tag"]
                          }
                       },
                       {
                       "id": "no",
                       "label": "No"
                       }
                    ],
                    "extra": {
                       "story_id": "1234",
                       "moar": "{\"key\": \"value\"}"
                    }
                 }
              }
      - description: Web override with a template_id
        examples:
          - lang: json
            source: |
              {
                 "web": {
                    "template": {
                       "template_id": "1ad69081-c196-af21-41dc-53bc89a2edc5"
                    },
                    "require_interaction": true,
                    "extra": {
                       "story_id": "1234",
                       "moar": "{\"key\": \"value\"}"
                    }
                 }
              }
    whereObject:
      - description: >
          Example payload to an audience of users who have opened your app as a
          result of receiving a specific push ID.
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "activity": "app_open",
                    "metric": "count",
                    "operator": "greater",
                    "value": 0,
                    "where": {
                       "property": "/_triggering_push/push_id",
                       "operator": "equals",
                       "compare_as": "text",
                       "value": "636abb88-5642-4035-998d-a04c93c499ad"
                    }
                 },
                 "device_types": [
                    "ios", "android"
                 ],
                 "notification": {
                    "alert": "Did you get that thing I sent you?"
                 }
              }
    wnsOverrideObject:
      - description: Example with WNS override
        examples:
          - lang: json
            source: |
              {
                 "audience": {
                    "wns": "cab69081-0196-4f6b-91dc-53bc88a2e6ce"
                 },
                 "device_types": [
                    "wns"
                 ],
                 "notification": {
                    "wns" : {
                       "alert": "Hello, world!"
                    }
                 }
              }
paths:
  /api/attachments:
    post:
      - description: Example create email attachment
        examples:
          - lang: HTTP
            source: |
              POST /attachments HTTP/1.1
              Authorization: Bearer <authorization token>
              Content-Type: application/json
              Accept: application/vnd.urbanairship+json; version=3

              {
                "filename": "rickroll.png",
                "content_type": "text/plain; charset=\"UTF-8\"",
                "data": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8..."
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();
                      
              EmailAttachmentRequest emailAttachmentRequest =
              EmailAttachmentRequest.newRequest()
                      .setContentType("text/plain; charset=\"UTF-8\"")
                      .setData("iBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8...")
                      .setFilename("rickroll.png");

              Response<EmailAttachmentResponse> response =
              client.execute(emailAttachmentRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, EmailAttachment
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              attachment = EmailAttachment(
                client=client,
                filename='rickroll.png', 
                content_type='image/png; charset="UTF-8"', 
                filepath='path/to/never_gonna.png'
              )
              response = attachment.post()

              print(response.get('attachment_ids'))
          - lang: HTTP
            source: |
              HTTP/1.1 201 Accepted
              Data-Attribute: attachment_id
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "attachment_ids": [
                      "b0c46a8d-b701-441b-9d6e-147c183b28ca"
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/attribute-lists:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/attribute-lists HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, AttributeList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              listing = AttributeList.list(airship=client)

              listing.json()
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: lists
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "lists": [
                    {
                      "name": "ua_attributes_my_list",
                      "description": "My first list",
                      "extra": {
                          "filename": "list.csv",
                          "source": "crm"
                      },
                      "created": "2020-05-13T21:41:25",
                      "last_updated": "2020-05-13T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_my_list/errors",
                      "status": "ready"
                    },
                    {
                      "name": "ua_attributes_another_list",
                      "description": "My second list",
                      "extra": {
                          "filename": "list2.csv",
                          "source": "api"
                      },
                      "created": "2020-05-14T21:41:25",
                      "last_updated": "2020-05-14T21:45:17",
                      "channel_count": 0,
                      "error_path": "https://go.urbanairship.com/api/attribute-lists/ua_attributes_another_list/errors",
                      "status": "ready"
                    }
                ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              AttributeListsListingRequest attributeListsListingRequest =
              AttributeListsListingRequest.newRequest();

              Response<AttributeListsListingResponse> response =
              client.execute(attributeListsListingRequest);
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/attribute-lists HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "name": "ua_attributes_my_new_list",
                "description": "First of many attributes lists!",
                "extra": {
                    "filename": "attributes.csv",
                    "source": "CRM"
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();
                      
              AttributeListsCreateRequest attributeListsCreateRequest =
              AttributeListsCreateRequest.newRequest("ua_attributes_list")
                      .setDescription("ua_attributes_list")
                      .addExtra("filename", "attributes.csv")
                      .addExtra("source","crm");

              Response<GenericResponse> response =
              client.execute(attributeListsCreateRequest);
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Type: application/json

              Location:
              https://go.urbanairship.com/api/attribute-lists/ua_attributes_my_new_list


              {
                "ok" : true
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, AttributeList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              attribute_list = AttributeList(
                client=client, 
                list_name="ua_attributes_my_new_list", 
                description="First of many attributes lists!", 
                extra={
                    "filename": "attributes.csv",
                    "source": "CRM"
                }
              )

              attribute_list.create()
        showMissingLanguagePlaceholders: true
  '/api/attribute-lists/{list_name}/csv':
    put:
      - description: Upload Attribute list example
        examples:
          - lang: HTTP
            source: |
              PUT /api/attribute-lists/ua_attributes_list/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              channel_id,Magic Score,Preferred Sport
              c543f3a3-bc1d-4830-8dee-7532c6a23b9a,100,Basketball
              6ba360a0-1f73-4ee7-861e-95f6c1ed6410,,Basketball
              15410d17-687c-46fa-bbd9-f255741a1523,2,Football
              c2c64ef7-8f5c-470e-915f-f5e3da04e1df,22.1,Rugby
        showMissingLanguagePlaceholders: true
      - description: Upload Attribute Snapshot list example
        examples:
          - lang: HTTP
            source: >
              PUT /api/attribute-lists/ua_attributes_snapshot_list/csv HTTP/1.1

              Authorization: Basic <application authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: text/csv


              channel_id,Magic Score,Preferred Sport,Favorite Team

              c543f3a3-bc1d-4830-8dee-7532c6a23b9a,100,Basketball,Lakers

              6ba360a0-1f73-4ee7-861e-95f6c1ed6410,,,,

              15410d17-687c-46fa-bbd9-f255741a1523,2,Football,

              c2c64ef7-8f5c-470e-915f-f5e3da04e1df,22.1,,Patriots


              # In this example using a Snapshot CSV:

              # - First user has all attributes set

              # - Second user has all attributes removed (empty values)

              # - Third user has Magic Score and Preferred Sport set, but
              Favorite Team removed

              # - Fourth user has Magic Score and Favorite Team set, but
              Preferred Sport removed
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, AttributeList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # For standard attribute lists, use ua_attributes_ prefix
              standard_list = AttributeList(
                client=client, 
                list_name="ua_attributes_list",
                description="example standard list",
              )
              standard_list.upload(file_path="path/to/standard_file.csv")

              # For attributesnapshot lists, use ua_attributes_snapshot_ prefix
              snapshot_list = AttributeList(
                client=client,
                list_name="ua_attributes_snapshot_list",
                description="example snapshot list",
              )
              snapshot_list.upload(file_path="path/to/snapshot_file.csv")
      - description: Upload Attribute list for SMS example
        examples:
          - lang: HTTP
            source: |
              PUT /api/attribute-lists/ua_attributes_list/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              msisdn,sms_sender,firstName
              5035556789,18588675309,Jane
              4155551212,18588675309,Rory
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, AttributeList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              attribute_list = AttributeList(
                client=client, 
                list_name="ua_attributes_list",
                description="example list", 
              )

              attribute_list.upload(file_path="path/to/sms_file.csv")
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/json

              {
                "ok" : true
              }
  '/api/attribute-lists/{list_name}/errors':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/attribute-lists/ua_attributes_list/errors HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+csv; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              AttributeListsErrorsRequest attributeListsErrorsRequest =
              AttributeListsErrorsRequest.newRequest("ua_attributes_list");

              Response<String> response =
              client.execute(attributeListsErrorsRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, AttributeList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              attribute_list = AttributeList(
                client=client, 
                list_name="ua_attributes_list",
                description="example list", 
              )

              errors = attribute_list.get_errors()
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Content-Type: text/csv


              8b4de669-16f1-4e71-9a1f-0c62a8235a65,ERROR,"Unable to parse
              number: forty-two"

              d5ebe607-a3e6-4601-b97e-83ec604223fe,ERROR,"Unable to parse date:
              monday"
        showMissingLanguagePlaceholders: true
  '/api/billing/channels/{year}/{month}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/billing/channels/2023/08/?device_type=ios HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Content-Type: application/json

              Link:
              <https://go.urbanairship.com/api/billing/channels/2023/08/?start=1234>;
              rel=next

              Data-Attribute: billable_channels


              {
                "ok": true,
                "next_page": "https://go.urbanairship.com/api/billing/channels/2023/08/?start=1234",
                "billable_channels": [
                    {
                      "device_type": "ios",
                      "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                      "last_registration": "2023-08-01T18:00:27",
                      "uninstalled": "2022-08-01T19:00:27"
                    },
                    {
                      "device_type": "ios",
                      "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e882",
                      "last_registration": "2023-05-01T18:00:27",
                    },
                ]
              }
        showMissingLanguagePlaceholders: true
  /api/billing/counts/current:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/billing/counts/current HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json
              Data-Attribute: counts

              {
                "ok" : true,
                "counts" :
                [
                    {
                      "device_type": "ios",
                      "count": 1234,
                      "last_updated": "2023-10-01T18:00:27"
                    },
                    {
                      "device_type": "android",
                      "count": 4321,
                      "last_updated": "2023-10-01T18:00:27"
                    },
                    {
                      "device_type": "adm",
                      "count": 123,
                      "last_updated": "2023-10-01T18:00:27"
                    },
                    {
                      "device_type": "web",
                      "count": 321,
                      "last_updated": "2023-10-01T18:00:27"
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
  '/api/billing/counts/{year}/{month}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/billing/counts/2023/08 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json
              Data-Attribute: counts

              {
                "ok" : true,
                "counts" :
                [
                    {
                      "device_type": "ios",
                      "count": 1234,
                      "last_updated": "2023-09-01T18:00:27"
                    },
                    {
                      "device_type": "android",
                      "count": 4321,
                      "last_updated": "2023-09-01T18:00:27"
                    },
                    {
                      "device_type": "adm",
                      "count": 123,
                      "last_updated": "2023-09-01T18:00:27"
                    },
                    {
                      "device_type": "web",
                      "count": 321,
                      "last_updated": "2023-09-01T18:00:27"
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
  /api/bulk-send:
    post:
      - description: Example Create and Send a message with bulk ID
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3;
              Content-type: application/json

              {
                  "audience" : {
                    "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                  },
                  "device_types" : [ "android" ],
                  "notification" : {
                    "alert" : "Welcome to the winter sale!!"
                  },
                  "campaigns": {
                    "categories": ["winter sale", "west coast"]
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "67c65146-c27f-431f-b54a-83aca694fdd3",
                  "push_ids": [
                    "c0eead17-333b-4f86-8a42-9fb7be1ed627"
                  ],
                  "message_ids": [],
                  "content_urls": []
              }
        showMissingLanguagePlaceholders: true
  /api/bulk-send/validate:
    post:
      - description: Example Validate Create and Send a message with bulk ID
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk-send/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3;
              Content-type: application/json

              {
                  "audience" : {
                    "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                  },
                  "device_types" : [ "android" ],
                  "notification" : {
                    "alert" : "Welcome to the winter sale!!"
                  },
                  "campaigns": {
                    "categories": ["winter sale", "west coast"]
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/bulk/{platform_name}':
    post:
      - description: Example Create bulk send audience request for email
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk/email HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              ua_address,ua_commercial_opted_in
              someone@example.com,2024-04-01T18:45:30
              else@example.com,2024-04-21T16:13:01
        showMissingLanguagePlaceholders: true
      - description: Example Create bulk send audience request for SMS
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk/sms HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              ua_msisdn,ua_sender,ua_opted_in
              15035551212,55555,2024-04-01T18:45:30
              15031215555,55555,2024-04-21T16:13:01
        showMissingLanguagePlaceholders: true
      - description: >-
          Example Create bulk send audience request for email with merge data
          fields
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk/email HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              ua_address,ua_commercial_opted_in,name,city
              someone@example.com,2024-04-01T18:45:30,Joe Someone,Portland
              else@example.com,2024-04-21T16:13:01,Sir Else,Seattle
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : true,
                "bulk_id": "26425d51-fbab-4ad8-bd5f-9560ee84b087",
                "field_names": ["ua_address", "ua_commercial_opted_in", "name", "city"]
              }
        showMissingLanguagePlaceholders: true
      - description: Example Create bulk send audience request for email
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk/email HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              ua_channel_id
              26bbfba4-f70a-4093-ab63-38d9123f6b23
              89099449-6032-4821-8f1c-fd0892fdc609
        showMissingLanguagePlaceholders: true
      - description: >-
          Example Create bulk send audience request for email with merge data
          fields
        examples:
          - lang: HTTP
            source: >
              POST /api/bulk/email HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: text/csv


              ua_channel_id,name,city

              26bbfba4-f70a-4093-ab63-38d9123f6b23,2018-04-01T18:45:30,Joe
              Someone,Portland

              89099449-6032-4821-8f1c-fd0892fdc609,2018-04-21T16:13:01,Sir
              Else,Seattle
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "bulk_id": "26425d51-fbab-4ad8-bd5f-9560ee84b087",
                  "field_names": ["ua_channel_id", "name", "city"]
              }
        showMissingLanguagePlaceholders: true
      - description: Example Create bulk send audience request for open platform
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk/open/rcs HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              ua_address
              17881e35-4dcc-4f72-a017-e5aca8bb85f5
              47745e49-099d-48d7-a489-563a2ae7497d
              03079fe7-a013-4a22-9c1b-bca350a3e3fb
              8a9b3ebc-010c-41c1-9484-6395b201dffe
              65fefb71-c38e-4af8-9d6f-ec8bfcefd999
              6e6fc2ee-722a-4729-86c3-f6d289373c41
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : true,
                "bulk_id": "26425d51-fbab-4ad8-bd5f-9560ee84b087",
                "field_names": ["ua_address"]
              }
        showMissingLanguagePlaceholders: true
      - description: Example Create bulk send audience request for open channels
        examples:
          - lang: HTTP
            source: |
              POST /api/bulk/open/rcs HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              ua_channel_id
              26bbfba4-f70a-4093-ab63-38d9123f6b23
              89099449-6032-4821-8f1c-fd0892fdc609
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "bulk_id": "26425d51-fbab-4ad8-bd5f-9560ee84b087",
                  "field_names": ["ua_channel_id"]
              }
        showMissingLanguagePlaceholders: true
  /api/channel-tags-lookup:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channel-tags-lookup HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "e0f6f0a5-ba56-4ec8-bb5b-933b5bc9c289",
                 "device_type": "ios",
                 "tag_groups": {
                    "device": [
                       "added", "from", "device"
                    ],
                    "foo": ["bar"],
                    "yaba": [
                       "daba",
                       "doo"
                    ],
                    "ua_offset_send_time_prediction": [
                       "0"
                    ]
                 },
                 "if_modified_since": "2023-03-02T22:56:10"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "tag_groups": {
                    "device": [
                       "added", "device"
                    ],
                    "yaba": [
                       "daba"
                    ],
                    "ua_offset_send_time_prediction": [
                       "0"
                    ]
                 },
                 "last_modified": "2023-03-02T22:56:11"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "last_modified": "2023-03-02T22:56:09"
              }
        showMissingLanguagePlaceholders: true
  /api/channels:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelRequest request = ChannelRequest.newRequest();

              Response<ChannelResponse> response = client.execute(request);

              ChannelView channels =
              response.getBody().get().getChannelView().get();
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ChannelList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              channel_id = None

              for channel in ChannelList(client):
                  channel_id = channel.channel_id
                  print(channel.channel_id, channel.device_type, channel.tags,
                        channel.push_address, channel.named_user_id, channel.opt_in)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_list = UA::ChannelList.new(client: airship)

              channel_list.each do |channel|
                  puts(channel)
              end

              puts(channel_list.count)
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Content-Type: application/vnd.urbanairship+json; version=3

              Data-Attribute: channels

              Link:
              <https://go.urbanairship.com/api/channels/?start=1234&limit=100>;
              rel=next


              {
                 "ok": true,
                 "next_page": "https://go.urbanairship.com/api/channels?start=07AAFE44CD82C2F4E3FBAB8962A95B95F90A54857FB8532A155DE3510B481C13&limit=2",
                 "channels": [
                    {
                       "channel_id": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5",
                       "device_type": "android",
                       "push_address": "FE66489F304DC75B8D6E8200DFF8A456E8DAEACEC428B427E9518741C92C6660",
                       "opt_in": true,
                       "installed": true,
                       "background": true,
                       "created": "2020-03-06T18:52:59",
                       "last_registration": "2020-10-07T21:28:35",
                       "named_user_id": "some_id_that_maps_to_your_systems",
                       "alias": "null",
                       "tags": [
                          "tag1",
                          "tag2"
                       ],
                       "tag_groups": {
                          "tag_group_1": ["tag1", "tag2"],
                          "tag_group_2": ["tag1", "tag2"]
                       },
                       "device_attributes": {
                           "ua_device_os": "10",
                           "ua_country": "US",
                           "ua_device_model": "SM-G973U",
                           "ua_local_tz": "America/Los_Angeles",
                           "ua_app_version": "2020-02-01T002322-goat",
                           "ua_location_settings": "true",
                           "ua_language": "en",
                           "ua_sdk_version": "12.2.0",
                           "ua_carrier": "Verizon "
                        },
                        "attributes": {
                           "first_name": "Cool",
                           "last_name": "Person",
                           "birthdate": "1983-03-15T00:00:00",
                        }
                    },
                    {
                       "channel_id": "bd36e8c7-5a73-47c0-9716-99fd3d4197d5",
                       "device_type": "ios",
                       "push_address": null,
                       "opt_in": false,
                       "installed": true,
                       "background": true,
                       "created": "2020-03-06T18:52:59",
                       "last_registration": "2020-10-07T21:28:35",
                       "named_user_id": "some_id_that_maps_to_your_systems",
                       "alias": "null",
                       "tags": [
                          "tag1",
                          "tag2"
                       ],
                       "tag_groups": {
                          "tag_group_1": ["tag1", "tag2"],
                          "tag_group_2": ["tag1", "tag2"]
                       },
                       "ios": {
                          "badge": 0,
                          "quiettime": {
                             "start": null,
                             "end": null
                          },
                          "tz": null
                       }
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel" : {
                    "device_type": "ios",
                    "opt_in": true,
                    "background": true,
                    "push_address": "FFFF",
                    "alias": "xxxx",
                    "set_tags": true,
                    "tags": ["asdf"],
                    "ios": {
                       "badge": 0,
                       "quiettime": {
                          "start": "22:00",
                          "end": "06:00"
                       },
                       "tz": "America/Los_Angeles"
                    }
                 },
                 "identity_hints": {
                    "user_id": "eDAXv7aQTQaAaUHOXuePLQ",
                    "apid": "df6a6b50-9843-0304-d5a5-743f246a4946"
                 },
                 "properties": {
                    "promotion_id": "64a03385-52ae-4217-873d-db791ff64225",
                    "loyalty_code": "eDAXv7aQTQaAaUHOXuePLQ"
                 }
              }
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Type: application/json

              Location:
              https://device-api.urbanairship.com/api/channels/df6a6b50-9843-0304-d5a5-743f246a4946


              {
                 "ok": true,
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/attributes:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/attributes HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                     "android_channel": ["13863b3c-f860-4bbf-a9f1-4d785379b8a2"]
                  },
                  "attributes": [
                     {
                           "action": "set",
                           "key": "major_league",
                           "value": "sf_giants"
                     },
                     {
                           "action": "remove",
                           "key": "minor_league"
                     },
                     {
                           "action": "set",
                           "key": "position",
                           "value": "LF"
                     },
                     {
                           "action": "set",
                           "key": "specialData",
                           "value": {
                                "timestamp": "1983-03-15 10:00:00",
                                "specialties": [
                                  {
                                      "specialty": {
                                          "name": "golden",
                                          "property": "small"
                                      }
                                  },
                                  {
                                      "specialty": {
                                          "name": "silver",
                                          "property": "medium"
                                      }
                                  }
                              ]
                          }
                     }
                  ]
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Attribute
              )
              import json

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              set_major_league = Attribute(
                  action="set",
                  key="major_league",
                  value="sf_giants"
              )

              remove_minor_league = Attribute(
                  action="remove",
                  key="minor_league"
              )

              set_position = Attribute(
                  action="set",
                  key="position",
                  value="LF"
              )

              specialties_string = "{" + \
                                 "    \"timestamp\": \"1983-03-15 10:00:00\"," + \
                                 "    \"specialties\": [{" + \
                                 "            \"specialty\": {" + \
                                 "                \"name\": \"golden\"," + \
                                 "                \"property\": \"small\"" + \
                                 "            }" + \
                                 "        }," + \
                                 "        {" + \
                                 "            \"specialty\": {" + \
                                 "                \"name\": \"silver\"," + \
                                 "                \"property\": \"medium\"" + \
                                 "            }" + \
                                 "        }" + \
                                 "    ]" + \
                                 "}"
              specialties_json = json.loads(specialties_string)
              specialties = Attribute(
                  action="set",
                  key="specialties",
                  value=specialties_json
              )

              modifications = Attribute.ModifyAttributes(
                  client=client,
                  attributes=[set_major_league,
                             remove_minor_league,
                             set_position],
                  channel="13863b3c-f860-4bbf-a9f1-4d785379b8a2"
              )

              modifications.send()
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Attribute setMajorLeague = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("major_league")
                      .setValue("sf_giants")
                      .build();

              Attribute removeMinorLeague = Attribute.newBuilder()
                      .setAction(AttributeAction.REMOVE)
                      .setKey("minor_league")
                      .build();

              Attribute setPosition = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("position")
                      .setValue("LF")
                      .build();

              String specialtiesStr = "{" +
                                      "    \"timestamp\": \"1983-03-15 10:00:00\"," +
                                      "    \"specialties\": [{" +
                                      "            \"specialty\": {" +
                                      "                \"name\": \"golden\"," +
                                      "                \"property\": \"small\"" +
                                      "            }" +
                                      "        }," +
                                      "        {" +
                                      "            \"specialty\": {" +
                                      "                \"name\": \"silver\"," +
                                      "                \"property\": \"medium\"" +
                                      "            }" +
                                      "        }" +
                                      "    ]" +
                                      "}";
              JSONObject specialtiesJson = new JSONObject(specialtiesStr);

              Attribute setSpecialties = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("specialties")
                      .setValue(specialtiesJson)
                      .build();

              ChannelAttributesPayload payload =
              ChannelAttributesPayload.newBuilder()
                      .addAttribute(setMajorLeague)
                      .addAttribute(removeMinorLeague)
                      .addAttribute(setPosition)
                      .setAudience(AttributeAudience.newBuilder()
                              .addDeviceId(AttributeAudienceType.ANDROID_CHANNEL, "13863b3c-f860-4bbf-a9f1-4d785379b8a2")
                              .build())
                      .build();

              ChannelAttributesRequest request =
              ChannelAttributesRequest.newRequest(payload);

              Response<ChannelAttributesResponse> response =
              client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_info = UA::ChannelInfo.new(client: airship)

              channel_info.audience = {"android_channel":
              '13863b3c-f860-4bbf-a9f1-4d785379b8a2'}

              channel_info.attributes =  {
                  "action": "set",
                  "key": "major_league",
                  "value": "sf_giants"
              }

              channel_info.set_attributes
        showMissingLanguagePlaceholders: true
      - description: Example request with dates and numbers
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/attributes HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                     "android_channel": ["13863b3c-f860-4bbf-a9f1-4d785379b8a2"]
                  },
                  "attributes": [
                     {
                           "action": "set",
                           "key": "birthday",
                           "value": "1983-03-15 10:00:00"
                     },
                     {
                           "action": "set",
                           "key": "fav_number",
                           "value": 42
                     },
                     {
                           "action": "remove",
                           "key": "another_attribute"
                     }
                  ]
              }
  '/api/channels/create/open/{open_platform_name}':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/create/open/rcs HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                    "bulk_id" : "d7953e2c-cb8d-4498-89d4-7ae2e0427841"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/create/{platform_name}':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/create/sms HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                    "bulk_id" : "d7953e2c-cb8d-4498-89d4-7ae2e0427841",
                    "override" : true
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/email:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "channel" : {
                      "type": "email",
                      "commercial_opted_in": "2020-10-28T10:34:22",
                      "open_tracking_opted_in": "2022-12-11T00:00:00",
                      "click_tracking_opted_in": "2022-12-11T00:00:00",
                      "address": "name@example.com",
                      "timezone" : "America/Los_Angeles",
                      "locale_country" : "US",
                      "locale_language" : "en"
                  },
                  "opt_in_mode" : "classic",
                  "properties" : {
                      "interests" : "newsletter"
                  },
                  "tags": {
                      "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                      "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                      "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                  },
                  "attributes": {
                      "my_fav_attribute1": "attribute1",
                      "my_fav_attribute2": "attribute2"
                  }
               }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              RegisterEmailChannel emailChannel =
              RegisterEmailChannel.newBuilder()
                      .setAddress("name@example.com")
                      .setEmailOptInLevel(OptInLevel.EMAIL_COMMERCIAL_OPTED_IN, "2020-10-28T10:34:22")
                      .setEmailOptInMode(OptInMode.CLASSIC)
                      .addProperty("interests","newletter")
                      .build();

              RegisterEmailChannelRequest request =
              RegisterEmailChannelRequest.newRequest(emailChannel);

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, Email
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              email = Email(
                  client=client,
                  address='name@example.com',
                  commercial_opted_in='2020-10-28T10:34:22',
                  timezone='America/Los_Angeles',
                  locale_country='US',
                  locale_language='en'
              )
              response = email.register()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.type = 'email'

              email_channel.commercial_opted_in = '2020-10-28T10:34:22'

              email_channel.address = 'name@example.com'

              email_channel.timezone = 'America/Los_Angeles'

              email_channel.locale_country = 'US'

              email_channel.locale_language = 'en'

              email_channel.register
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/channels/251d3318-b3cb-4e9f-876a-ea3bfa6e47bd

              Content-Type: application/json


              {
                  "ok": true,
                  "channel_id": "251d3318-b3cb-4e9f-876a-ea3bfa6e47bd",
                  "attributes": {"ok": true},
                  "tags": {"ok": true}
              }
        showMissingLanguagePlaceholders: true
  /api/channels/email/custom-unsubscribe:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/channels/email/custom-unsubscribe?ua_redirect=https://example.com/success.html&ua_unsubscribe_token=eyJhcHBfa2V5IjoiVmwwd3lHOGtTeUN5T1VXOThXajR4ZyIsImNhbXBhaWducyI6W10sInB1c2hfaWQiOiJlY2U0MDliMC0yNzYyLTExZWUtYjE4Ny0wMjQyNDkzZjM2MTkiLCJtZXNzYWdlX3R5cGUiOiJjb21tZXJjaWFsIiwiY2hhbm5lbF9pZCI6Ik9IWWdxTDJfU3FHMTRQZWlfWjV2QkEifQ%3D%3D
              HTTP/1.1

              Accept: */*
          - lang: HTTP
            source: |
              HTTP/1.1 302 Found
              Location: https://example.com/success.html
        showMissingLanguagePlaceholders: false
  /api/channels/email/opt-in:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/channels/email/opt-in?app_key=ShwzPCCPS6CMlAZTMmMReQ&channel_id=c4D5tjvkNTzivY5ZCUhaBLQ&message_type=commercial&redirect=https%3A%2F%2Fdomain.example
              HTTP/1.1
          - lang: HTTP
            source: |
              HTTP/1.1 302 Found
              Location: https://domain.example
        showMissingLanguagePlaceholders: false
  '/api/channels/email/replace/{channel_id}':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              POST
              /api/channels/email/replace/9c36e8c7-5a73-47c0-9716-99fd3d4197d5
              HTTP/1.1

              Authorization: Bearer <authorization token>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                 "channel" : {
                    "type": "email",
                    "commercial_opted_in": "2022-02-13T11:58:59",
                    "address": "name@example.com",
                    "timezone" : "America/Los_Angeles",
                    "locale_country" : "US",
                    "locale_language" : "en"
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              RegisterEmailChannel emailChannel =
              RegisterEmailChannel.newBuilder()
                      .setAddress("name@example.com")
                      .setEmailOptInLevel(OptInLevel.EMAIL_COMMERCIAL_OPTED_IN, "2022-02-13T11:58:59")
                      .setTimeZone("America/Los_Angeles")
                      .setLocaleCountry("US")
                      .setLocaleLanguage("en")
                      .build();

              ReplaceEmailChannelRequest request =
              ReplaceEmailChannelRequest.newRequest("9c36e8c7-5a73-47c0-9716-99fd3d4197d5",
              emailChannel);

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.channel_id = '251d3318-b3cb-4e9f-876a-ea3bfa6e47bd'

              email_channel.address = 'tommy@example.com'

              email_channel.type = 'email'

              email_channel.commercial_opted_in = '2020-10-28T10:34:22'

              email_channel.replace
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Type: application/json

              Location:
              https://go.urbanairship.com/api/channels/251d3318-b3cb-4e9f-876a-ea3bfa6e47bd


              {
                  "ok": true,
                  "channel_id": "251d3318-b3cb-4e9f-876a-ea3bfa6e47bd"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/email/suppress:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email/suppress HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "address": "name@example.com",
                  "reason": "spam_complaint"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SuppressEmailChannelRequest request =
              SuppressEmailChannelRequest.newRequest("name@example.com","reason");

              Response<GenericResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/email/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email/tags HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "audience": {
                    "email_address": "name@example.com"
                 },
                 "add": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                 }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              EmailTagRequest request = EmailTagRequest.newRequest();
              emailTagRequest.addEmailChannel("name@example.com")
                      .addTags("my_fav_tag_group1", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group2", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group3", ImmutableSet.of("tag1", "tag2", "tag3"));

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, EmailTags
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              # replaces all existing tags on an email channel
              email_tags = EmailTags(airship=client,
                                        address='name@example.com')
              email_tags.set(group='my_tag_group',
                            tags=['one', 'two', 'three'])
              email_tags.send()

              # adds and removes tags from an email channel
              email_tags = EmailTags(airship=client,
                                        address='name@example.com')
              email_tags.remove(group='my_tag_group',
                                tags=['one', 'two', 'three'])
              email_tags.add(group='my_tag_group',
                            tags=['some', 'new', 'tags'])
              email_tags.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_tags = UA::EmailTags.new(client: airship)

              #set an audience

              email_tags.set_audience(email_address: 'name@example.com')

              #add a tag

              email_tags.add(group_name: 'my_fav_tag_group1', tags: 'tag2')

              #remove a tag

              email_tags.remove(group_name: 'my_fav_tag_group1', tags: 'tag1')

              email_tags.send_request
        showMissingLanguagePlaceholders: true
  /api/channels/email/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email/uninstall HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "email_address": "name@example.com"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              UninstallEmailChannel uninstallEmailChannel =
              UninstallEmailChannel.newBuilder()
                      .setEmailAddress("name@example.com")
                      .build();

              UninstallEmailChannelRequest request =
              UninstallEmailChannelRequest.newRequest(uninstallEmailChannel);

              Response<EmailChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, Email
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )
              email = Email(airship=client,
                              address='name@example.com')
              resp = email.uninstall()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.address = 'name@example.com'

              email_channel.uninstall
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/email/unsubscribe:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/channels/email/unsubscribe/?app_key=Vl0wyG8kSyCyOUW98Wj4xg&channel_id=cXAdAfloQzeDdvMPnM3KKA&push_id=8a90b60f-f836-4ec6-82a4-05c3915b1c40&message_type=commercial&redirect=http%3A%2F%2Funsubscribe.urbanairship.com%2Femail%2Fsuccess.html&campaigns=shoes&campaigns=fall&group_id=79a122fc-48e2-4369-843f-a0973fd52d78
              HTTP/1.1

              Accept: */*
          - lang: HTTP
            source: |
              HTTP/1.1 302 Found
              Location: http://unsubscribe.urbanairship.com/email/success.html
        showMissingLanguagePlaceholders: false
  /api/channels/email/unsuppress:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/email/unsuppress HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "address": "name@example.com"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              UnsuppressEmailChannelRequest request =
              UnsuppressEmailChannelRequest.newRequest("name@example.com");

              Response<GenericResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/email/{email}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels/email/name%40example.com HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();
                      
              ChannelRequest channelRequest =
              ChannelRequest.newEmailLookupRequest("name@example.com");

              Response<ChannelResponse> response =
              client.execute(channelRequest);
          - lang: python
            source: >
              from urbanairship import (
                  BearerTokenClient, Email
              )


              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )


              response = Email.lookup(airship=client,
              address='name@example.com')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.address = 'name@example.com'

              email_channel.lookup
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "01234567-890a-bcde-f012-3456789abc0",
                    "device_type": "email",
                    "installed": true,
                    "created": "2020-08-08T20:41:06",
                    "named_user_id": "some_id_that_maps_to_your_systems",
                    "email_address": "name@example.com",
                    "tag_groups": {
                       "tag_group_1": ["tag1", "tag2"],
                       "tag_group_2": ["tag1", "tag2"]
                    },
                    "address": null,
                    "opt_in": true,
                    "commercial_opted_in": "2020-10-28T10:34:22",
                    "commercial_opted_out": "2020-06-03T09:15:00",
                    "transactional_opted_in": "2020-10-28T10:34:22",
                    "open_tracking_opted_in": "2022-12-11T00:00:00",
                    "click_tracking_opted_in": "2022-12-11T00:00:00",
                    "open_tracking_opted_out": "2022-12-12T00:00:00",
                    "click_tracking_opted_out": "2022-12-12T00:00:00",
                    "last_registration": "2020-05-01T18:00:27"
                 }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example update email address
        examples:
          - lang: HTTP
            source: >
              PUT /api/channels/email/251d3318-b3cb-4e9f-876a-ea3bfa6e47bd
              HTTP/1.1

              Authorization: Bearer <authorization token>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json

               {
                   "channel" : {
                      "device_type": "email",
                      "address": "tommy@example.com",
                      "commercial_opted_in": "2020-10-28T10:34:22"
                   }
                }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();
                      
              UpdateEmailChannel updateEmailChannel =
              UpdateEmailChannel.newBuilder()
                      .setAddress("name@example.com")
                      .setEmailOptInLevel(OptInLevel.EMAIL_COMMERCIAL_OPTED_IN, "2021-10-28T10:34:22")
                      .setEmailOptInLevel(OptInLevel.EMAIL_TRANSACTIONAL_OPTED_IN,"2021-10-28T10:34:22")
                      .build();

              UpdateEmailChannelRequest updateEmailChannelRequest =
              UpdateEmailChannelRequest.newRequest("6c8f1d3a-64d8-4ef9-b7a1-9b128013327e",
              updateEmailChannel);

              Response<EmailChannelResponse> response =
              client.execute(updateEmailChannelRequest);
          - lang: python
            source: >
              from urbanairship import (
                  BearerTokenClient, Email
              )


              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )


              email = Email(
                  client=client,
                  address='tommy@example.com',
                  commercial_opted_in='2020-10-28T10:34:22'
              )


              response =
              email.update(channel_id='251d3318-b3cb-4e9f-876a-ea3bfa6e47bd')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_channel = UA::Email.new(client: airship)

              email_channel.channel_id = '251d3318-b3cb-4e9f-876a-ea3bfa6e47bd'

              email_channel.type = 'email'

              email_channel.commercial_opted_in = '2020-10-28T10:34:22'

              email_channel.update
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Content-Type: application/vnd.urbanairship+json; version=3

              Location:
              https://go.urbanairship.com/api/channels/251d3318-b3cb-4e9f-876a-ea3bfa6e47bd


              {
                  "ok": true,
                  "channel_id": "251d3318-b3cb-4e9f-876a-ea3bfa6e47bd"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/import:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/import/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                 {
                    "device_type": "ios",

                    "opt_in": true,
                    "push_address": "FFFF",

                    "ios": {
                       "badge": 0,
                       "quiettime": {
                          "start": "22:00",
                          "end": "06:00"
                       },
                       "tz": "America/Los_Angeles"
                    },

                    "alias": "xxxx",

                    "set_tags": true,
                    "tags": ["asdf"]
                 }
              ]
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/open:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/open HTTP/1.1
              Authorization: Basic <master secret authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel": {
                    "type": "open",
                    "opt_in": true,
                    "address": "Number Four",
                    "tags": [
                       "toaster",
                       "caprica"
                    ],
                    "timezone": "America/Los_Angeles",
                    "locale_country": "US",
                    "locale_language": "en",
                    "open": {
                       "open_platform_name": "cylon",
                       "identifiers": {
                          "model": "4"
                       }
                    }
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              OpenChannel openChannel = OpenChannel.newBuilder()
                      .setOpenPlatformName("cylon")
                      .setOldAddress("Number Four")
                      .addIdentifier("model", "4")
                      .build();

              Channel channel = Channel.newBuilder()
                      .setOpenChannel(openChannel)
                      .setChannelType(ChannelType.OPEN)
                      .setOptIn(true)
                      .setAddress("Number Four")
                      .setTags(true)
                      .addTag("toaster")
                      .setTimeZone("America/Los_Angeles")
                      .setLocaleCountry("US")
                      .setLocaleLanguage("en")
                      .build();

              OpenChannelPayload payload = new OpenChannelPayload(channel);

              OpenChannelRequest request =
              OpenChannelRequest.newRequest(payload);

              Response<OpenChannelResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, OpenChannel
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              channel = OpenChannel(airship=client)
              channel.address = 'Number Four'
              channel.open_platform = 'cylon'
              channel.opt_in = True
              channel.tags = ['toaster', 'caprica']
              channel.identifiers = {'model': '4'}
              response = channel.create()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              open_channel = UA::OpenChannel.new(client: airship)

              open_channel.opt_in = true

              open_channel.address = 'Number Four'

              open_channel.open_platform = 'cylon'

              open_channel.create()
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Location:
              https://go.urbanairship.com/api/channels/df6a6b50-9843-0304-d5a5-743f246a4946

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                  "ok": true,
                  "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946"
              }
        showMissingLanguagePlaceholders: true
  /api/channels/open/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/open/tags HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                "audience": {
                    "address": "Number Four",
                    "open_platform_name": "cylon"
                },
                "add": {
                  "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                  "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                  "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                }
               }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              OpenChannelTagRequest openChannelTagRequest = 
              OpenChannelTagRequest.newRequest()
                      .addOpenChannel("Number Four","cyclon")
                      .addTags("CRM_Delux", Set.of("tag1","tag2"))
                      .removeTags("CRM_Delux",  Set.of("tag3","tag4"));
              Response<GenericResponse> response =
              client.execute(openChannelTagRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, OpenChannel
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              channel = OpenChannel(airship=client)
              channel.address = 'Number Four'
              channel.open_platform = 'cylon'
              channel.tags = ['tag1', 'tag2', 'tag3']
              response = channel.update()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              open_channel = UA::OpenChannel.new(client: airship)

              open_channel.opt_in = true

              open_channel.address = 'Number Four'

              open_channel.open_platform = 'cylon'

              open_channel.channel_id = 'df6a6b50-9843-0304-d5a5-743f246a4946'

              open_channel.tags = ['tag1', 'tag2', 'tag3']

              open_channel.update(set_tags: true)
          - lang: HTTP
            source: |
              HTTP/1.1 200 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok":true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/open/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/open/uninstall HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "address": "Number Four",
                "open_platform_name": "cylon"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              OpenChannelUninstallRequest openChannelUninstallRequest =
              OpenChannelUninstallRequest.newRequest("Number Four","cyclon");

              Response<GenericResponse> response =
              client.execute(openChannelUninstallRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, OpenChannel
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              channel = OpenChannel(airship=client)
              channel.address = 'Number Four'
              channel.open_platform = 'cylon'
              response = channel.uninstall()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              cu = UA::OpenChannelUninstall.new(client: airship)

              cu.uninstall(address: 'Number Four', open_platform: 'cylon')
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/remove_push_address:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/remove_push_address HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                 "device_type": "ios"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/resend:
    post:
      - description: Example resend double opt-in message for SMS channel
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/resend HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "channel_type": "sms",
                  "channel_id": "c8d58c64-7eb5-40ad-ad51-d39e05335c48"
               }
        showMissingLanguagePlaceholders: true
      - description: Example resend double opt-in message for SMS with sender and msisdn
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/resend HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "channel_type": "sms",
                  "sender": "1234",
                  "msisdn": "15035551234"
               }
        showMissingLanguagePlaceholders: true
      - description: Example resend double opt-in message for email channel
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/resend HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "channel_type": "email",
                  "channel_id": "c8d58c64-7eb5-40ad-ad51-d39e05335c48"
               }
        showMissingLanguagePlaceholders: true
      - description: Example resend double opt-in message for email address
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/resend HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

               {
                  "channel_type": "email",
                  "email_address": "abc@example.com"
               }
        showMissingLanguagePlaceholders: true
      - description: Successful response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "ok": true,
              }
      - description: Error response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 400
              Content-Type: application/json

              {
                  "ok": false,
                  "error": "Could not parse request body.",
                  "error_code": 40000
              }
  '/api/channels/sdk/batch/{channel_id}':
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              PUT
              /api/channels/sdk/batch/df6a6b50-9843-0304-d5a5-743f246a4946?platform=ios
              HTTP/1.1

              Authorization: Basic <application authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                 "tags": {
                    "add": {
                       "group1": ["tag1"],
                       "group2": ["tag3"]
                    },
                    "set": {
                       "group2": ["tag4"]
                    }
                 },
                 "attributes": [
                    {
                       "action": "remove",
                       "key": "minor_league"
                    },
                    {
                       "action": "set",
                       "key": "position",
                       "value": "LF"
                    }
                 ],
                 "subscription_lists": [
                    {
                       "action": "subscribe",
                       "list_id": "intriguing_ideas"
                    },
                    {
                       "action": "unsubscribe",
                       "list_id": "animal_facts"
                    }
                 ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 Ok
              Content-Type: application/json

              {
                 "ok": true,
                 "tag_warnings": ["The following tag groups do not exist: random-tag-group"],
                 "attribute_warnings": ["Unable to process attribute change for attribute: 'random-attribute'. Attribute not found."]
              }
        showMissingLanguagePlaceholders: true
  /api/channels/sms:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn" : "15035556789",
                "sender": "12345",
                "opted_in": "2020-02-13T11:58:59",
                "timezone": "America/Los_Angeles",
                "locale_country": "US",
                "locale_language": "en",
                "tags": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                },
                "attributes": {
                    "my_fav_attribute1": "attribute1",
                    "my_fav_attribute2": "attribute2"
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SmsRegistrationRequest request = SmsRegistrationRequest
                      .newRegistrationRequest("12345", "15035556789", DateTime.parse("2020-02-13T11:58:59Z"));

              Response<SmsRegistrationResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, Sms
              )
              from datetime import datetime

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              sms_channel = Sms(
                  client=client,
                  sender="12345",
                  msisdn="15035556789",
                  opted_in=datetime.fromisoformat("2020-02-13T11:58:59"),
                  locale_country="US",
                  locale_language="en",
                  timezone="America/Los_Angeles"
              )

              response = sms_channel.register()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.opted_in = '2020-02-13T11:58:59'

              sms_channel.register
        showMissingLanguagePlaceholders: true
      - description: Response (With 'opted_in')
        examples:
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/channels/7c5d7328-9bb4-4ff7-86b0-96a5f1da5868

              Content-Type: application/json


              {
                "ok": true,
                "operation_id": "62077236-d032-11e9-af71-ab156113d166",
                "channel_id": "7c5d7328-9bb4-4ff7-86b0-96a5f1da5868",
                "attributes": {"ok": true},
                "tags": {"ok": true}
              }
      - description: Response (Without 'opted_in')
        examples:
          - lang: HTTP
            source: >
              HTTP/1.1 202 Accepted

              Content-Type: application/json

              Location:
              https://go.urbanairship.com/api/channels/79fbe330-d033-11e9-adfb-df10b89c5e04


              {
                "ok": true,
                "operation_id": "62077236-d032-11e9-af71-ab156113d166",
                "push_id": "26350f60-d033-11e9-80e3-33def0e528d1",
                "channel_id": "79fbe330-d033-11e9-adfb-df10b89c5e04",
                "status": "pending",
                "attributes": {"ok": true},
                "tags": {"ok": true}
              }
      - description: Response (Project not configured with sender)
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 400 Bad Request
              Content-Type: application/json

              {
                  "ok": false,
                  "errors": "Unable to retrieve details for sender 12345 with app_key <application key>"
              }
  /api/channels/sms/format:
    post:
      - description: Example with prefix
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/format HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn": "1 (503) 555-1234",
                "prefix": "+1"
              }
        showMissingLanguagePlaceholders: true
      - description: Example with sender
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/format HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn": "503.555.1234",
                "sender": "1234"
              }
        showMissingLanguagePlaceholders: true
      - description: Successful response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true,
                "valid": true,
                "msisdn": "+15035551234"
              }
  /api/channels/sms/opt-out:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/opt-out HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "sender": "12345",
                  "msisdn": "15035556789"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SmsRegistrationRequest request = SmsRegistrationRequest
                      .newOptOutRequest("12345", "15035556789");

              Response<SmsRegistrationResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Sms
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              sms = Sms(
                  client=client,
                  sender='12345',
                  msisdn='15035556789'
              )
              response = sms.opt_out()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.opt_out
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/sms/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/tags HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "audience": {
                  "sender": "12345",
                  "msisdn": "15035556789"
                 },
                 "add": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/channels/sms/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/uninstall HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "sender": "12345",
                  "msisdn": "15035556789"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SmsRegistrationRequest request = SmsRegistrationRequest
                      .newUninstallRequest("12345", "15035556789");

              Response<SmsRegistrationResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Sms
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              sms = Sms(
                  client=client,
                  sender='12345',
                  msisdn='15035556789'
              )
              response = sms.uninstall()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.uninstall
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/channels/sms/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/sms/validate HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn": "15035551234",
                "sender": "1234"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true,
                "valid": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/sms/{channel_id}':
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/channels/sms/{channel_id} HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "msisdn": "15035556789",
                "sender": "12345",
                "opted_in": "2020-02-13T11:58:59",
                "timezone": "America/Los_Angeles",
                "locale_country": "US",
                "locale_language": "en"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              UpdateSmsChannel updateSmsChannel = UpdateSmsChannel.newBuilder()
                      .setMsisdn("13609048615")
                      .setSender("17372004196")
                      .setOptedIn(DateTime.parse("2021-10-11T02:03:03"))
                      .setLocaleCountry("US")
                      .setLocaleLanguage("en")
                      .setTimeZone("America/Los_Angeles")
                      .build();

              UpdateSmsChannelRequest updateSmsChannelRequest =
              UpdateSmsChannelRequest.newRequest("308303cf-9c10-4d71-9bc2-d9f3a671ed0c",
              updateSmsChannel);


              Response<GenericResponse> response =
              client.execute(updateSmsChannelRequest);
          - lang: python
            source: >
              from urbanairship import (
                  BearerTokenClient, Sms
              )

              from datetime import datetime


              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )


              sms_channel = Sms(
                  client=client,
                  sender="12345",
                  msisdn="15035556789",
                  opted_in=datetime.fromisoformat("2021-02-13T11:58:59"),
                  locale_country="US",
                  locale_language="en",
                  timezone="America/Los_Angeles"
              )


              # Update properties

              sms_channel.locale_country = "FR"

              sms_channel.opted_in =
              datetime.fromisoformat("2020-02-13T11:58:59")


              response = sms_channel.update()
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true,
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/sms/{msisdn}/{sender}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels/sms/15035556789/12345 HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelRequest channelRequest =
              ChannelRequest.newSmsLookupRequest("15035556789","12345");

              Response<ChannelResponse> response =
              client.execute(channelRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Sms
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              sms = Sms(
                  client=client,
                  sender='12345',
                  msisdn='15035556789'
              )
              channel_info = sms.lookup()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              sms_channel = UA::Sms.new(client: airship)

              sms_channel.msisdn = '15035556789'

              sms_channel.sender = '12345'

              sms_channel.lookup
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: channel
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "84e36d69-873b-4ffe-81cd-e74c9f002057",
                    "device_type": "sms",
                    "installed": true,
                    "push_address": null,
                    "named_user_id": null,
                    "alias": null,
                    "tags": [],
                    "tag_groups": {
                       "ua_channel_type": [
                          "sms"
                       ],
                       "ua_sender_id": [
                          "12345"
                       ],
                       "ua_opt_in": [
                          "true"
                       ]
                    },
                    "created": "2020-04-27T22:06:21",
                    "opt_in": true,
                    "opt_in_date": "2022-07-07T03:23:13",
                    "msisdn": "150355551234",
                    "last_registration": "2020-05-14T19:51:38"
                 }
              }
        showMissingLanguagePlaceholders: true
      - description: Example opt_out_date
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: channel
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "84e36d69-873b-4ffe-81cd-e74c9f002057",
                    "device_type": "sms",
                    "installed": true,
                    "push_address": null,
                    "named_user_id": null,
                    "alias": null,
                    "tags": [],
                    "tag_groups": {
                       "ua_channel_type": [
                          "sms"
                       ],
                       "ua_sender_id": [
                          "12345"
                       ],
                       "ua_opt_in": [
                          "true"
                       ]
                    },
                    "created": "2020-04-27T22:06:21",
                    "opt_in": false,
                    "opt_in_date": "2022-07-07T03:23:13",
                    "opt_out_date": "2022-07-08T03:23:13",
                    "msisdn": "150355551234",
                    "last_registration": "2020-05-14T19:51:38"
                 }
              }
  /api/channels/subscription_lists:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/subscription_lists HTTP/1.1
              Authorization: Basic <App Auth>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "subscription_lists": [
                    {
                       "action":"subscribe",
                       "list_id":"intriguing_ideas"
                    },
                    {
                       "action":"unsubscribe",
                       "list_id":"animal_facts"
                    }
                 ],
                 "audience": {
                    "ios_channel": [
                       "b8f9b663-0a3b-cf45-587a-be880946e881"
                    ],
                    "email_address": [
                       "homer@example.com",
                       "nick@example.com"
                    ]
                 }
              }
          - lang: python
            source: |
              import urbanairship as ua

              client = ua.BasicAuthClient('<app key>', '<master secret>')

              subscription_list = ua.SubscriptionList(client)

              subscription_list.subscribe(list_id="intriguing_ideas",
                                          audience=ua.email("nick@example.com")
                                         )

              subscription_list.unsubscribe(list_id="animal_facts", 
                                            audience=ua.ios_channel(
                                               "b8f9b663-0a3b-cf45-587a-be880946e881"
                                               )
                                            )
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

               SubscriptionList subscriptionList = SubscriptionList.newBuilder()
                     .setListId("big_deals")
                     .setAction(SubscriptionListAction.SUBSCRIBE)
                     .build();

               SubscriptionListPayload payload = SubscriptionListPayload.newBuilder()
                     .addSubscriptionList(subscriptionList)
                     .setAudience(ChannelAudience.newBuilder()
                              .addDeviceId(ChannelAudienceType.ANDROID_CHANNEL, "002b4104-c94f-418d-be86-ead3214b3244").build())
                     .build();

               SubscriptionListRequest request  = SubscriptionListRequest.newRequest(payload);
               Response<SubscriptionListResponse> response = client.execute(request);
        showMissingLanguagePlaceholders: true
  /api/channels/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/tags HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "audience": {
                    "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881",
                    "android_channel": "13863b3c-f860-4bbf-a9f1-4d785379b8a2"
                 },
                 "add": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                 }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelTagRequest request = ChannelTagRequest.newRequest()
                      .addIOSChannel("b8f9b663-0a3b-cf45-587a-be880946e881")
                      .addAndroidChannel("13863b3c-f860-4bbf-a9f1-4d785379b8a2")
                      .addTags("my_fav_tag_group1", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group2", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("my_fav_tag_group3", ImmutableSet.of("tag1", "tag2", "tag3"));

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              import urbanairship as ua

              client = ua.BasicAuthClient('<app key>', '<master secret>')
              channel_tags = ua.devices.ChannelTags(client)
              ios_audience = ['b8f9b663-0a3b-cf45-587a-be880946e881']
              android_audience = ['13863b3c-f860-4bbf-a9f1-4d785379b8a2']
              channel_tags.set_audience(ios_audience, android_audience
              )
              channel_tags.add('my_fav_tag_group1', ['tag1', 'tag2', 'tag3'])
              channel_tags.remove('my_fav_tag_group2', 'tag4')
              channel_tags.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_tags = UA::ChannelTags.new(client: airship)

              ios_audience = 'b8f9b663-0a3b-cf45-587a-be880946e881'

              android_audience = '13863b3c-f860-4bbf-a9f1-4d785379b8a2'

              channel_tags.set_audience(
                  ios: ios_audience,
                  android: android_audience
              )

              channel_tags.add(group_name: 'my_fav_tag_group1', tags: ['tag1',
              'tag2', 'tag3'])

              channel_tags.remove(group_name: 'my_fav_tag_group2', tags: 'tag4')

              channel_tags.send_request
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "warnings": ["The following tag groups do not exist: my_fav_tag_group2", "The following tag groups are deactivated: my_fav_tag_group3"]
              }
        showMissingLanguagePlaceholders: true
  /api/channels/uninstall:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/channels/uninstall HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                 {
                    "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                    "device_type": "ios"
                 },
                 {
                    "channel_id": "13863b3c-f860-4bbf-a9f1-4d785379b8a2",
                    "device_type": "android"
                 }
              ]
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ChannelUninstall
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              channel_uninstall = ChannelUninstall(client)
              channel = {
                  "channel_id": 'b8f9b663-0a3b-cf45-587a-be880946e881',
                  "device_type": "ios"
              }

              channel_uninstall.uninstall(channel)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              cu = UA::ChannelUninstall.new(client: airship)


              chans = [{"channel_id" => "b8f9b663-0a3b-cf45-587a-be880946e881",
                        "device_type" => "ios"},
                       {"channel_id" => "13863b3c-f860-4bbf-a9f1-4d785379b8a2",
                        "device_type" => "android"}]

              cu.uninstall(channels: chans)
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

               Set<ChannelUninstallDevice> channels = ImmutableSet.of(
                     new ChannelUninstallDevice("00f74677-4616-4958-bd91-30e949814d2c", ChannelUninstallDeviceType.IOS),
                     new ChannelUninstallDevice("007f7156-9b82-4cb6-a2f9-e2c8e7fce13d", ChannelUninstallDeviceType.ANDROID)
               );

               ChannelUninstallPayload payload = ChannelUninstallPayload.newBuilder()
                     .setChannels(channels)
                     .build();

               ChannelUninstallRequest request = ChannelUninstallRequest.newRequest(payload);
               Response<ChannelUninstallResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/{channel_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/channels/9c36e8c7-5a73-47c0-9716-99fd3d4197d5 HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ChannelRequest request =
              ChannelRequest.newRequest("9c36e8c7-5a73-47c0-9716-99fd3d4197d5");

              Response<ChannelResponse> response = client.execute(request);

              ChannelView channel =
              response.getBody().get().getChannelView().get();
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, ChannelInfo
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              channel =
              ChannelInfo(client).lookup('9c36e8c7-5a73-47c0-9716-99fd3d4197d5')

              print(channel.channel_id, channel.device_type, channel.tags,
                    channel.push_address, channel.named_user_id, channel.opt_in)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              channel_client = UA::ChannelInfo.new(client: airship)

              channel_info = channel_client.lookup(uuid:
              '9c36e8c7-5a73-47c0-9716-99fd3d4197d5')

              puts(channel_info)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Data-Attribute: channel

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5",
                    "device_type": "ios",
                    "installed": true,
                    "opt_in": false,
                    "background": true,
                    "push_address": "FE66489F304DC75B8D6E8200DFF8A456E8DAEACEC428B427E9518741C92C6660",
                    "created": "2020-08-08T20:41:06",
                    "last_registration": "2020-05-01T18:00:27",
                    "named_user_id": "some_id_that_maps_to_your_systems",
                    "alias": null,
                    "tags": [
                       "tag1",
                       "tag2"
                    ],
                    "tag_groups": {
                       "tag_group_1": ["tag1", "tag2"],
                       "tag_group_2": ["tag1", "tag2"]
                    },
                    "ios": {
                       "badge": 0,
                       "quiettime": {
                          "start": null,
                          "end": null
                       },
                       "tz": "America/Los_Angeles"
                    },
                    "open_tracking_opted_in": "2022-11-26T00:00:00",
                    "open_tracking_opted_out": "2022-12-11T00:00:00",
                    "click_tracking_opted_in": "2022-11-26T00:00:00",
                    "click_tracking_opted_out": "2022-12-11T00:00:00"
                 }
              }
        showMissingLanguagePlaceholders: true
      - description: Example open channel lookup response with all optional keys
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Data-Attribute: channel

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",
                    "type": "open",
                    "opt_in": true,
                    "address": "example@example.com",

                    "created": "2013-08-08T20:41:06",
                    "last_registration": "2014-05-01T18:00:27",

                    "named_user_id": "john_doe_123",
                    "tags": ["asdf"],

                    "tag_groups": {
                       "timezone" : ["America/Los_Angeles"],
                       "locale_country" : ["US"],
                       "locale_language" : ["en"],
                       "tag_group_1" : ["tag1", "tag2"],
                       "tag_group_2" : ["tag1", "tag2"]
                    },

                    "open" {
                       "open_platform_name": "email",
                       "identifiers": {
                          "com.example.external_id": "df6a6b50-9843-7894-1235-12aed4489489"
                       }
                    }
                 }
              }
      - description: Example open channel lookup response with only required keys
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Data-Attribute: channel

              {
                 "ok": true,
                 "channel": {
                    "channel_id": "b8f9b663-0a3b-cf45-587a-be880946e881",

                    "type": "open",
                    "opt_in": false,
                    "address": "example@example.com",

                    "created": "2013-08-08T20:41:06",
                    "last_modified": "2014-05-01T18:00:27",

                    "tags": [],
                    "tag_groups" {},

                    "open": {
                       "open_platform_name": "email"
                    }
                 }
              }
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/channels/df6a6b50-9843-0304-d5a5-743f246a4946 HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel" : {
                    "device_type": "ios",
                    "opt_in": true,
                    "background": true,
                    "push_address": "FFFF",
                    "alias": "xxxx",
                    "set_tags": true,
                    "tags": ["qwerty"],
                    "tag_changes": {
                       "add": [ "qwerty" ],
                       "remove": [ "asdf" ]
                    },
                    "ios": {
                       "badge": 0,
                       "quiettime": {
                          "start": "22:00",
                          "end": "06:00"
                       },
                       "tz": "America/Los_Angeles"
                    }
                 },
                 "identity_hints": {
                    "ua_id": "64a03385-52ae-4217-873d-db791ff64225",
                    "user_id": "eDAXv7aQTQaAaUHOXuePLQ"
                 }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/channels/{channel_id}/attributes':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              POST
              /api/channels/b8f9b663-0a3b-cf45-587a-be880946e881/attributes?platform=ios
              HTTP/1.1

              Authorization: Basic <App Auth>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                 "attributes":[
                    {
                       "action":"set",
                       "key":"email",
                       "value":"vip@example.com",
                       "timestamp":"2022-09-19 12:00:00"
                    },
                    {
                       "action":"remove",
                       "key":"number",
                       "timestamp":"2022-09-19 12:00:00"
                    },
                    {
                       "action":"set",
                       "key":"name",
                       "value":"Freddy",
                       "timestamp":"2022-09-19 12:00:00"
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  '/api/contacts/associated_types/{contact_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/contacts/associated_types/eed87e83-2f2f-4919-bcb0-8c620e0fae40
              HTTP/1.1

              Authorization: Bearer <contactJWTToken>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true,
                "channels": [
                  {
                    "type": "sms",
                    "channel_id": "a537ac78-ef4f-4f74-8536-6fd620549186",
                    "sender": "1234",
                    "msisdn": "*******3379",
                    "opt_in": true
                  },
                  {
                    "type": "email",
                    "channel_id": "463c4643-a16c-48da-9585-f2c5406f828b",
                    "email_address": "d*******r@example.com",
                    "commercial_opted_in": "2024-02-11T00:00:00"
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
  '/api/contacts/disassociate/{contact_id}':
    post:
      - description: SMS with Channel ID
        examples:
          - lang: HTTP
            source: >
              POST
              /api/contacts/disassociate/eed87e83-2f2f-4919-bcb0-8c620e0fae40
              HTTP/1.1

              Authorization: Bearer <contactJWTToken>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                "channel_type": "sms",
                "channel_id": "c8d58c64-7eb5-40ad-ad51-d39e05335c48"
              }
        showMissingLanguagePlaceholders: true
      - description: SMS with sender and msisdn
        examples:
          - lang: HTTP
            source: >
              POST
              /api/contacts/disassociate/eed87e83-2f2f-4919-bcb0-8c620e0fae40
              HTTP/1.1

              Authorization: Bearer <contactJWTToken>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                "channel_type": "sms",
                "sender": "1234",
                "msisdn": "15035551234"
              }
        showMissingLanguagePlaceholders: true
      - description: Email with email address
        examples:
          - lang: HTTP
            source: >
              POST
              /api/contacts/disassociate/eed87e83-2f2f-4919-bcb0-8c620e0fae40
              HTTP/1.1

              Authorization: Bearer <contactJWTToken>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                "channel_type": "email",
                "email_address": "abc@example.com"
              }
        showMissingLanguagePlaceholders: true
      - description: Email with email address and opt_out
        examples:
          - lang: HTTP
            source: >
              POST
              /api/contacts/disassociate/eed87e83-2f2f-4919-bcb0-8c620e0fae40
              HTTP/1.1

              Authorization: Bearer <contactJWTToken>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                "channel_type": "email",
                "email_address": "abc@example.com",
                "opt_out": true
              }
        showMissingLanguagePlaceholders: true
      - description: Example of a successful response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "ok": true,
                  "contact": "eed87e83-2f2f-4919-bcb0-8c620e0fae40",
                  "channel_id": "c8d58c64-7eb5-40ad-ad51-d39e05335c48"
              }
  /api/contacts/identify/v2:
    post:
      - description: Example identify contacts V2
        examples:
          - lang: HTTP
            source: |
              POST /api/contacts/identify/v2 HTTP/1.1
              Authorization: Bearer <sdk channel-level authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json
              X-UA-Appkey: <appkey>
              X-UA-Channel-ID: <channel id>
              X-UA-Timestamp: 2022-12-29T10:30:00Z
              X-UA-Nonce: c58fd763-928c-4155-bee9-fdba2adc15f3

              {
                "device_info": {
                  "device_type": "ios"
                },
                "action": {
                  "type": "identify",
                  "named_user_id": "my-named-user"
                }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "contact": {
                  "contact_id": "1a32e8c7-5a73-47c0-9716-99fd3d41924b",
                  "is_anonymous": true,
                  "channel_association_timestamp": "2022-12-29T10:15:30.00Z"
                }
                "token": "eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJLSHVNTE15RmVmYjdoeXR3WkV5VTF4IiwiaWF0IjoxNjAyMDY4NDIxLCJleHAiOjE2MDIwNjg0MjEsInN1YiI6InVMa2hSaktBYzVXQW1SdTFPTFZSVncifQ.kJPu3enbLJMX10xEtzlxxeum66R2ZWLs02OSVPhjomQ",
                "token_expires_in": 3600000
              }
        showMissingLanguagePlaceholders: true
  '/api/contacts/lookup/channel/{channel_id}':
    get:
      - description: |
          Example get contact ID from a Channel ID
        examples:
          - lang: HTTP
            source: >
              GET
              /api/contacts/lookup/channel/164c3a13-9c75-4ea9-be2c-1bed2c97f9c3
              HTTP/1.1

              Authorization: Basic <application or master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "contact_id": "7c24ebdd-ec06-47d4-9a56-ced8611f5b52",
                 "is_anonymous": false
              }
        showMissingLanguagePlaceholders: true
  '/api/contacts/lookup/named_user/{named_user_id}':
    get:
      - description: |
          Example get contact ID from a Named User ID
        examples:
          - lang: HTTP
            source: >
              GET
              /api/contacts/lookup/named_user/90ae282f-f56e-4037-8174-482ef7e3e5f4
              HTTP/1.1

              Authorization: Basic <application or master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "contact_id": "7c24ebdd-ec06-47d4-9a56-ced8611f5b52"
              }
        showMissingLanguagePlaceholders: true
  '/api/contacts/scoped/{contact_id}':
    post:
      - description: |
          Example scoped contact batch operations
        examples:
          - lang: HTTP
            source: >
              POST /api/contacts/scoped/77721a11-7ffa-4362-9bdb-f27ca891f9de
              HTTP/1.1

              Authorization: Basic <application or master authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                "scoped": [{
                  "scope": ["web", "email", "app"],
                  "subscription_lists": {
                    "subscribe": ["subscription_1", "subscription_2"],
                    "unsubscribe": ["subscription_3"]
                  }
                }]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/create-and-send:
    post:
      - description: Example Create and Send a message for email
        examples:
          - lang: HTTP
            source: |
              POST /api/create-and-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@example.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "ua_open_tracking_opted_in": "2022-11-02T10:35:00",
                      "ua_click_tracking_opted_in": "2022-11-02T10:36:00" 
                    },
                    {
                      "ua_address" : "ben@example.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10",
                      "ua_open_tracking_opted_out": "2022-11-02T10:35:00",
                      "ua_click_tracking_opted_out": "2022-11-02T10:36:00"
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "subject": "Welcome to the Winter Sale! ",
                    "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                    "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com",
                    "click_tracking": false,
                    "open_tracking": false
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              String htmlBodyString = "<h1>Seasons Greetings</h1><p>Check out
              our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>";

              String plaintextBodyString = "Greetings! Check out our latest
              winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]";


              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@example.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@example.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setSubject("Welcome to the Winter Sale! ")
                      .setHtmlBody(htmlBodyString)
                      .setPlaintextBody(plaintextBodyString)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              Campaigns campaign = Campaigns.newBuilder()
                      .addCategory("winter sale")
                      .addCategory("west coast")
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .setCampaigns(campaign)
                      .build();

              CreateAndSendRequest request =
              CreateAndSendRequest.newRequest(payload);

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, CreateAndSendPush, email, sms, mms, campaigns
              )


              client = BasicAuthClient(key='<app_key>',
              secret='<master_secret>')


              # Create and Send a message for email

              push = CreateAndSendPush(client)

              push.audience = {
                  "create_and_send": [
                      {
                          "ua_address": "new@example.com",
                          "ua_commercial_opted_in": "2020-11-29T10:34:22"
                      },
                      {
                          "ua_address": "ben@example.com",
                          "ua_commercial_opted_out": "2020-11-29T12:45:10"
                      },
                      {
                          "ua_address": "mary@example.com",
                          "ua_email_suppression_state": "BOUNCE"
                      }
                  ]
              }

              push.device_types = ["email"]

              push.notification = email(
                  subject="Welcome to the Winter Sale!",
                  html_body="<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                  plaintext_body="Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                  message_type="transactional",
                  sender_name="Airship",
                  sender_address="team@airship.com",
                  reply_to="no-reply@airship.com",
                  click_tracking=False,
                  open_tracking=False,
                  attachments=[
                      {"id": "0e10a6b9-725c-4f6b-9af2-9ef5b31328c0"},
                      {"id": "5503b5fe-ed69-4609-bef6-6fef0e6e428f"}
                  ]
              )

              push.campaigns = campaigns(categories=["winter sale", "west
              coast"])


              response = push.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.bypass_opt_in_level = false

              email_notification.html_body = "<h1>Seasons Greetings</h1><p>Check
              out our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>"

              email_notification.message_type = 'transactional'

              email_notification.plaintext_body = 'Greetings! Check out our
              latest winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.subject = 'Welcome to the Winter Sale!'

              override = email_notification.email_override

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@example.com",
                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                },
                {
                  "ua_address": "ben@example.com",
                  "ua_commercial_opted_in": "2020-11-29T12:45:10"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.campaigns = ["winter sale", "west coast"]

              send_it.notification = email_notification.email_override

              send_it.create_and_send
        showMissingLanguagePlaceholders: true
      - description: Example Create and Send a message for email with stored template
        examples:
          - lang: HTTP
            source: |
              POST /api/create-and-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@example.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22",
                      "name": "New Person, Esq.",
                      "location": "City, State"
                    },
                    {
                      "ua_address" : "ben@example.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10",
                      "name": "Ben Wyatt",
                      "location": "Pawnee, IN"
                    }
                  ]
                },
                "device_types": [
                    "email"
                ],
                "notification": {
                    "email": {
                      "bcc": [
                          "blind@example.com"
                      ],
                      "message_type": "commercial",
                      "reply_to": "no-reply@airship.com",
                      "sender_address": "team@airship.com",
                      "sender_name": "Airship",
                      "template": {
                          "template_id": "9335bb2a-2a45-456c-8b53-42af7898236a"
                      }
                    }
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@example.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@example.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              EmailTemplate template = EmailTemplate.newBuilder()
                      .setTemplateId("9335bb2a-2a45-456c-8b53-42af7898236a")
                      .build();

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setEmailTemplate(template)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .build();

              CreateAndSendRequest request =
              CreateAndSendRequest.newRequest(payload);

              Response<GenericResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.message_type = 'transactional'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.template_id =
              "9335bb2a-2a45-456c-8b53-42af7898236a"

              inline_template = email_notification.email_with_inline_template

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@example.com",
                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                },
                {
                  "ua_address": "ben@example.com",
                  "ua_commercial_opted_in": "2020-11-29T12:45:10"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.notification = inline_template

              send_it.create_and_send
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "67c65146-c27f-431f-b54a-83aca694fdd3",
                  "push_ids": [
                      "c0eead17-333b-4f86-8a42-9fb7be1ed627"
                  ],
                  "message_ids": [],
                  "content_urls": []
              }
        showMissingLanguagePlaceholders: true
  /api/create-and-send/validate:
    post:
      - description: Example Validate Create and Send payload
        examples:
          - lang: HTTP
            source: |
              POST /api/create-and-send/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                  "create_and_send" : [
                    {
                      "ua_address": "new@example.com",
                      "ua_commercial_opted_in": "2020-11-29T10:34:22"
                    },
                    {
                      "ua_address" : "ben@example.com",
                      "ua_commercial_opted_in": "2020-11-29T12:45:10"
                    }
                  ]
                },
                "device_types" : [ "email" ],
                "notification" : {
                  "email": {
                    "subject": "Welcome to the Winter Sale! ",
                    "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                    "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                    "message_type": "commercial",
                    "sender_name": "Airship",
                    "sender_address": "team@airship.com",
                    "reply_to": "no-reply@airship.com"
                  }
                },
                "campaigns": {
                    "categories": ["winter sale", "west coast"]
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              String htmlBodyString = "<h1>Seasons Greetings</h1><p>Check out
              our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>";

              String plaintextBodyString = "Greetings! Check out our latest
              winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]";


              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@example.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@example.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setSubject("Welcome to the Winter Sale! ")
                      .setHtmlBody(htmlBodyString)
                      .setPlaintextBody(plaintextBodyString)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              Campaigns campaign = Campaigns.newBuilder()
                      .addCategory("winter sale")
                      .addCategory("west coast")
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .setCampaigns(campaign)
                      .build();

              CreateAndSendRequest request =
              CreateAndSendRequest.newRequest(payload)
                      .setValidateOnly(true);
              Response<GenericResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.bypass_opt_in_level = false

              email_notification.html_body = "<h1>Seasons Greetings</h1><p>Check
              out our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>"

              email_notification.message_type = 'transactional'

              email_notification.plaintext_body = 'Greetings! Check out our
              latest winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.subject = 'Welcome to the Winter Sale!'

              override = email_notification.email_override

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@example.com",
                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.campaigns = ["winter sale", "west coast"]

              send_it.notification = email_notification.email_override

              send_it.validate
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  /api/custom-events:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/custom-events HTTP/1.1
              Authorization: Bearer <authorization token>
              X-UA-Appkey: <application key>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                 {
                    "occurred": "2020-05-02T02:31:22",
                    "user": {
                       "named_user_id": "hugh.manbeing"
                    },
                    "body": {
                       "name": "purchased",
                       "value": 239.85,
                       "transaction": "886f53d4-3e0f-46d7-930e-c2792dac6e0a",
                       "interaction_id": "your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234",
                       "interaction_type": "url",
                       "properties": {
                          "description": "Sneaker purchase",
                          "brand": "Victory Sneakers",
                          "colors": [
                           "red",
                           "blue"
                          ],
                          "items": [
                             {
                                "text": "New Line Sneakers",
                                "price": "$ 79.95"
                             },
                             {
                                "text": "Old Line Sneakers",
                                "price": "$ 79.95"
                             },
                             {
                                "text": "Blue Line Sneakers",
                                "price": "$ 79.95"
                             }
                          ],
                          "name": "Hugh Manbeing",
                          "userLocation": {
                             "state": "CO",
                             "zip": "80202"
                          }
                       },
                       "session_id": "22404b07-3f8f-4e42-a4ff-a996c18fa9f1"
                    }
                 }
              ]
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BearerTokenClient, CustomEvent
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              event = CustomEvent(
                 client=client,
                 name='purchased',
                 user={'named_user_id': 'hugh.manbeing'},
                 interaction_type='url',
                 interaction_id='your.store/us/en_us/pd/shoe/pid-11046546/pgid-10978234',
                 value=239.85,
                 transaction='886f53d4-3e0f-46d7-930e-c2792dac6e0a',
                 session_id='22404b07-3f8f-4e42-a4ff-a996c18fa9f1',
                 properties={
                    'description': 'Sneaker purchase',
                    'brand': 'Victory Sneakers',
                    'colors': ['red', 'blue'],
                    'items': [
                       {'text': 'New Line Sneakers', 'price': '$ 79.95'},
                       {'text': 'Old Line Sneakers', 'price': '$ 79.95'},
                       {'text': 'Blue Line Sneakers', 'price': '$ 79.95'}
                    ],
                    'name': 'Hugh Manbeing',
                    'userLocation': {
                       'state': 'CO',
                       'zip': '80202'
                    }
                 },
                 occurred=datetime(2020, 5, 2, 2, 31, 22)
              )

              response = event.send()
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .setBearerToken("<bearer token>")
                      .build();

              CustomEventUser customEventUser = CustomEventUser.newBuilder()
                      .setNamedUserId("hugh.manbeing")
                      .build();

              CustomEventPropertyValue customEventProperty =
              CustomEventPropertyValue.of("Victory Sneakers");


              List<CustomEventPropertyValue> items = new ArrayList<>();

              items.add(CustomEventPropertyValue.of("New Line Sneakers"));

              items.add(CustomEventPropertyValue.of("Old Line Sneakers"));


              DateTime occurred = new DateTime(2020, 05, 02, 02, 31, 22,
              DateTimeZone.UTC);


              CustomEventBody customEventBody = CustomEventBody.newBuilder()
                      .setName("purchased")
                      .addPropertiesEntry("brand", customEventProperty)
                      .addPropertiesEntry("items", CustomEventPropertyValue.of(items))
                      .build();

              CustomEventPayload customEventPayload =
              CustomEventPayload.newBuilder()
                      .setCustomEventBody(customEventBody)
                      .setCustomEventUser(customEventUser)
                      .setOccurred(occurred)
                      .build();

              CustomEventRequest customEventRequest =
              CustomEventRequest.newRequest(customEventPayload);

              Response<CustomEventResponse> response =
              client.execute(customEventRequest);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', token: '<token>')


              example_events = [
                UA.custom_events(
                  body: UA.custom_events_body(
                    interaction_id: "https://docs.airship.com/api/ua/#schemas-customeventobject",
                    interaction_type: "url",
                    name: "example",
                    properties: {
                      "who" => "Alf",
                      "where" => "In the garage!",
                      "from" => "Melmac"
                    },
                    session_id: "8d168d40-bc9b-4359-800c-a546918354ac",
                    transaction: "d768f61f-73ba-495f-9e16-b3b9c3b598b7",
                    value: 1
                  ),
                  occurred: "2021-10-01T00:00:00",
                  user: UA.custom_events_user(named_user_id: "Gordon Shumway")
                )
              ]

              event = Urbanairship::CustomEvents::CustomEvent.new(client:
              airship)

              event.events = example_events

              event.create
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "operation_id": "8c61c0c4-95b0-45a6-bc38-733f7fcb8979"
              }
        showMissingLanguagePlaceholders: true
  '/api/delivery-report/clx/{app_key}':
    post:
      - description: Example incoming request from Sinch
        examples:
          - lang: HTTP
            source: >
              POST
              /api/delivery-report/clx/IAbc_TTJRaabcs9-o_Gabc?sender=28444&channel_id=09a4bd41-a853-48d1-8061-d72f9336891d&send_id=1b50e0d6-1365-4290-b4c2-0d4be2cfd7a2&push_id=2eae9868-1fb3-47bc-991f-992fbfe5fdd1
              HTTP/1.1

              Content-type: application/json


              {
                 "type": "recipient_delivery_report_sms",
                 "batch_id": "eRmpk8IQIPg6_IWa",
                 "recipient": "15035551212",
                 "code": "0",
                 "status": "Delivered",
                 "at": "2023-10-02T09:34:18.542Z",
                 "operator_status_at": "2023-10-02T09:34:18.101Z"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/delivery-report/mms/sinch:
    post:
      - description: Example incoming request from Sinch
        examples:
          - lang: HTTP
            source: |
              POST /api/delivery-report/mms/sinch HTTP/1.1
              Content-type: application/xml

              <postback>
                 <origin>MMS_MT</origin>
                 <code>N101</code>
                 <sent-as>MMS</sent-as>
                 <status>Message Sent</status>
                 <mms-id>39597</mms-id>
                 <from>28444</from>
                 <to>12399471613</to>
                 <tracking-id>TU1TXzU5Nzg3OQ==</tracking-id>
                 <operator-id>31003</operator-id>
                 <timestamp>2014-06-07T07:27:29-05:00</timestamp>
              </postback>
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/experiments:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/experiments HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ABTest
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              ab_test = ABTest(airship=client)
              response = ab_test.list_experiments()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              ab_test = UA::AbTest.new(client: airship)

              ab_test.limit = 5

              ab_test.list_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: experiments
              Count: 2
              Total-Count: 2
              Content-Type: application/vnd.urbanairship+json; version=3

               {
                 "ok" : "true",
                 "count" : 2,
                 "total_count" : 2,
                 "experiments" : [{
                   "name" : "Experiment 1",
                   "control" : 0.33,
                   "audience" : "all",
                   "device_types": [ "ios", "android" ],
                   "variants" : [{
                     "push" : {
                       "notification" : {
                         "alert" : "message 1"
                       }
                     },
                     "id" : 0,
                   },
                   {
                     "push" : {
                         "notification" : {
                           "alert" : "message 2"
                         }
                     },
                     "id" : 1,
                   }],
                   "id" : "b5bc3dd1-9ea4-4208-b5f1-9e7ac3fe0502",
                   "created_at" : "2020-03-03T21:08:05",
                   "push_id" : "07cec298-6b8c-49f9-8e03-0448a06f4aac"
                 }, {
                   "name" : "Experiment 2",
                   "description" : "The second experiment",
                   "audience" : "all",
                   "device_types": [ "ios", "android" ],
                   "variants" : [{
                     "push" : {
                       "notification" : {
                         "alert" : "message 1"
                       }
                     },
                     "id" : 0,
                   },
                   {
                     "push" : {
                         "notification" : {
                           "alert" : "message 2"
                         }
                     },
                     "id" : 1,
                   }],
                   "id" : "e464aa7e-be40-4994-a290-1bbada7187d8",
                   "created_at" : "2020-03-03T21:08:05",
                   "push_id" : "07cec298-6b8c-49f9-8e03-0448a06f4aac"
                 }]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/experiments HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Experiment 1",
                  "audience": {"tag": "earlyBirds"},
                  "device_types": [ "ios", "android" ],
                  "variants": [
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 1"
                              }
                          }
                      },
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 2"
                              }
                          }
                      }
                  ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Schedule schedule = Schedule.newBuilder()
                      .setScheduledTimestamp(DateTime.now().plusMinutes(5))
                      .build();

              Variant variantOne = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 1")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Variant variantTwo = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 2")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Experiment experiment = Experiment.newBuilder()
                      .setName("Experiment 1")
                      .setDescription("Testing description")
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                      .setAudience(Selectors.tag("earlyBirds"))
                      .addVariant(variantOne)
                      .addVariant(variantTwo)
                      .build();

              ExperimentRequest request =
              ExperimentRequest.newRequest(experiment);

              Response<ExperimentResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ABTest, Experiment, Variant
              )
              from urbanairship.push import notification

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Create push notifications for variants
              push_1 = notification(alert='message 1')
              push_2 = notification(alert='message 2')

              # Create variants
              variants = [
                  Variant(push=push_1),
                  Variant(push=push_2)
              ]

              # Create experiment
              experiment = Experiment(
                  audience={'tag': 'earlyBirds'},
                  device_types=['ios', 'android'],
                  variants=variants,
                  name='Experiment 1'
              )

              # Create and send experiment
              ab_test = ABTest(airship=client)
              response = ab_test.create(experiment=experiment)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              variant_one = UA::Variant.new(client: airship)

              variant_one.push = {
                  "notification": {
                      "alert": "message 1"
                  }
              }

              variant_two = UA::Variant.new(client: airship)

              variant_two.push = {
                  "notification": {
                      "alert": "message 2"
                  }
              }

              experiment = UA::Experiment.new(client: airship)

              experiment.name = 'Experiment 1'

              experiment.description = 'Example experiment'

              experiment.audience = UA.tag('earlyBirds')

              experiment.device_types = ['ios','android']

              experiment.variants << variant_one.payload

              experiment.variants << variant_two.payload

              ab_test = UA::AbTest.new(client: airship)

              ab_test.experiment_object = experiment.payload

              ab_test.create_ab_test
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Length: 123

              Location:
              https://go.urbanairship.com/api/experiments/0f7704e9-5dc0-4f7d-9964-e89055701b0a

              Content-Type: application/vnd.urbanairship+json; version=3

                {
                  "ok" : "true",
                  "operation_id" : "03ca94a3-2b27-42f6-be7e-41efc2612cd4",
                  "experiment_id" : "0f7704e9-5dc0-4f7d-9964-e89055701b0a",
                  "push_id" : "7e13f060-594c-11e4-8ed6-0800200c9a66"
                }
        showMissingLanguagePlaceholders: true
  /api/experiments/scheduled:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/experiments/scheduled HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ABTest
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              ab_test = ABTest(client)
              response = ab_test.list_scheduled_experiment()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              ab_test = UA::AbTest.new(client: airship)

              ab_test.list_scheduled_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: experiments
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": "true",
                  "count": 2,
                  "total_count": 2,
                  "experiments": [
                      {
                          "id": "0f7704e9-5dc0-4f7d-9964-e89055701b0a",
                          "name": "Experiment 1",
                          "audience": "all",
                          "device_types": [ "ios", "android" ],
                          "variants": [
                              {
                                  "id": 0,
                                  "schedule": {
                                      "scheduled_time": "2020-11-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 1"
                                      }
                                  }
                              },
                              {
                                  "id": 1,
                                  "schedule": {
                                      "scheduled_time": "2020-11-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 2"
                                      }
                                  }
                              }
                          ]
                      },
                      {
                          "id": "29705c10-5951-11e4-8ed6-0800200c9a66",
                          "name": "Experiment 2",
                          "audience": "all",
                          "device_types": [ "ios", "android" ],
                          "variants": [
                              {
                                  "id": 0,
                                  "schedule": {
                                      "scheduled_time": "2020-12-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 1"
                                      }
                                  }
                              },
                              {
                                  "id": 1,
                                  "schedule": {
                                      "scheduled_time": "2020-12-17T20:58:00Z"
                                  },
                                  "push": {
                                      "notification": {
                                          "alert": "message 2"
                                      }
                                  }
                              }
                          ]
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/experiments/scheduled/{experiment_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE
              /api/experiments/scheduled/0f7704e9-5dc0-4f7d-9964-e89055701b0a
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ExperimentDeleteRequest request =
              ExperimentDeleteRequest.newRequest("0f7704e9-5dc0-4f7d-9964-e89055701b0a");

              Response<ExperimentResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ABTest
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              ab_test = ua.ABTest(client)
              ab_test.experiment_id = "0f7704e9-5dc0-4f7d-9964-e89055701b0a"

              response = ab_test.delete()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              ab_test = UA::AbTest.new(client: airship)

              ab_test.experiment_id = '0f7704e9-5dc0-4f7d-9964-e89055701b0a'

              ab_test.delete_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : "true",
                "operation_id" : "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  /api/experiments/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/experiments/validate HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Experiment 1",
                  "audience": {"tag": "earlyBirds"},
                  "device_types": [ "ios", "android" ],
                  "variants": [
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 1"
                              }
                          }
                      },
                      {
                          "push": {
                              "notification": {
                                  "alert": "message 2"
                              }
                          }
                      }
                  ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Schedule schedule = Schedule.newBuilder()
                      .setScheduledTimestamp(DateTime.now().plusMinutes(5))
                      .build();

              Variant variantOne = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 1")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Variant variantTwo = Variant.newBuilder()
                      .setPushPayload(VariantPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("message 2")
                              .build()
                      )
                      .build())
                      .setSchedule(schedule)
                      .build();

              Experiment experiment = Experiment.newBuilder()
                      .setName("Experiment 1")
                      .setDescription("Testing description")
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                      .setAudience(Selectors.tag("earlyBirds"))
                      .addVariant(variantOne)
                      .addVariant(variantTwo)
                      .build();

              ExperimentRequest request =
              ExperimentRequest.newRequest(experiment).setValidateOnly(true);

              Response<ExperimentResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, ABTest, Experiment, Variant
              )
              from urbanairship.push import notification

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Create push notifications for variants
              push_1 = notification(alert='message 1')
              push_2 = notification(alert='message 2')

              # Create variants
              variants = [
                  Variant(push=push_1),
                  Variant(push=push_2)
              ]

              # Create experiment
              experiment = Experiment(
                  audience={'tag': 'earlyBirds'},
                  device_types=['ios', 'android'],
                  variants=variants,
                  name='Experiment 1'
              )

              # Validate experiment
              ab_test = ABTest(airship=client)
              response = ab_test.validate(experiment=experiment)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              variant_one = UA::Variant.new(client: airship)

              variant_one.push = {
                  "notification": {
                      "alert": "message 1"
                  }
              }

              variant_two = UA::Variant.new(client: airship)

              variant_two.push = {
                  "notification": {
                      "alert": "message 2"
                  }
              }

              experiment = UA::Experiment.new(client: airship)

              experiment.name = 'Experiment 1'

              experiment.description = 'Example experiment'

              experiment.audience = UA.tag('earlyBirds')

              experiment.device_types = ['ios','android']

              experiment.variants << variant_one.payload

              experiment.variants << variant_two.payload

              ab_test = UA::AbTest.new(client: airship)

              ab_test.experiment_object = experiment.payload

              ab_test.validate_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : "true",
                "operation_id" : "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  '/api/experiments/{experiment_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/experiments/0f7704e9-5dc0-4f7d-9964-e89055701b0a HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              from urbanairship import BasicAuthClient, ABTest


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              ab_test = ABTest(client)

              response =
              ab_test.lookup(experiment_id='0f7704e9-5dc0-4f7d-9964-e89055701b0a')
          - lang: ruby
            source: >
              require 'urbanairship'

              UA = Urbanairship


              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')

              ab_test = UA::AbTest.new(client: airship)


              ab_test.experiment_id = '0f7704e9-5dc0-4f7d-9964-e89055701b0a'

              ab_test.lookup_ab_test
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: experiment
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : "true",
                 "experiment" : {
                    "id" : "0f7704e9-5dc0-4f7d-9964-e89055701b0a",
                    "push_id": "d00f07b0-594c-11e4-8ed6-0800200c9a66",
                    "name" : "Experiment 1",
                    "audience" : "all",
                    "device_types": [ "ios", "android" ],
                    "variants" : [{
                          "push" : {
                             "notification" : {
                                "alert" : "message 1"
                             }
                          },
                          "id" : 0,
                       },
                       {
                          "push" : {
                             "notification" : {
                             "alert" : "message 2"
                          }
                       },
                       "id" : 1,
                   }]
                 }
              }
        showMissingLanguagePlaceholders: true
  '/api/in-app/{app_key}':
    get:
      - description: Example list automations
        examples:
          - lang: HTTP
            source: |
              GET /api/in-app/app/IAbc_TTJRaabcs9-o_Gabc HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Data-Attribute: in_app_messages

              {
                "ok": true,
                "in_app_messages": [
                  {
                    "created": "2024-10-10T12:13:14.023",
                    "last_updated": "2024-10-10T12:13:14.023",
                    "message": {
                      "message_id": "031de218-9fff-44d4-b348-de4b724bb924",
                      "display_type": "banner",
                      "display": {
                        "body": {
                          "text": "We're having a fire ... sale. Oh the burning! It burns me!"
                        },
                        "buttons": [
                          {
                            "label": "Shop The Fire Sale",
                            "id": "shop",
                            "actions": {"url": "http://example.com/fire-sale"}
                          }
                        ]
                      }
                    },
                    "triggers": [ {"type": "foreground", "goal": 1} ]
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example create/send automation
        examples:
          - lang: HTTP
            source: |
              POST /api/in-app/IAbc_TTJRaabcs9-o_Gabc HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
              Content-type: application/json

              {
                "in_app_message": {
                  "message": {
                    "display_type": "banner",
                    "display": {
                      "body": {
                        "text": "We're having a fire ... sale. Oh the burning! It burns me!"
                      },
                      "buttons": [
                        {
                          "label": {"text": "Shop The Fire Sale"},
                          "id": "shop",
                          "actions": {"url": "http://example.com/fire-sale"}
                        }
                      ]
                    },
                    "audience": {
                      "tags": { "not": {"tag": "nude"} }
                    }
                  },
                  "triggers": [ {"type": "foreground", "goal": 1} ],
                  "localizations": [
                    {
                      "locale": {"country": "FR"},
                      "message": {
                        "display": {
                          "body": {
                            "text": "We're having le fire ... sale. Oh le burning! It burns moi!"
                          },
                          "buttons": [
                            {
                              "label": {"text": "Shop Le Fire Sale"},
                              "id": "shop",
                              "actions": {
                                "url": "http://france.example.com/fire-sale"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "requires_eligibility": true
                },
                "notify": true
              }
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Type: application/vnd.urbanairship+json; version=3

              Location:
              /api/in-app/IAbc_TTJRaabcs9-o_Gabc/031de218-9fff-44d4-b348-de4b724bb924


              {
                "ok": true,
                "message_id": "031de218-9fff-44d4-b348-de4b724bb924",
                "operation_id": "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  '/api/in-app/{app_key}/eligibility':
    put:
      - description: Example update In-App Automation eligibility
        examples:
          - lang: HTTP
            source: |
              PUT /api/in-app/app/af_ctTpJRuarzs9-o_Gkh3/eligibility HTTP/1.1
              Authorization: Bearer <jwt bearer token string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "automation_ids": [
                      "b601827f-1169-4dbd-bd39-533b8de51992",
                      "46b77aae-06a1-44e8-a903-b0d84ab20093",
                  ],
                  "requires_eligibility": true
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "operation_id": "ae7852b0-6509-4e60-a73f-4d6b92d94c56"
              }
        showMissingLanguagePlaceholders: true
  '/api/in-app/{app_key}/validate':
    post:
      - description: Example validate automation payload
        examples:
          - lang: HTTP
            source: |
              POST /api/in-app/IAbc_TTJRaabcs9-o_Gabc/validate HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
              Content-type: application/json

              {
                "in_app_message": {
                  "message": {
                    "display_type": "banner",
                    "display": {
                      "body": {
                        "text": "We're having a fire ... sale. Oh the burning! It burns me!"
                      },
                      "buttons": [
                        {
                          "label": {"text": "Shop The Fire Sale"},
                          "id": "shop",
                          "actions": {"url": "http://example.com/fire-sale"}
                        }
                      ]
                    },
                    "audience": {
                      "tags": { "not": {"tag": "nude"} }
                    }
                  },
                  "triggers": [ {"type": "foreground", "goal": 1} ],
                  "localizations": [
                    {
                      "locale": {"country": "FR"},
                      "message": {
                        "display": {
                          "body": {
                            "text": "We're having le fire ... sale. Oh le burning! It burns moi!"
                          },
                          "buttons": [
                            {
                              "label": {"text": "Shop Le Fire Sale"},
                              "id": "shop",
                              "actions": {
                                "url": "http://france.example.com/fire-sale"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "requires_eligibility": true
                },
                "notify": true
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 Ok
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/in-app/{app_key}/{automation_id}':
    delete:
      - description: Example cancel automation
        examples:
          - lang: HTTP
            source: >
              DELETE
              /api/in-app/IAbc_TTJRuarzs9-o_Gabc/031de218-9fff-44d4-b348-de4b724bb924
              HTTP/1.1

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 Ok
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "operation_id": "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
    get:
      - description: Example get automation
        examples:
          - lang: HTTP
            source: >
              GET
              /api/in-app/app/IAbc_TTJRaabcs9-o_Gabc/031de218-9fff-44d4-b348-de4b724bb924
              HTTP/1.1

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Data-Attribute: in_app_message

              {
                "ok": true,
                "in_app_message" : {
                  "created": "2014-10-10T12:13:14.023",
                  "last_updated": "2014-10-10T12:13:14.023",
                  "message": {
                    "message_id": "031de218-9fff-44d4-b348-de4b724bb924",
                    "display_type": "banner",
                    "display": {
                      "body": {
                        "text": "We're having a fire ... sale. Oh the burning! It burns me!"
                      },
                      "buttons": [
                        {
                          "label": "Shop The Fire Sale",
                          "id": "shop",
                          "actions": {
                            "url": "http://example.com/fire-sale"
                          }
                        }
                      ]
                    }
                  },
                  "triggers": [
                    {
                      "type": "foreground",
                      "goal": 1
                    }
                  ]
                }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example update automation
        examples:
          - lang: HTTP
            source: >
              PUT
              /api/in-app/IAbc_TTJRaabcs9-o_Gabc/031de218-9fff-44d4-b348-de4b724bb924
              HTTP/1.1

              Accept: application/vnd.urbanairship+json; version=3

              Content-type: application/json


              {
                "in_app_message": {
                  "message": {
                    "display_type": "banner",
                    "display": {
                      "body": {
                        "text": "Gobias some coffee"
                      },
                      "buttons": [
                        {
                          "label": "Coffee",
                          "id": "shop",
                          "actions": {
                            "url": "http://example.com/coffee"
                          }
                        }
                      ]
                    }
                  },
                  "priority": 11,
                  "triggers": [
                    {
                      "type": "foreground",
                      "goal": 1
                    }
                  ]
                }
              }
          - lang: HTTP
            source: >
              HTTP/1.1 200 Ok

              Content-Type: application/vnd.urbanairship+json; version=3

              Location:
              /api/in-app/ISex_TTJRuarzs9-o_Gkhg/031de218-9fff-44d4-b348-de4b724bb924


              {
                "ok": true,
                "message_id": "031de218-9fff-44d4-b348-de4b724bb924",
                "operation_id": "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  /api/lists:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListListingRequest request =
              StaticListListingRequest.newRequest();

              Response<StaticListListingResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticLists
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # List all static lists
              static_lists = StaticLists(client)
              for static_list in static_lists:
                  print(
                      static_list.name,
                      static_list.description,
                      static_list.extra,
                      static_list.created,
                      static_list.last_updated,
                      static_list.channel_count,
                      static_list.status
                  )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_lists = UA::StaticLists.new(client: airship)


              static_lists.each do |static_list|
                  puts(static_list)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: lists
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true,
                 "lists" : [
                    {
                       "name" : "platinum_members",
                       "description" : "loyalty program platinum members",
                       "extra" : { "key" : "value" },
                       "created" : "2020-04-08T20:41:06",
                       "last_modified" : "2020-05-01T18:00:27",
                       "channel_count": 3145,
                       "status": "ready"
                    },
                    {
                       "name": "gold_members",
                       "description": "loyalty program gold member",
                       "extra": { "key": "value" },
                       "created": "2020-04-08T20:41:06",
                       "last_updated": "2020-05-01T18:00:27",
                       "channel_count": 678,
                       "status": "ready"
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/lists HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "name" : "platinum_members",
                 "description" : "loyalty program platinum members",
                 "extra" : {
                    "key" : "value",
                    "another" : "etc."
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListRequest request =
              StaticListRequest.newRequest("platinum_members")
                              .setDescription("loyalty program platinum members")
                              .addExtra("key", "value");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Create a new static list
              static_list = StaticList(
                  client=client,
                  name='platinum_members'
              )
              static_list.description = 'loyalty program platinum members'
              static_list.extra = {'key': 'value'}

              response = static_list.create()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.create(description: 'loyalty program platinum
              members')
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Location: https://go.urbanairship.com/api/lists/platinum_members
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  '/api/lists/{list_name}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/lists/platinum_members HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListDeleteRequest request =
              StaticListDeleteRequest.newRequest("platinum_members");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Delete a static list
              static_list = StaticList(
                  client=client,
                  name='platinum_members'
              )
              response = static_list.delete()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.delete
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists/platinum_members/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListLookupRequest request =
              StaticListLookupRequest.newRequest("platinum_members");


              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Look up a static list
              static_list = StaticList(
                  client=client,
                  name='platinum_members'
              )
              response = static_list.lookup()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.lookup
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Data-Attribute: static_list

              Link:
              <https://go.urbanairship.com/api/platinum_members/list/?start=uuid101&limit=100>;
              rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "ok" : true,
                 "name" : "platinum_members",
                 "description" : "loyalty program platinum members",
                 "extra" : { "key" : "value" },
                 "created" : "2020-04-08T20:41:06",
                 "last_updated" : "2020-05-01T18:00:27",
                 "channel_count" : 1000,
                 "status" : "ready"
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/lists/platinum_members HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "name" : "platinum_members",
                 "description" : "loyalty program platinum members",
                 "extra" : {
                    "key" : "value"
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListRequest request =
              StaticListRequest.newUpdateRequest("platinum_members")
                              .setDescription("loyalty program platinum members")
                              .addExtra("key", "value");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Update an existing static list
              static_list = StaticList(
                  client=client,
                  name='platinum_members'
              )
              static_list.description = 'loyalty program platinum members'
              static_list.extra = {'key': 'value'}

              response = static_list.update()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              static_list.update(description: 'loyalty program platinum
              members')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
  '/api/lists/{list_name}/csv':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/lists/foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+csv; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Download a static list
              response = StaticList.download(
                  client=client,
                  list_name='platinum_members'
              )
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              StaticListDownloadRequest request =
              StaticListDownloadRequest.newRequest("foobar");

              Response<String> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: text/csv

              ios_channel,6d56ab7e-2c78-4ba9-ab11-d9b664ca2b32
              ios_channel,d5ebe607-a3e6-4601-b97e-83ec604223fe
              ios_channel,fa599af7-43e4-4862-a570-1470bf6f53ff
              android_channel,0e91d0f2-c65d-4b40-b968-b9f8e8b0c987
              android_channel,c346a3ce-5754-4d02-8ee5-500ce470a0b7
              android_channel,e9a01369-5f74-4167-b660-df84014a2e57
              amazon_channel,0356d138-d1d9-4572-b321-e1b67f4cd658
              amazon_channel,24dc9a76-45fe-4b17-8ed7-841f96b658ad
              amazon_channel,4d6b59f8-6d8c-4151-8b13-cd58d6ac8c6e
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/lists/platinum_members/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              named_user,customer-42
              named_user,room-27
              ios_channel,5i4c91s5-9tg2-k5zc-m592150z5634
              web_channel,d132f5b7-abcf-4920-aeb3-9132ddac3d5a
              android_channel,52b2b587-0152-4134-a8a0-38ae6933c88a
              email_channel,ab1a81e3-5af3-4c04-a7ae-d676960e6684
              open_channel,6bcf3e63-a38a-44d8-8b0d-2fb5941e74ab
              sms_channel,ab1a81e3-aaf3-ac04-a7ae-a676960e6684
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              File dataDirectory = new File("src/data");

              String filePath = dataDirectory.getAbsolutePath() +
              "/platinum.csv";

              StaticListUploadRequest request =
              StaticListUploadRequest.newRequest("platinum_members", filePath);


              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, StaticList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Upload a CSV file to a static list
              static_list = StaticList(
                  client=client,
                  name='platinum_members'
              )

              with open('list.csv', 'r') as csv_file:
                  response = static_list.upload(csv_file)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              static_list = UA::StaticList.new(client: airship)

              static_list.name = 'platinum_members'

              File.open('csv_file', 'rb') do |csv|
                  static_list.upload(csv_file: csv, gzip: false)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true
              }
        showMissingLanguagePlaceholders: true
      - description: Example request with header row
        examples:
          - lang: HTTP
            source: |
              PUT /api/lists/foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              Identifier Type,Identifier
              alias,some-user-12345
              alias,some-user-12346
              ios_channel,5b1a81e3-5af3-4c04-a7ae-d676960e6684
              named_user,SODFHsodfuJ9433
              named_user,"contains,comma"
              named_user,"contains""double-quote"
        showMissingLanguagePlaceholders: true
  /api/metered-usage:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/metered-usage HTTP/1.1
              Authorization: Bearer <authorization token>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json
              X-UA-Appkey: <application key>
              X-UA-Channel-ID: <channel id>
              X-UA-Lib-Version: "0.16"
              X-UA-Device-Family: IOS
              X-UA-Timestamp: 2023-09-22T18:30:00Z
              X-UA-Nonce: c58fd763-928c-4155-bee9-fdba2adc15f3

              {
                "usage": [
                  {
                    "event_id": "82100e9d-3ab5-43ee-b376-5780584407f8",
                    "usage_type": "impression",
                    "product": "scene",
                    "occurred": "2023-09-22T18:08:09Z",
                    "entity_id": "94604454-efd5-4699-8937-d17f8bbdf705"
                  }
                ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/mms/clx/inbounds:
    post:
      - description: Example incoming request from Sinch
        examples:
          - lang: xml
            source: |
              POST /api/mms/clx/inbounds?login=username&password=pwd HTTP/1.1
              User-Agent: Apache-HttpAsyncClient/4.0.1 (java 1.5)
              Content-Type: application/xml
              Connection: close

              <postback>
                      <origin>MMS_MO</origin>
                      <code>N401</code>
                      <from>14082257140</from>
                      <to>28444</to>
                      <keyword>all</keyword>
                      <tracking-id>MMS_MO_iLnCRrL6</tracking-id>
                      <operator-id>31002</operator-id>
                      <timestamp>2014-02-03T11:19:49-05:00</timestamp>
                      <message-subject></message-subject>
                      <content>
                              <file>URL of Content Here</file>
                              <file>URL of Content Here</file>
                              <file>URL of Content Here</file>
                      </content>
              </postback>
      - description: Example response
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                 "ok": true
              }
  /api/named_users:
    get:
      - description: Example Named User lookup
        examples:
          - lang: HTTP
            source: |
              GET /api/named_users/?id=user-456 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserListingRequest request =
              NamedUserListingRequest.newRequest("user-456");

              Response<NamedUserListingResponse> response =
              client.execute(request);

              NamedUserView namedUser =
              response.getBody().get().getNamedUserView().get();


              // The Named User ID

              String namedUserId = namedUser.getNamedUserId();


              // Map of tag groups and the associated sets of tags

              ImmutableMap<String, ImmutableSet<String>> namedUserTags =
              namedUser.getNamedUserTags();


              // All channel objects associated with the Named User

              ImmutableSet<ChannelView> channelViews =
              namedUser.getChannelViews();
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              named_user = NamedUser(airship=client, named_user_id='user-456')
              response = named_user.lookup()
              print(response)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-456'

              user = named_user.lookup
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "named_user": {
                    "named_user_id": "user-456",
                    "created" : "2020-04-08T20:41:06",
                    "last_modified" : "2020-05-01T18:00:27",
                    "tags": {
                      "my_fav_tag_group": [
                          "tag1",
                          "tag2"
                      ]
                    },
                    "subscription_lists": [
                      {
                        "list_ids": ["example_listId-1", "example_listId-5"],
                        "scope": "web"
                      },
                      {
                        "list_ids": ["example_listId-2", "example_listId-3"],
                        "scope": "app"
                      },
                      {
                        "list_ids": ["example_listId-2"],
                        "scope": "web"
                      },
                      {
                        "list_ids": ["example_listId-3"],
                        "scope": "email"
                      },
                      {
                        "list_ids": ["example_listId-4"],
                        "scope": "sms"
                      }
                    ],
                    "attributes": {
                      "item_purchased": "Fur removal tool",
                      "cats_name": "Sammy",
                      "pets_age": 12
                    },
                    "user_attributes": {
                      "ua_country": "US",
                      "ua_language": "en",
                      "ua_tz": "America/Los_Angeles"
                    },
                    "channels": [
                      {
                          "channel_id": "dceafd02-b852-4305-83df-98b65fa40dd4",
                          "device_type": "ios",
                          "installed": true,
                          "opt_in": true,
                          "push_address": "FFFF",
                          "created": "2020-04-08T20:41:06",
                          "last_registration": "2020-05-01T18:00:27",
                          "tags": [
                            "meow"
                          ]
                      }
                    ]
                }
              }
        showMissingLanguagePlaceholders: true
      - description: Example Named User listing
        examples:
          - lang: HTTP
            source: |
              GET /api/named_users HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserListingRequest request =
              NamedUserListingRequest.newRequest();

              Response<NamedUserListingResponse> response =
              client.execute(request);

              ImmutableList<NamedUserView> namedUsers =
              response.getBody().get().getNamedUserViews().get();
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, NamedUserList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              named_user_list = NamedUserList(airship=client)

              for n in named_user_list:
                  print(n.named_user_id)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user_list = UA::NamedUserList.new(client: airship)

              named_user_list.each do |named_user|
                  puts(named_user)
              end
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Data-Attribute: named_users

              Link:
              <https://go.urbanairship.com/api/named_users?start=user-1234>;
              rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "next_page": "https://go.urbanairship.com/api/named_users?start=user-1234",
                 "named_users": [
                    {
                       "named_user_id": "user-id-1234",
                       "created" : "2020-04-08T20:41:06",
                       "last_modified" : "2020-05-01T18:00:27",
                       "tags": {
                          "my_fav_tag_group": ["tag1", "tag2"]
                       },
                       "subscription_lists": [
                       {
                          "list_ids": ["example_listId-1", "example_listId-5"],
                          "scope": "web"
                       },
                       {
                          "list_ids": ["example_listId-2", "example_listId-3"],
                          "scope": "app"
                       },
                       {
                          "list_ids": ["example_listId-2"],
                          "scope": "web"
                       },
                       {
                          "list_ids": ["example_listId-3"],
                          "scope": "email"
                       }
                       ],
                       "attributes":{
                          "item_purchased":"Fur removal tool",
                          "cats_name":"fluffy butt",
                          "pets_age":2
                       },
                       "user_attributes": {
                          "ua_country": "US",
                          "ua_language": "en",
                          "ua_tz": "America/Los_Angeles"
                       },
                       "channels": [
                          {
                             "channel_id": "dceafd02-b852-4305-83df-98b65fa40dd5",
                             "device_type": "ios",
                             "installed": true,
                             "opt_in": true,
                             "push_address": "FFFF",
                             "created": "2020-04-08T20:41:06",
                             "last_registration": "2020-05-01T18:00:27",
                             "alias": "xxxx",
                             "tags": ["asdf"],
                             "ios": {
                                "badge": 0,
                                "quiettime": {
                                   "start": "22:00",
                                   "end": "06:00"
                                },
                                "tz": "America/Los_Angeles"
                             }
                          }
                       ]
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/associate:
    post:
      - description: Example associate an iOS channel with a Named User
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/associate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                 "device_type": "ios",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newAssociationRequest()
                      .setChannel("df6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.IOS)
                      .setNamedUserId("user-id-1234");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              named_user = NamedUser(airship=client,
              named_user_id='user-id-1234')

              response =
              named_user.associate(channel_id='df6a6b50-9843-0304-d5a5-743f246a4946',
              device_type='ios')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-id-1234'

              named_user.associate(channel_id:
              'df6a6b50-9843-0304-d5a5-743f246a4946', device_type: 'ios')
        showMissingLanguagePlaceholders: true
      - description: >-
          Example associate a web channel with Named User (do not declare device
          type)
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/associate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "wf6a6b50-9843-0304-d5a5-743f246a4946",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newAssociationRequest()
                      .setChannel("wf6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.WEB)
                      .setNamedUserId("user-id-1234");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              named_user = NamedUser(airship=client,
              named_user_id='user-id-1234')

              response =
              named_user.associate(channel_id='wf6a6b50-9843-0304-d5a5-743f246a4946')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-id-1234'

              named_user.associate(channel_id:
              'wf6a6b50-9843-0304-d5a5-743f246a4946')
        showMissingLanguagePlaceholders: true
      - description: Example associate an email channel with Named User
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/associate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "email_address": "monopoly.man@example.com",
                 "named_user_id": "user-id-1234"
              }
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              named_user = NamedUser(airship=client,
              named_user_id='user-id-1234')

              response =
              named_user.email_associate(email_address='monopoly.man@example.com')
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newAssociationRequest()
                      .setChannel("em6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.EMAIL)
                      .setNamedUserId("user-id-1234");

              Response<GenericResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.named_user_id = 'user-id-1234'

              named_user.associate(channel_id:
              'em6a6b50-9843-0304-d5a5-743f246a4946')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/disassociate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/disassociate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                 "device_type": "ios",
                 "named_user_id": "user-id-1234"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newDisassociationRequest()
                      .setChannel("df6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.IOS);

              Response<GenericResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.disassociate(channel_id:
              'df6a6b50-9843-0304-d5a5-743f246a4946', device_type: 'ios')
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              named_user = NamedUser(airship=client,
              named_user_id='user-id-1234')

              response =
              named_user.disassociate(channel_id='df6a6b50-9843-0304-d5a5-743f246a4946',
              device_type='ios')
        showMissingLanguagePlaceholders: true
      - description: Example disassociate an email channel from Named User
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/disassociate HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "email_address": "monopoly.man@example.com",
                 "named_user_id": "user-id-1234"
              }
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              named_user = NamedUser(airship=client,
              named_user_id='user-id-1234')

              response =
              named_user.email_disassociate(email_address='monopoly.man@example.com')
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserRequest request =
              NamedUserRequest.newDisassociationRequest()
                      .setChannel("em6a6b50-9843-0304-d5a5-743f246a4946", ChannelType.EMAIL)
                      .setNamedUserId("user-id-1234");

              Response<GenericResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user = UA::NamedUser.new(client: airship)

              named_user.disassociate(channel_id:
              'em6a6b50-9843-0304-d5a5-743f246a4946')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/named_users/scoped/{named_user_id}':
    post:
      - description: |
          Example scoped Named User batch operations
        examples:
          - lang: HTTP
            source: >
              POST /api/named_users/scoped/b8f9b663-0a3b-cf45-587a-be880946e881
              HTTP/1.1

              Authorization: Basic <application or master authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                 "scoped": [
                    {
                        "scope": ["app"],
                        "subscription_lists": {
                            "subscribe": ["stickers", "gifs"],
                            "unsubscribe": ["cookies"]
                        }
                    },
                    {
                        "scope": ["web"],
                        "subscription_lists": {
                            "subscribe": ["daily_snacks", "brunch"],
                            "unsubscribe": ["promotions"]
                        }
                    }
                 ]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Set<NamedUserScopeType> scopeTypes1 = new
              HashSet<>(Arrays.asList(NamedUserScopeType.APP));

              Set<String> subscribeLists1 = new
              HashSet<>(Arrays.asList("stickers", "gifs"));

              Set<String> unsubscribeLists1 = new
              HashSet<>(Arrays.asList("cookies"));


              Set<NamedUserScopeType> scopeTypes2 = new
              HashSet<>(Arrays.asList(NamedUserScopeType.WEB));

              Set<String> subscribeLists2 = new
              HashSet<>(Arrays.asList("daily_snacks", "brunch"));

              Set<String> unsubscribeLists2 = new
              HashSet<>(Arrays.asList("promotions"));


              NamedUserScope namedUserScope1 = NamedUserScope.newBuilder()
                      .setScopes(scopeTypes1)
                      .setSubscribeLists(subscribeLists1)
                      .setUnsubscribeLists(unsubscribeLists1)
                      .build();

              NamedUserScope namedUserScope2 = NamedUserScope.newBuilder()
                      .setScopes(scopeTypes2)
                      .setSubscribeLists(subscribeLists2)
                      .setUnsubscribeLists(unsubscribeLists2)
                      .build();

              NamedUserScopedPayload namedUserScopedPayload =
              NamedUserScopedPayload.newBuilder()
                      .addNamedUserScope(namedUserScope1)
                      .addNamedUserScope(namedUserScope2)
                      .build();

              NamedUserScopedRequest request =
              NamedUserScopedRequest.newRequest("named_user_id",
              namedUserScopedPayload);

              Response<GenericResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/tags HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "audience": {
                    "named_user_id": [
                      "user-1",
                      "user-2",
                      "user-3"
                    ]
                },
                "add": {
                    "crm": [
                      "tag1",
                      "tag2",
                      "tag3"
                    ],
                    "loyalty": [
                      "tag1",
                      "tag4",
                      "tag5"
                    ]
                },
                "remove": {
                    "loyalty": [
                      "tag6",
                      "tag7"
                    ]
                }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserTagRequest request = NamedUserTagRequest.newRequest()
                      .addNamedUsers("user-1", "user-2", "user-3")
                      .addTags("crm", ImmutableSet.of("tag1", "tag2", "tag3"))
                      .addTags("loyalty", ImmutableSet.of("tag1", "tag4", "tag5"))
                      .removeTags("loyalty", ImmutableSet.of("tag6", "tag7"));

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              named_user = NamedUser(airship=client, named_user_id='user-1')

              resp1 = named_user.tag(
                  group='loyalty',
                  add=['tag2', 'tag3', 'tag4'],
                  remove='tag1'
              )

              resp2 = named_user.tag(
                  group='crm',
                  set=['tag5', 'tag6']
              )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user_tags = UA::NamedUserTags.new(client: airship)

              named_user_ids = ['user-1', 'user-2', 'user-3']

              named_user_tags.set_audience(user_ids: named_user_ids)

              named_user_tags.add(group_name: 'crm', tags: ['tag1', 'tag2',
              'tag3'])

              named_user_tags.remove(group_name: 'loyalty', tags: ['tag6',
              'tag7'])

              named_user_tags.send_request
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/named_users/uninstall:
    post:
      - description: Example delete all users and their associated channels
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/uninstall HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "named_user_id": ["user-id-1234","user-id-5678"]
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              response = NamedUser.uninstall(
                  client=client,
                  named_users=["user-id-1234", "user-id-5678"]
                )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              named_user_uninstall = UA::NamedUserUninstaller.new(client:
              airship)

              named_user_uninstall.named_user_ids = ['user-id-1234']

              named_user_uninstall.uninstall
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserUninstallRequest namedUserUninstallRequest =
              NamedUserUninstallRequest
                      .newUninstallRequest(ImmutableList.of("user-id-1234","user-id-5678"));

              Response<GenericResponse> response =
              client.execute(namedUserUninstallRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/named_users/{named_user_id}':
    post:
      - description: >
          Create a Named User by associating an email and SMS channel and
          setting tags and attributes.
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/john_doe HTTP/1.1
              Authorization: Basic <application or master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "associate": [
                    {
                      "email_address": "john@example.com"
                    },
                    {
                      "channel_id": "f5346fa3-99f1-496d-be37-2895ef58f5a5",
                      "device_type": "sms"
                    }
                ],
                "tags": {
                    "set": {
                        "subscription_status": ["gold"],
                        "favorites" : ["sports", "stocks"]
                    }
                },
                "attributes": [
                  {
                    "action": "set",
                    "key": "name",
                    "value": "John"
                  }
                ]
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, NamedUser
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              associate = [
                {"email_address": "john@example.com"},
                {"channel_id": "f5346fa3-99f1-496d-be37-2895ef58f5a5", "device_type": "sms"}
              ]
              tags = {
                "set": {
                    "subscription_status": ["gold"],
                    "favorites" : ["sports", "stocks"]
                    }
              }
              attributes = [
                  {
                    "action": "set",
                    "key": "name",
                    "value": "John"
                  }
                ]

              named_user = NamedUser(
                airship=client,
                named_user_id="john_doe"
              )

              response = named_user.update(
                associate=associate,
                tags=tags,
                attributes=attributes
              )
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserUpdateChannel namedUserUpdateChannel =
              NamedUserUpdateChannel.newBuilder()
                      .addChannel(NamedUserUpdateDeviceType.ANDROID_CHANNEL, "aa2ae18c-f4b0-48ac-a859-55f26d2a7439")
                      .build();

              Attribute lastName = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("pseudo")
                      .setValue("Pataki")
                      .build();

              NamedUserUpdatePayload namedUserUpdatePayload =
              NamedUserUpdatePayload.newBuilder()
                      .addAttribute(lastName)
                      .addTags("go", List.of("test1","test2"))
                      .removeTags("go",List.of("test3","test4"))
                      .addNamedUserUpdateChannel(namedUserUpdateChannel)
                      .setAction(NamedUserUpdateChannelAction.ASSOCIATE)
                      .build();

              NamedUserUpdateRequest request =
              NamedUserUpdateRequest.newRequest("john", namedUserUpdatePayload);

              Response<NamedUserUpdateResponse> response =
              client.execute(request);
        showMissingLanguagePlaceholders: true
  '/api/named_users/{named_user_id}/attributes':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/named_users/my_named_user/attributes HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "attributes": [
                      {
                          "action": "set",
                          "key": "firstName",
                          "value": "Gyuri",
                          "timestamp": "2020-09-19 12:00:00"
                      },
                      {
                          "action": "remove",
                          "key": "birthDate",
                          "timestamp": "2020-09-19 12:00:00"
                      },
                      {
                          "action": "set",
                          "key": "lastName",
                          "value": "Pataki",
                          "timestamp": "2020-09-19 12:00:00"
                      }
                  ]
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Attribute, ModifyAttributes
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              set_major_league = Attribute(
                                    action="set",
                                    key="major_league",
                                    value="sf_giants")

              remove_minor_league = Attribute(
                                       action="remove",
                                       key="minor_league")

              set_position = Attribute(
                                action="set",
                                key="position",
                                value="LF")

              modifications = ModifyAttributes(
                                 airship=client,
                                 attributes=[set_major_league,
                                             remove_minor_league,
                                             set_position],
                                 named_user="my_named_user"
                              )

              modifications.send()
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Attribute firstName = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("firstName")
                      .setValue("Gyuri")
                      .setTimeStamp(DateTime.parse("2020-09-19T12:00:00Z"))
                      .build();

              Attribute birthDate = Attribute.newBuilder()
                      .setAction(AttributeAction.REMOVE)
                      .setKey("birthDate")
                      .setTimeStamp(DateTime.parse("2020-09-19T12:00:00Z"))
                      .build();

              Attribute lastName = Attribute.newBuilder()
                      .setAction(AttributeAction.SET)
                      .setKey("lastName")
                      .setValue("Pataki")
                      .setTimeStamp(DateTime.parse("2020-09-19T12:00:00Z"))
                      .build();

              NamedUserAttributePayload payload =
              NamedUserAttributePayload.newBuilder()
                      .addAttribute(firstName)
                      .addAttribute(birthDate)
                      .addAttribute(lastName)
                      .build();

              NamedUserAttributeRequest request =
              NamedUserAttributeRequest.newRequest("my_named_user", payload);

              Response<NamedUserAttributeResponse> response =
              client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/payloads:
    get:
      - description: |
          Example retrieve payloads
        examples:
          - lang: HTTP
            source: >
              GET
              /api/payloads?ids=8dc01402-a80c-4369-9bbf-1ca5ace9560e,fc5cee97-171d-4de1-b51e-44dfcdf02925
              HTTP/1.1

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Data-attribute: payloads

              {
                "ok": true,
                "payloads": [
                  {
                    "app_key": "IAex_TTJRuarzs9-o_Gkhg",
                    "push_id": "8dc01402-a80c-4369-9bbf-1ca5ace9560e",
                    "payload": "(some Base64)",
                    "api_version": "IN_APP_V2",
                    "created_at": 1516303729093121980
                  },
                  {
                    "app_key": "IAex_TTJRuarzs9-o_Gkhg",
                    "push_id": "fc5cee97-171d-4de1-b51e-44dfcdf02925",
                    "payload": "(some Base64)",
                    "api_version": "IN_APP_V2",
                    "created_at": 1516304647009588861
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: |
          Example add/replace payload
        examples:
          - lang: HTTP
            source: |
              POST /api/payloads HTTP/1.1
              Content-type: application/json
              Accept: application/vnd.urbanairship+json; version=3

              {
                "app_key": "IAex_TTJRuarzs9-o_Gkhg",
                "push_id": "fada2a68-d941-41bc-b351-e63e04a7b8e2",
                "payload": "(some Base64)",
                "api_version": "IN_APP_V2",
                "created_at": 1516303729093121980
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "operation_id": "03ca94a3-2b27-42f6-be7e-41efc2612cd4"
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Automation
              )
              from urbanairship.automation.pipeline import Pipeline

              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )
              automation = Automation(client)

              for pipeline in automation.list_automations():
                  print(pipeline)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.limit = 5

              automation.list_automations
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "pipelines": [
                    {
                        "creation_time": "2020-03-20T18:37:23",
                        "enabled": true,
                        "immediate_trigger": {
                          "tag_added": { "tag": "bought_shoes" }
                        },
                        "last_modified_time": "2020-03-20T19:35:12",
                        "name": "Shoe buyers",
                        "outcome": {
                          "push": {
                              "audience": "triggered",
                              "device_types": [ "android" ],
                              "notification": { "alert": "So you like shoes, huh?" }
                          }
                        },
                        "status": "live",
                        "uid": "3987f98s-89s3-cx98-8z89-89adjkl29zds",
                        "url": "https://go.urbanairship.com/api/pipelines/3987f98s-89s3-cx98-8z89-89adjkl29zds"
                    },
                    {
                        "..."
                    }
                  ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/pipelines HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name":"The Darkest Pipeline",
                  "enabled":true,
                  "immediate_trigger":"first_open",
                  "outcome":{
                    "push":{
                        "audience":"triggered",
                        "device_types":[
                          "ios",
                          "android",
                          "web"
                        ],
                        "notification":{
                          "alert":"Cool goatee, Abed"
                        }
                    }
                  },
                  "timing":{
                    "delay":{
                        "seconds":7200
                    },
                    "schedule":{
                        "type":"local",
                        "miss_behavior":"wait",
                        "dayparts":[
                          {
                              "days_of_week":[
                                "thursday"
                              ],
                              "allowed_times":[
                                {
                                    "preferred":"21:30:00"
                                }
                              ]
                          }
                        ]
                    }
                  }
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Automation
              )
              from urbanairship.automation.pipeline import Pipeline

              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )
              automation = Automation(client)

              pipeline = Pipeline(
                  name='The Darkest Pipeline',
                  enabled=True,
                  immediate_trigger='first_open',
                  outcome={
                      'push': {
                          'audience': 'triggered',
                          'device_types': ['ios', 'android', 'web'],
                          'notification': {'alert': 'Cool goatee, Abed'}
                      }
                  },
                  timing={
                      'delay': {'seconds': 7200},
                      'schedule': {
                          'type': 'local',
                          'miss_behavior': 'wait',
                          'dayparts': [{
                              'days_of_week': ['thursday'],
                              'allowed_times': [
                                  {'preferred': '21:30:00'}
                              ]
                          }]
                      }
                  }
              )
              response = automation.create(pipeline.payload)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              pipeline = UA::Pipeline.new(client: airship)

              pipeline.enabled = true

              pipeline.immediate_trigger = "first_open"

              pipeline.outcome = {
                  "push": {
                      "audience": "triggered",
                      "device_types": ['ios','android','web'],
                      "notification": {
                          "alert": "Cool goatee, Abed"
                      }
                  }
              }

              automation = UA::Automation.new(client: airship)

              automation.pipeline_object = pipeline.payload

              details = automation.create_automation

              puts(details)
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Content-Length: 123
              Data-Attribute: pipeline_urls
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "86ad9239-373d-d0a5-d5d8-04fed18f79bc",
                  "pipeline_urls": [
                    "https://go.urbanairship/api/pipelines/86ad9239-373d-d0a5-d5d8-04fed18f79bc"
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines/constraints:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/constraints/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "constraints" : [
                      {
                          "rate" : {
                              "pushes" : 30,
                              "lifetimes" : 1
                          }
                      },
                      {
                          "rate" : {
                              "pushes" : 15,
                              "days" : 3
                          }
                      },
                      {
                          "rate" : {
                              "pushes" : 4,
                              "hours" : 6
                          }
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/pipelines/constraints/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "constraints" : [
                      {
                          "rate" : {
                              "pushes" : 15,
                              "days" : 3
                          }
                      },
                      {
                          "rate" : {
                              "pushes" : 4,
                              "hours" : 6
                          }
                      }
                  ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines/deleted:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/deleted/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Automation
              )
              from urbanairship.automation.pipeline import Pipeline

              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )
              automation = Automation(client)
              response = automation.list_deleted_automations()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.start = 2020-11-23

              automation.list_deleted_automations
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "pipelines": [
                    {
                        "deletion_time": "2020-03-31T20:54:45",
                        "pipeline_id": "0sdicj23-fasc-4b2f-zxcv-0baf934f0d69"
                    },
                    {
                        "..."
                    }
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines/limits:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/limits/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "limits" : {
                      "total_limit" : 50,
                      "active_limit" : 20,
                      "total_count" : 23,
                      "active_count" : 7
                  }
              }
        showMissingLanguagePlaceholders: true
  /api/pipelines/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/pipelines/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name":"The Darkest Pipeline",
                  "enabled":true,
                  "immediate_trigger":"first_open",
                  "outcome":{
                    "push":{
                        "audience":"triggered",
                        "device_types":[
                          "ios",
                          "android"
                        ],
                        "notification":{
                          "alert":"Cool goatee, Abed"
                        }
                    }
                  },
                  "timing":{
                    "delay":{
                        "seconds":7200
                    },
                    "schedule":{
                        "type":"local",
                        "miss_behavior":"wait",
                        "dayparts":[
                          {
                              "days_of_week":[
                                "thursday"
                              ],
                              "allowed_times":[
                                {
                                    "preferred":"21:30:00"
                                }
                              ]
                          }
                        ]
                    }
                  }
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Automation
              )
              from urbanairship.automation.pipeline import Pipeline

              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )
              automation = Automation(client)

              pipeline = Pipeline(
                  name='The Darkest Pipeline',
                  enabled=True,
                  immediate_trigger='first_open',
                  outcome={
                      'push': {
                          'audience': 'triggered',
                          'device_types': ['ios', 'android', 'web'],
                          'notification': notification(alert='Cool goatee, Abed')
                      }
                  },
                  timing={
                      'delay': {'seconds': 7200},
                      'schedule': {
                          'type': 'local',
                          'miss_behavior': 'wait',
                          'dayparts': [{
                              'days_of_week': ['thursday'],
                              'allowed_times': [
                                  {'preferred': '21:30:00'}
                              ]
                          }]
                      }
                  }
              )
              response = automation.validate(pipeline.payload)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              pipeline = UA::Pipeline.new(client: airship)

              pipeline.enabled = true

              pipeline.immediate_trigger = "first_open"

              pipeline.outcome = {
                  "push": {
                      "audience": "triggered",
                      "device_types": ['ios','android','web'],
                      "notification": {
                          "alert": "Cool goatee, Abed"
                      }
                  }
              }

              automation = UA::Automation.new(client: airship)

              automation.pipeline_object = pipeline.payload

              automation.validate_automation
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 11
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/pipelines/{pipeline_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE /api/pipelines/0f927674-918c-31ef-51ca-e96fdd234da4
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Automation
              )

              from urbanairship.automation.pipeline import Pipeline


              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )

              automation = Automation(client)

              response =
              automation.delete('0f927674-918c-31ef-51ca-e96fdd234da4')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.pipeline_id = '0f927674-918c-31ef-51ca-e96fdd234da4'

              automation.delete_automation
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/pipelines/4d3ff1fd-9ce6-5ea4-5dc9-5ccbd38597f4 HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Automation
              )

              from urbanairship.automation.pipeline import Pipeline


              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )

              automation = Automation(client)

              pipeline =
              automation.lookup('4d3ff1fd-9ce6-5ea4-5dc9-5ccbd38597f4')
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              automation = UA::Automation.new(client: airship)

              automation.pipeline_id = '4d3ff1fd-9ce6-5ea4-5dc9-5ccbd38597f4'

              automation.lookup_automation
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "pipeline": {
                    "creation_time": "2020-02-14T19:19:19",
                    "enabled": true,
                    "immediate_trigger": { "tag_added": "new_customer" },
                    "last_modified_time": "2020-03-01T12:12:54",
                    "name": "New customer",
                    "outcome": {
                        "push": {
                          "audience": "triggered",
                          "device_types": [ "ios", "android" ],
                          "notification": { "alert": "Hello new customer!" }
                        }
                    },
                    "status": "live",
                    "uid": "86ad9239-373d-d0a5-d5d8-04fed18f79bc",
                    "url": "https://go.urbanairship/api/pipelines/86ad9239-373d-d0a5-d5d8-04fed18f79bc"
                  }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/pipelines/0f927674-918c-31ef-51ca-e96fdd234da4 HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json;

              {
                  "enabled": true,
                  "immediate_trigger": {
                    "tag_added": "new_customer"
                  },
                  "outcome": {
                    "push": {
                        "audience": "triggered",
                        "device_types": [
                          "ios"
                        ],
                        "notification": {
                          "alert": "Hello new customer!"
                        }
                    }
                  }
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Automation
              )
              from urbanairship.automation.pipeline import Pipeline

              client = BasicAuthClient(
                  key='<app key>',
                  secret='<master secret>'
              )
              automation = Automation(client)

              pipeline = Pipeline(
                  enabled=True,
                  immediate_trigger={
                      'tag_added': 'new_customer'
                  },
                  outcome={
                      'audience': 'triggered',
                      'device_types': ['ios'],
                      'notification': notification(alert='Hello new customer!')
                  }
              )
              response = automation.update(
                  pipeline_id='0f927674-918c-31ef-51ca-e96fdd234da4',
                  pipeline=pipeline.payload
              )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              pipeline = UA::Pipeline.new(client: airship)

              pipeline.enabled = true

              pipeline.immediate_trigger = {
                "tag_added": {
                   "tag": "new_customer",
                   "group": "crm"
                  }
              }

              pipeline.outcome = {
                "push": {
                   "audience": "triggered",
                   "device_types": ["ios"],
                   "notification": {
                       "alert": "Hello new customer!"
                      }
                  }
              }

              automation = UA::Automation.new(client: airship)

              automation.pipeline_id = '0f927674-918c-31ef-51ca-e96fdd234da4'

              automation.pipeline_object = pipeline.payload

              automation.update_automation
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/preference-forms/{app_key}':
    get:
      - description: |
          Example list Preference Centers
        examples:
          - lang: HTTP
            source: |
              GET /api/preference_forms/af_ctTpJRuarzs9-o_Gkh3 HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "preference_forms": [
                  {
                    "form": {
                      "display": {
                        "description": "Choose your own adventure",
                        "name": "Preferences"
                      },
                      "id": "seanbird_mobile_app",
                      "sections": [
                        {
                          "display": {
                            "name": "Select the wonderful things you would like to receive notifications for:"
                          },
                          "id": "161bb08b-5e09-424b-8265-b0458920aa74",
                          "items": [
                            {
                              "display": {
                                "description": "Be the first to know about what's on sale each week.",
                                "name": "Weekly Special"
                              },
                              "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                              "subscription_id": "weekly_special",
                              "type": "channel_subscription"
                            },
                          ],
                          "type": "section"
                        }
                      ]
                    },
                    "form_id": "06d0e72f-0a2a-4533-8ea2-7ef83abe22d4",
                    "created": "2021-09-22T15:54:27.1",
                    "last_updated": "2021-10-08T22:55:05.926",
                    "platforms": [
                      "amazon",
                      "android",
                      "ios"
                    ]
                  }
                ]
              }
        showMissingLanguagePlaceholders: false
    post:
      - description: Example create Preference Center
        examples:
          - lang: HTTP
            source: |
              POST /api/preference-forms/af_ctTpJRuarzs9-o_Gkh3: HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "preference_form": {
                  "form": {
                    "display": {
                      "description": "Choose your own adventure",
                      "name": "Preferences"
                    },
                    "id": "seanbird_mobile_app",
                    "sections": [
                      {
                        "display": {
                          "name": "Select the wonderful things you would like to receive notifications for:"
                        },
                        "id": "161bb08b-5e09-424b-8265-b0458920aa74",
                        "items": [
                          {
                            "display": {
                              "description": "Be the first to know about what's on sale each week.",
                              "name": "Weekly Special"
                            },
                            "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                            "subscription_id": "weekly_special",
                            "type": "channel_subscription"
                          },
                        ],
                        "type": "section"
                      }
                    ]
                  },
                  "platforms": [
                    "amazon",
                    "android",
                    "ios"
                  ]
                }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
              }
        showMissingLanguagePlaceholders: false
  /api/push:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                      "ios_channel": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5"
                  },
                  "notification": {
                      "alert": "Hello!"
                  },
                  "device_types": [ "ios" ]
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushPayload payload = PushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("9c36e8c7-5a73-47c0-9716-99fd3d4197d5"))
                      .setNotification(Notifications.alert("Hello!"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .build();

              PushRequest request = PushRequest.newRequest(payload);
              Response<PushResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Push
              )


              client = BasicAuthClient(
                  key="<app key>",
                  secret="<master secret>"
              )


              push = Push(client)

              push.audience = {'ios_channel':
              '9c36e8c7-5a73-47c0-9716-99fd3d4197d5'}

              push.notification = {'alert': 'Hello!'}

              push.device_types = ['ios']

              push.send()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.or(
              UA.ios_channel('9c36e8c7-5a73-47c0-9716-99fd3d4197d5'))

              push.notification = UA.notification(alert: 'Hello!')

              push.device_types = UA.device_types(['ios'])

              push.send_push
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "9d78a53b-b16a-c58f-b78d-181d5e242078"
                  ]
              }
        showMissingLanguagePlaceholders: true
      - description: Example push with localizations
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "device_types": [ "ios", "android" ],
                 "audience": {
                    "tag": "needs_a_greeting",
                    "group": "new_customer"
                 },
                 "notification": {
                    "alert": "Hi!"
                 },
                 "localizations": [
                     {
                        "language": "de",
                        "country": "AT",
                        "notification": {
                           "alert": "Grüss Gott"
                        }
                     },
                     {
                        "language": "de",
                        "country": "DE",
                        "notification": {
                           "alert": "Guten Tag"
                        }
                     }
                  ]
               }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Push
              )

              client = BasicAuthClient(
                  key="<app key>",
                  secret="<master secret>"
              )

              push = Push(client)
              push.audience = {
                  'tag': 'needs_a_greeting',
                  'group': 'new_customer'
              }
              push.notification = {'alert': 'Hi!'}
              push.localizations = [
                  {
                      'country': 'at',
                      'language': 'de',
                      'notification': {'alert': "Grüss Gott"}
                  },
                  {
                      'country': 'de',
                      'language': 'de',
                      'notification': {'alert': "Guten Tag"}
                  }
              ]
              push.device_types = ['ios', 'android']
              push.send()
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Localization localization = Localization.newBuilder()
                      .setCountry("AT")
                      .setLanguage("de")
                      .setNotification(Notifications.alert("Grüss Gott"))
                      .build();

              PushPayload payload = PushPayload.newBuilder()
                      .setAudience(Selectors.or(Selectors.tagWithGroup("needs_a_greeting", "new_customer")))
                      .addLocalization(localization)
                      .setNotification(Notifications.alert("Hi!"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                      .build();

              PushRequest request = PushRequest.newRequest(payload);
              Response<PushResponse> response = client.execute(request);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.tag("needs_a_greeting", group:'new_customer')

              push.notification = UA.notification(alert: 'Hi!')

              push.device_types = UA.device_types(['ios'])

              push.localizations = {
                "language": "de",
                "country": "AT",
                "notification": {
                "alert": "Grüss Gott"
                }
              }

              push.send_push
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "9d78a53b-b16a-c58f-b78d-181d5e242078",
                      "1cbfbfa2-08d1-92c2-7119-f8f7f670f5f6",
                      "939c3796-a755-413b-a36b-3026b1f92df8"
                  ],
                  "localized_ids": [
                     "1a38a2ba-c174-d32f-d01b-481a5d241934"
                  ]
              }
        showMissingLanguagePlaceholders: true
      - description: Example email being sent using Push API with template ID
        examples:
          - lang: HTTP
            source: |
              POST /api/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                      "tag": "needs_a_greeting",
                      "group": "new_customer"
                  },
                  "device_types": [
                      "email"
                  ],
                  "notification": {
                    "email": {
                      "message_type": "commercial",
                      "reply_to": "no-reply@airship.com",
                      "sender_address": "team@airship.com",
                      "sender_name": "Airship",
                      "template": {
                          "template_id": "876624ff-0120-4364-bf02-dba3d0cb5b85"
                      }
                    }
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "be97b696-8d6b-4aec-ac50-c9cfc4be57d6",
                  "push_ids": [
                      "72ce9ade-aa71-4fbe-b960-246f1a2ca9ee"
                  ],
                  "message_ids": [],
                  "content_urls": [],
                  "localized_ids": []
              }
        showMissingLanguagePlaceholders: true
  /api/push/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/push/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience": {
                      "ios_channel": "9c36e8c7-5a73-47c0-9716-99fd3d4197d5"
                  },
                  "notification": {
                      "alert": "Hello!"
                  },
                  "device_types": [ "ios" ]
              }
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Push
              )

              from urbanairship.push.payload import notification, ios, android,
              web


              client = BasicAuthClient(
                  key="<app key>",
                  secret="<master secret>"
              )


              push = Push(client)

              push.audience = {'ios_channel':
              '9c36e8c7-5a73-47c0-9716-99fd3d4197d5'}

              push.notification = notification(alert='Hello!')

              push.device_types = ['ios']

              push.validate()
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushPayload payload = PushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("9c36e8c7-5a73-47c0-9716-99fd3d4197d5"))
                      .setNotification(Notifications.alert("Hello!"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .build();

              PushRequest request =
              PushRequest.newRequest(payload).setValidateOnly(true);

              Response<PushResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/regions:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/regions/?limit=100&start=100 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Data-Attribute: regions

              Link:
              <https://go.urbanairship.com/api/regions?limit=100&start=100>;
              rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "ok": true,
                 "next_page": "https://go.urbanairship.com/api/regions?limit=100&start=100",
                 "count": 100,
                 "regions": [
                     {
                         "region_id": "abe5deb3-01d0-436e-8c5d-94b6421a01e0",
                         "name": "My Favorite Place",
                         "created_at": "2020-06-09T12:34:56",
                         "updated_at": "2020-06-09T12:34:56",
                         "geofence": {
                             "type": "POLYGON",
                             "points": [
                                 {
                                     "latitude": 90.0,
                                     "longitude": 120.0
                                 },
                                 {
                                     "latitude": 45.0,
                                     "longitude": 120.0
                                 },
                                 {
                                     "latitude": 0.0,
                                     "longitude": 0.0
                                 }
                             ]
                         },
                         "beacons": [
                             {
                                 "name": "entryway",
                                 "id": "VLSHZAOEXOFCMLDVTKFQ"
                             },
                             {
                                 "name": "Exhibit A",
                                 "id": "ZAQYMNOZKRFCRPYEUCZI"
                             }
                         ],
                         "attributes": {
                             "store_name": "Tonali's Donuts"
                         },
                         "source_info": {
                             "source": "GIMBAL",
                             "region_id": "C56654BC0C3243D6A4B7A3673560D6F8",
                             "vendor_href": "https://manager.gimbal.com/api/v2/places/C56654BC0C3243D6A4B7A3673560D6F8"
                         }
                     }
                 ]
              }
        showMissingLanguagePlaceholders: true
  '/api/regions/{region_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/regions/7d4d9a5c-eff5-40f2-b648-4352c166e878 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: region
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "region": {
                      "region_id": "7dbd9a5c-eff5-40f2-b648-4352c1668878",
                      "created_at": "2020-08-24T23:15:22.900",
                      "updated_at": "2020-08-24T23:15:22.900",
                      "name": "Alberta Park",
                      "source_info": {
                          "source": "GIMBAL",
                          "region_id": "C56654BC0C3243D6A4B7A3673560D6F8",
                          "vendor_href": "https://manager.gimbal.com/api/v2/places/C56654BC0C3243D6A4B7A3673560D6F8"
                      },
                      "geofence": {
                          "type": "CIRCLE",
                          "center": {
                              "latitude": 45.56447530000002,
                              "longitude": -122.64461097354126
                          },
                          "radius": 200
                      },
                      "attributes": {
                           "park_name": "alberta",
                           "type": "park"
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  '/api/remote-audience-check/app/{app_key}':
    post:
      - description: Example remote audience check
        examples:
          - lang: HTTP
            source: >
              POST /api/remote-audience-check/app/af_ctTpJRuarzs9-o_Gkh3:
              HTTP/1.1

              Authorization: <Contact JWT Token>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json

              X-UA-Contact-ID: 7c24ebdd-ec06-47d4-9a56-ced8611f5b52

              X-UA-Appkey: af_ctTpJRuarzs9-o_Gkh3


              {
                "channel_id": "164c3a13-9c75-4ea9-be2c-1bed2c97f9c3",
                "contact_id": "7c24ebdd-ec06-47d4-9a56-ced8611f5b52",
                "context": {
                  "campaign": "cool_campaign_1"
                }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "allowed": false,
                "cache_seconds": 15
              }
        showMissingLanguagePlaceholders: true
  '/api/remote-config/app/{app_key}/{platform}':
    get:
      - description: Example get configuration
        examples:
          - lang: HTTP
            source: |
              GET /api/remote-config/app/IAex_TTJRuarzs9-o_Gkhg/common HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 Ok
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "timestamp": "2025-01-01T12:00:00",
                "data": {
                  "message_center": {
                    "background_color": "0000FF",
                    "font": "Comic Sans"
                  },
                  "other_thing": {
                    "foo": "bar"
                  }
                },
                "frequency_constraints": [
                  {
                    "period": "hours",
                    "range": 10,
                    "boundary": 101,
                    "category": "category message"
                  },
                  {
                    "period": "days",
                    "range": 3,
                    "boundary": 1001
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example update configuration
        examples:
          - lang: HTTP
            source: |
              POST /api/remote-config/app/IAex_TTJRuarzs9-o_Gkhg/common HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
              Content-type: application/json

              {
                "notify": true,
                "set_values": [
                  {
                    "scope": ["message_center", "font"],
                    "value": "Times New Roman"
                  }
                ],
                "deletes" : [
                  {
                    "scope": ["message_center", "background_color"]
                  }
                ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 Ok
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
      - description: Example delete value object
        examples:
          - lang: json
            source: >
              // Only the final field in the scope is removed, so the following
              delete:

              {
                "scope": ["message_center", "font"]
              }


              // When applied to the following payload:

              {
                "message_center": {
                  "font": "Times New Roman",
                  "background_color": "FFFFFF"
                }
              }


              // Would result in the following final payload:

              {
                "message_center": {
                  "background_color": "FFFFFF"
                }
              }
      - description: Example frequency constraints object
        examples:
          - lang: json
            source: |
              {
                "period": "hours",
                "range": 10,
                "boundary": 101,
                "category": "hello"
              }
      - description: Example set value object
        examples:
          - lang: json
            source: |
              // Example 1
              // To set a top-level field, a scope of length 1 should be used.
              {
                "scope": ["message_center"],
                "value": {
                  "font": "Comic Sans",
                  "background_color": "FFFFFF"
                }
              }

              // Example 2
              // While processing this update against the target data,
              // objects will be created as necessary,
              // so the following update:
              {
                "scope": ["foo", "bar", "baz"],
                "value": 1000
              }

              // When applied to the following payload:
              {
                "unrelated": { }
              }

              // Would result in the following final payload:
              {
                "unrelated": { },
                "foo": {
                  "bar": {
                    "baz": 1000
                  }
                }
              }
  '/api/remote-data-contact/{platform}/{contact_id}':
    get:
      - description: |
          Example retrieve contact remote data
        examples:
          - lang: HTTP
            source: >
              GET
              /api/remote-data-contact/android/3c2be0e5-8a1a-5d3d-b64c-925c339c504a:
              HTTP/1.1

              Authorization: <Json Web Token>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json

              X-UA-Appkey: af_ctTpJRuarzs9-o_Gkh3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "payloads": [
                  {
                    "type": "in_app_messages",
                    "timestamp": "2023-02-03T22:33:13.781",
                    "data": {
                      "in_app_messages": [
                        {
                          "message": {
                            "name": "my message",
                            "message_id": "01bbe0e5-8a1a-483d-ac4c-925c333150ae",
                            "display_type": "fullscreen",
                            "display": {
                              "heading": {
                                "text": "header",
                                "color": "#000000",
                                "size": 14,
                                "font_family": [
                                  "sans-serif"
                                ],
                                "alignment": "left"
                              },
                              "body": {
                                "text": "body",
                                "color": "#000000",
                                "size": 14,
                                "font_family": [
                                  "sans-serif"
                                ],
                                "alignment": "left"
                              },
                              "background_color": "#ffffff",
                              "button_layout": "stacked",
                              "buttons": [
                                {
                                  "label": {
                                    "text": "bouton",
                                    "color": "#ffffff",
                                    "size": 12,
                                    "font_family": [
                                      "sans-serif"
                                    ],
                                    "style": [
                                      "bold"
                                    ]
                                  },
                                  "id": "bouton",
                                  "background_color": "#000000",
                                  "border_color": "#000000",
                                  "border_radius": 2,
                                  "actions": {

                                  }
                                }
                              ],
                              "footer": {
                                "label": {
                                  "text": "footer",
                                  "color": "#ffa600",
                                  "size": 18,
                                  "font_family": [
                                    "Gothem SSm",
                                    "gothem_family",
                                    "sans-serif"
                                  ],
                                  "alignment": "left",
                                  "style": [
                                    "bold",
                                    "italic",
                                    "underline"
                                  ]
                                },
                                "id": "footer",
                                "actions": {
                                  "open_external_url_action": "https://google.fr"
                                }
                              },
                              "media": {
                                "url": "https://hangar-dl.urbanairship.com/binary/public/af_ctTpJRuarzs9-o_Gkh3/8da2a9db-309e-4f11-85e2-b24429e9bcc0",
                                "type": "image",
                                "description": "Image"
                              },
                              "dismiss_button_color": "#000000",
                              "template": "header_media_body"
                            },
                            "audience": {
                              "tags": {
                                "and": [
                                  {
                                    "tag": "paris"
                                  }
                                ]
                              },
                              "miss_behavior": "skip"
                            }
                          },
                          "created": "2021-07-19T12:44:21.152",
                          "last_updated": "2021-07-19T12:44:21.152",
                          "additional_audience_check_overrides": {
                            "bypass": true
                          },
                          "triggers": [
                            {
                              "type": "active_session",
                              "goal": 1
                            }
                          ],
                          "edit_grace_period": 14,
                          "requires_eligibility": true,
                          "reporting_metadata": "{"pipeline_id":"7f6c8656-adfe-480f-98c3-d9fa45434e39"}"
                        }
                      ]
                    }
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
  '/api/remote-data/app/{app_key}/{platform}':
    get:
      - description: |
          Example retrieve remote data
        examples:
          - lang: HTTP
            source: |
              GET /api/remote-data/app/af_ctTpJRuarzs9-o_Gkh3/android HTTP/1.1
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              { "ok": true,
                "payloads": [
                  { "type": "app_config",
                    "timestamp": "2023-01-31T16:27:28.13",
                    "data": {
                      "airship_config": {
                        "analytics_url": "https://combine.urbanairship.com",
                        "device_api_url": "https://device-api.urbanairship.com",
                        "wallet_url": "https://wallet-api.urbanairship.com",
                        "metered_usage_url": "https://metered-usage-api.urbanairship.com"
                      },
                      "additional_audience_check": {"url": "https://device-api.urbanairship.com/api/remote-audience-check/app/af_ctTpJRuarzs9-o_Gkh3"},
                      "testkey": "prod",
                      "fetch_contact_remote_data": false
                    }
                  },
                  { "type": "in_app_messages",
                    "timestamp": "2023-02-03T22:33:13.781",
                    "data": {
                      "in_app_messages": [
                        { "message": {
                            "name": "my message",
                            "message_id": "01bbe0e5-8a1a-483d-ac4c-925c333150ae",
                            "display_type": "fullscreen",
                            "display": {
                              "heading": {
                                "text": "header",
                                "color": "#000000",
                                "size": 14,
                                "font_family": ["sans-serif"],
                                "alignment": "left"
                              },
                              "body": {
                                "text": "body",
                                "color": "#000000",
                                "size": 14,
                                "font_family": ["sans-serif"],
                                "alignment": "left"
                              },
                              "background_color": "#ffffff",
                              "button_layout": "stacked",
                              "buttons": [
                                { "label": {
                                    "text": "bouton",
                                    "color": "#ffffff",
                                    "size": 12,
                                    "font_family": ["sans-serif"],
                                    "style": ["bold"]
                                  },
                                  "id": "bouton",
                                  "background_color": "#000000",
                                  "border_color": "#000000",
                                  "border_radius": 2,
                                  "actions": {}
                                }
                              ],
                              "footer": {
                                "label": {
                                  "text": "footer",
                                  "color": "#ffa600",
                                  "size": 18,
                                  "font_family": ["Gothem SSm", "gothem_family", "sans-serif"],
                                  "alignment": "left",
                                  "style": ["bold", "italic", "underline"]
                                },
                                "id": "footer",
                                "actions": {"open_external_url_action": "https://google.fr"}
                              },
                              "media": {
                                "url": "https://hangar-dl.urbanairship.com/binary/public/af_ctTpJRuarzs9-o_Gkh3/8da2a9db-309e-4f11-85e2-b24429e9bcc0",
                                "type": "image",
                                "description": "Image"
                              },
                              "dismiss_button_color": "#000000",
                              "template": "header_media_body"
                            },
                            "audience": {
                              "tags": { "and": [ {"tag": "paris"} ] },
                              "miss_behavior": "skip"
                            }
                          },
                          "created": "2021-07-19T12:44:21.152",
                          "last_updated": "2021-07-19T12:44:21.152",
                          "additional_audience_check_overrides": {"context": {"campaign": "cool_campaign_1"}},
                          "triggers": [ {"type": "active_session", "goal": 1} ],
                          "edit_grace_period": 14
                        }
                      ]
                    }
                  },
                  {
                    "type": "preference_forms",
                    "timestamp": "2022-12-14T18:52:31.938",
                    "data": {
                      "preference_forms": [
                        { "form": {
                            "display": {
                              "description": "Choose your own adventure",
                              "name": "Preferences"
                            },
                            "id": "seanbird_mobile_app",
                            "sections": [
                              { "display": {"name": "Select the wonderful things you would like to receive notifications for:"},
                                "id": "161bb08b-5e09-424b-8265-b0458920aa74",
                                "items": [
                                  { "display": {"description": "Be the first to know about what's on sale each week.", "name": "Weekly Special"},
                                    "id": "efe3e322-33c7-4157-b765-046b9cd2647a",
                                    "subscription_id": "weekly_special",
                                    "type": "channel_subscription"
                                  },
                                  { "display": {"description": "", "name": "Celebrity goat gossip"},
                                    "id": "ceb607e4-6924-46d3-b4c0-c17d1d6cb86f",
                                    "subscription_id": "celebrity_goat_gossip",
                                    "type": "channel_subscription"
                                  },
                                  { "display": {"description": "", "name": "Goat traffic"},
                                    "id": "07b324e9-1b05-4cab-90b6-cae5b6843037",
                                    "subscription_id": "goat_traffic",
                                    "type": "channel_subscription"
                                  },
                                  { "display": {"description": "", "name": "Goat crime"},
                                    "id": "498f7bde-537a-4739-a130-18773304ff1c",
                                    "subscription_id": "goat_crime",
                                    "type": "channel_subscription"
                                  },
                                  { "display": {"description": "", "name": "Goat business"},
                                    "id": "c6887ac3-fead-4fac-a2ac-03f8fcebabfb",
                                    "subscription_id": "goat_business",
                                    "type": "channel_subscription"
                                  },
                                  { "display": {"description": "It's just like normal yoga, but with goats.", "name": "Goat yoga"},
                                    "id": "112d528d-8096-435c-b68a-e9225a53ad7b",
                                    "subscription_id": "goat_yoga",
                                    "type": "channel_subscription"
                                  }
                                ],
                                "type": "section"
                              }
                            ]
                          },
                          "form_id": "06d0e72f-0a2a-4533-8ea2-7ef83abe22d4",
                          "created": "2021-09-22T15:54:27.1",
                          "last_updated": "2021-10-08T22:55:05.926",
                          "platforms": ["amazon", "android", "ios"]
                        }
                      ]
                    }
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
  /api/reports/activity/details:
    get:
      - description: Example (response truncated)
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/activity/details?start=2020-06-02T20:47:20&end=2023-01-31T20:47:20
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "app_key": "Wz9d8TlSWk0lZTAwzHA2qc",
                  "start": "2020-06-02T20:47:20",
                  "end": "2023-01-31T20:47:20",
                  "limit": 10,
                  "next_page": "https://go.urbanairship.com/api/reports/activity/details...",
                  "activities": [
                      {
                          "push_id": "ecb8eaf0-0430-4dfa-93d8-c3149f479d96",
                          "timestamp": "2023-01-31 20:47:20",
                          "type": "GROUP",
                          "experiment": true,
                          "details": {
                              "interaction": {
                                  "web": {
                                      "clicks": 20,
                                      "sessions": 13
                                  },
                                  "app": {
                                      "influenced": 13,
                                      "direct": 12,
                                      "indirect": 10,
                                      "rich_read": 5
                                  }
                              },
                              "delivery": {
                                  "web": {
                                      "total": 13
                                  },
                                  "app": {
                                      "silent": 125,
                                      "alerting": 13,
                                      "rich": 5,
                                      "in_app": {
                                          "impressions": 10,
                                          "impressions_opted_in": 5,
                                          "impressions_opted_out": 5
                                      }
                                  }
                              }
                          }
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/reports/devices:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/reports/devices?date=2020-08-28T00:00:00 HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              DevicesReportRequest request = DevicesReportRequest.newRequest()
                      .setDate(DateTime.parse("2020-08-28T10:34:22Z"));

              Response<DevicesReportResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BasicAuthClient, DevicesReport
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              date = datetime(2020, 8, 28)
              response = DevicesReport(airship=client).get(date=date)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              d = UA::DevicesReport.new(client: airship)

              devices = d.get(date: '2020/08/28')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "total_unique_devices": 13186,
                  "date_closed": "2020-08-28 00:00:00",
                  "date_computed": "2020-08-29 13:30:45",
                  "counts": {
                      "ios": {
                          "unique_devices": 231,
                          "opted_in": 142,
                          "opted_out": 89,
                          "uninstalled": 2096
                      },
                      "android": {
                          "unique_devices": 11795,
                          "opted_in": 226,
                          "opted_out": 11569,
                          "uninstalled": 1069
                      },
                      "amazon": {
                          "unique_devices": 29,
                          "opted_in": 22,
                          "opted_out": 7,
                          "uninstalled": 9
                      },
                      "sms": {
                          "unique_devices": 26,
                          "opted_in": 23,
                          "opted_out": 3,
                          "uninstalled": 17
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/events:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/events?start=2020-08-01T10:00:00.000Z&end=2020-08-15T20:00:00.000Z&precision=MONTHLY&page_size=20
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              DateTime startDate = DateTime.parse("2022-01-01T10:00:00");

              DateTime endDate =  DateTime.parse("2023-01-01T10:00:00");


              CustomEventsDetailsListingRequest
              customEventsDetailsListingRequest =
              CustomEventsDetailsListingRequest
                      .newRequest(startDate, endDate)
                      .setPageSize(10)
                      .setPrecision(Precision.MONTHLY)
                      .setPage(2);

              Response<CustomEventsDetailsListingResponse> response =
              client.execute(customEventsDetailsListingRequest);

              List<CustomEventsDetailResponse> customEventsDetailResponses =
              response.getBody().get().getEvents().get();
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, CustomEventsList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 8, 1)

              end_date = datetime(2020, 8, 15)

              for event in CustomEventsList(airship=client,
              start_date=start_date, end_date=end_date, precision='MONTHLY'):
                  print(event)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "total_value": 2,
                  "total_count": 709,
                  "next_page": "https://go.urbanairship.com/api/reports/events?start=2020-08-01T10:00:00.000Z&end=2020-08-15T20:00:00.000Z&precision=MONTHLY&page_size=20&page=2",
                  "events": [
                      {
                          "name": "banner_image",
                          "conversion": "indirect",
                          "location": "ua_mcrap",
                          "count": 1,
                          "value": 1
                      },
                      {
                          "name": "bounce",
                          "conversion": "direct",
                          "location": "custom",
                          "count": 23,
                          "value": 0
                      },
                      {
                          "name": "button-click-Do it ",
                          "conversion": "direct",
                          "location": "in_app_message",
                          "count": 1,
                          "value": 0
                      },
                      {
                          "name": "button-click-Get Notifications",
                          "conversion": "unattributed",
                          "location": "in_app_message",
                          "count": 3,
                          "value": 0
                      },
                      {
                          "name": "button-click-RATE NOW",
                          "conversion": "direct",
                          "location": "in_app_message",
                          "count": 1,
                          "value": 0
                      },
                      {
                          "name": "button-click-Rate the app.",
                          "conversion": "direct",
                          "location": "in_app_message",
                          "count": 1,
                          "value": 0
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/events/summary/pergroup/{group_id}':
    get:
      - description: Example request
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/events/summary/pergroup/8bd09679-f672-4783-a31a-d4e516f9e99c
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
        showMissingLanguagePlaceholders: true
      - description: Response with Group ID parameter
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "group_id": "8bd09679-f672-4783-a31a-d4e516f9e99c",
                  "events": [
                      {
                          "name": "custom_event_name",
                          "location": "custom",
                          "conversion": "direct",
                          "count": 4,
                          "value": 16.4
                      },
                      ...
                  ],
                  "total_count": 12,
                  "total_value": 321.2,
                  "next_page": "https://go.urbanairship.com/api/reports/events/summary/pergroup/...",
                  "prev_page": "https://go.urbanairship.com/api/reports/events/summary/pergroup/..."
              }
  '/api/reports/events/summary/perpush/{push_id}':
    get:
      - description: Example request
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/events/summary/perpush/8bd09679-f672-4783-a31a-d4e516f9e99c
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
        showMissingLanguagePlaceholders: true
      - description: Response with Push ID parameter
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "push_id": "8bd09679-f672-4783-a31a-d4e516f9e99c",
                  "events": [
                      {
                          "name": "custom_event_name",
                          "location": "custom",
                          "conversion": "direct",
                          "count": 4,
                          "value": 16.4
                      },
                      ...
                  ],
                  "total_count": 12,
                  "total_value": 321.2,
                  "next_page": "https://go.urbanairship.com/api/reports/events/summary/perpush/...",
                  "prev_page": "https://go.urbanairship.com/api/reports/events/summary/perpush/..."
              }
      - description: Response with variant parameter
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "push_id": "8bd09679-f672-4783-a31a-d4e516f9e99c",
                  "variant": 1,
                  "events": [
                      {
                          "name": "custom_event_name",
                          "location": "custom",
                          "conversion": "direct",
                          "count": 4,
                          "value": 16.4
                      },
                      ...
                  ],
                  "total_count": 12,
                  "total_value": 321.2,
                  "next_page": "https://go.urbanairship.com/api/reports/events/summary/perpush/...",
                  "prev_page": "https://go.urbanairship.com/api/reports/events/summary/perpush/..."
              }
  '/api/reports/experiment/detail/{push_id}/{variant_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/experiment/detail/b43ae1b2-3ff6-4c02-adb2-79deac0bbb19/2
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ExperimentVariantReportRequest experimentVariantReportRequest =
              ExperimentVariantReportRequest.newRequest("b43ae1b2-3ff6-4c02-adb2-79deac0bbb19",
              "1");

              Response<ExperimentVariantReportResponse> response =
              client.execute(experimentVariantReportRequest);
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BasicAuthClient, ExperimentReport
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              experiment_report = ExperimentReport(airship=client)
              variant_report = experiment_report.get_variant(
                push_id="b43ae1b2-3ff6-4c02-adb2-79deac0bbb19",
                variant=2
              )
              print(variant_report)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "app_key": "some_app_key",
                  "experiment_id": "a7806815-6483-4cb9-9d74-bc3b4f3dc1b8",
                  "push_id": "b43ae1b2-3ff6-4c02-adb2-79deac0bbb19",
                  "created": "2020-02-25 23:03:12",
                  "variant": 2,
                  "variant_name": "thing_two",
                  "sends": 64,
                  "direct_responses": 3,
                  "influenced_responses": 1,
                  "platforms": {
                      "android": {
                          "direct_responses": 0,
                          "influenced_responses": 0,
                          "sends": 22
                      },
                      "ios": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 36
                      },
                      "amazon": {
                          "direct_responses": 0,
                          "influenced_responses": 0,
                          "sends": 0
                      },
                      "web": {
                          "direct_responses": 3,
                          "indirect_responses": 0,
                          "sends": 6
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/experiment/overview/{push_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/experiment/overview/b43ae1b2-3ff6-4c02-adb2-79deac0bbb19
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ExperimentOverviewReportRequest experimentOverviewReportRequest =
              ExperimentOverviewReportRequest.newRequest("4b83d756-cc64-45e0-b140-3f5ec04170fb");

              Response<ExperimentOverviewReportResponse> response =
              client.execute(experimentOverviewReportRequest);
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BasicAuthClient, ExperimentReport
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              experiment_report = ExperimentReport(airship=client)
              overview_report = experiment_report.get_overview(
                                  push_id="b43ae1b2-3ff6-4c02-adb2-79deac0bbb19"
                                )
              print(overview_report)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "app_key": "some_app_key",
                 "experiment_id": "a7806815-6483-4cb9-9d74-bc3b4f3dc1b8",
                 "push_id": "b43ae1b2-3ff6-4c02-adb2-79deac0bbb19",
                 "created": "2020-02-25 23:03:12",
                 "sends": 532,
                 "direct_responses": 50,
                 "influenced_responses": 60,
                 "web_clicks": 6,
                 "web_sessions": 8,
                 "variants": [
                    {
                       "id" : 0,
                       "name": "call to action",
                       "audience_pct": 45.0,
                       "sends": 238,
                       "direct_responses": 32,
                       "direct_response_pct": 13.44,
                       "indirect_responses": 0,
                       "indirect_response_pct": 0.0
                    },
                    {
                       "id" : 1,
                       "name": "gentle reminder",
                       "audience_pct": 45.0,
                       "sends": 251,
                       "direct_responses": 20,
                       "direct_response_pct": 7.97,
                       "indirect_responses": 4,
                       "indirect_response_pct": 1.59
                    }
                 ],
                 "control": {
                   "audience_pct": 10.0,
                   "sends": 50,
                   "responses": 1,
                   "response_rate_pct": 2.0
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/opens:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/opens?start=2020-08-01T10:00&end=2020-08-15T20:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.APP_OPENS)
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, AppOpensList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 8, 1)

              end_date = datetime(2020, 8, 15)

              for open in AppOpensList(airship=client, start_date=start_date,
              end_date=end_date, precision='DAILY'):
                  print(open)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::AppOpensList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-15',
                  precision: 'MONTHLY')
              listing.each do |app_opens|
                  puts(app_opens)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "opens": [
                      {
                          "date": "2020-08-01 00:00:00",
                          "ios": 350,
                          "android": 250
                      }
                  ]
              }
        showMissingLanguagePlaceholders: tru
  /api/reports/optins:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/optins?start=2020-08-01T10:00&end=2020-08-15T20:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.OPT_INS)
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, OptInList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 8, 1)

              end_date = datetime(2020, 8, 15)

              for opt_in in OptInList(airship=client, start_date=start_date,
              end_date=end_date, precision='DAILY'):
                  print(opt_in)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::OptInList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-15',
                  precision: 'MONTHLY')
              listing.each do |opt_ins|
                  puts(opt_ins)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "optins": [
                    {
                       "android": 50,
                       "date": "2020-05-01 00:00:00",
                       "ios": 500
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/optouts:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/optouts?start=2020-08-01T10:00&end=2020-08-15T20:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.OPT_OUTS)
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, OptOutList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 8, 1)

              end_date = datetime(2020, 8, 15)

              for opt_out in OptOutList(airship=client, start_date=start_date,
              end_date=end_date, precision='DAILY'):
                  print(opt_out)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::OptOutList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-15',
                  precision: 'MONTHLY')
              listing.each do |opt_outs|
                  puts(opt_outs)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "optouts": [
                    {
                       "android": 5,
                       "date": "2020-05-01 00:00:00",
                       "ios": 25
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/pergroup/detail/{group_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/pergroup/detail/57ef3728-79dc-46b1-a6b9-20081e561f97
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "app_key": "some_app_key",
                  "group_id": "57ef3728-79dc-46b1-a6b9-20081e561f97",
                  "created": "2023-07-25 23:03:12",
                  "rich_deletions": 0,
                  "rich_responses": 0,
                  "rich_sends": 0,
                  "sends": 103,
                  "alerting_sends": 103,
                  "silent_sends": 0,
                  "direct_responses": 0,
                  "influenced_responses": 3,
                  "platforms": {
                      "android": {
                          "direct_responses": 0,
                          "influenced_responses": 0,
                          "sends": 22
                      },
                      "ios": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 36
                      },
                      "amazon": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 5
                      },
                      "web": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 40
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/pergroup/series/{group_id}':
    get:
      - description: Example (response truncated to 2 items)
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/pergroup/series/57ef3728-79dc-46b1-a6b9-20081e561f97
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "app_key": "some_app_key",
                  "group_id": "57ef3728-79dc-46b1-a6b9-20081e561f97",
                  "start": "2023-07-25 23:00:00",
                  "end": "2023-07-26 11:00:00",
                  "precision": "HOURLY",
                  "counts": [
                      {
                          "push_platforms": {
                              "all": {
                                  "direct_responses": 0,
                                  "influenced_responses": 1,
                                  "sends": 58
                              },
                              "android": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 22
                              },
                              "ios": {
                                  "direct_responses": 0,
                                  "influenced_responses": 1,
                                  "sends": 36
                              }
                          },
                          "rich_push_platforms": {
                              "all": {
                                  "responses": 0,
                                  "sends": 0
                              }
                          },
                          "time": "2023-07-25 23:00:00"
                      },
                      {
                          "push_platforms": {
                              "all": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 0
                              },
                              "android": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 0
                              },
                              "ios": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 0
                              }
                          },
                          "rich_push_platforms": {
                              "all": {
                                  "responses": 0,
                                  "sends": 0
                              }
                          },
                          "time": "2023-07-26 00:00:00"
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/perpush/detail/{push_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/perpush/detail/57ef3728-79dc-46b1-a6b9-20081e561f97
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "app_key": "some_app_key",
                  "push_id": "57ef3728-79dc-46b1-a6b9-20081e561f97",
                  "created": "2023-07-25 23:03:12",
                  "rich_deletions": 0,
                  "rich_responses": 0,
                  "rich_sends": 0,
                  "sends": 103,
                  "alerting_sends": 103,
                  "silent_sends": 0,
                  "direct_responses": 0,
                  "influenced_responses": 3,
                  "platforms": {
                      "android": {
                          "direct_responses": 0,
                          "influenced_responses": 0,
                          "sends": 22
                      },
                      "ios": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 36
                      },
                      "amazon": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 5
                      },
                      "web": {
                          "direct_responses": 0,
                          "influenced_responses": 1,
                          "sends": 40
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/perpush/pushbody/{push_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/perpush/pushbody/57ef3728-79dc-46b1-a6b9-20081e561f97
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "push_body": "<Base64-encoded string>"
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/perpush/series/{push_id}':
    get:
      - description: Example (response truncated to 2 items)
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/perpush/series/57ef3728-79dc-46b1-a6b9-20081e561f97
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                  "app_key": "some_app_key",
                  "push_id": "57ef3728-79dc-46b1-a6b9-20081e561f97",
                  "start": "2023-07-25 23:00:00",
                  "end": "2023-07-26 11:00:00",
                  "precision": "HOURLY",
                  "counts": [
                      {
                          "push_platforms": {
                              "all": {
                                  "direct_responses": 0,
                                  "influenced_responses": 1,
                                  "sends": 58
                              },
                              "android": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 22
                              },
                              "ios": {
                                  "direct_responses": 0,
                                  "influenced_responses": 1,
                                  "sends": 36
                              }
                          },
                          "rich_push_platforms": {
                              "all": {
                                  "responses": 0,
                                  "sends": 0
                              }
                          },
                          "time": "2023-07-25 23:00:00"
                      },
                      {
                          "push_platforms": {
                              "all": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 0
                              },
                              "android": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 0
                              },
                              "ios": {
                                  "direct_responses": 0,
                                  "influenced_responses": 0,
                                  "sends": 0
                              }
                          },
                          "rich_push_platforms": {
                              "all": {
                                  "responses": 0,
                                  "sends": 0
                              }
                          },
                          "time": "2023-07-26 00:00:00"
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/reports/responses:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/responses?start=2020-05-01T10:00&end=2020-05-30T10:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ResponseReportRequest request = ResponseReportRequest
                      .newRequest(DateTime.parse("2020-05-01T10:34:22Z"),
                                  DateTime.parse("2020-05-30T10:34:22Z"),
                                  Precision.MONTHLY);

              Response<ResponseReportResponse> response =
              client.execute(request);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, ResponseReportList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 5, 1)

              end_date = datetime(2020, 5, 30)

              for response in ResponseReportList(airship=client,
              start_date=start_date, end_date=end_date, precision='DAILY'):
                  print(response)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::ResponseReportList.new(
                  client: airship,
                  start_date: '2020-05-01',
                  end_date: '2020-05-30',
                  precision: 'MONTHLY'
              )

              listing.each do |resp|
                  puts(resp)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "next_page": "https://go.urbanairship.com/api/reports/...",
                 "responses": [
                    {
                       "android": {
                          "direct": 25,
                          "influenced": 118
                       },
                       "date": "2020-05-01 00:00:00",
                       "ios": {
                          "direct": 16,
                          "influenced": 87
                       }
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/reports/responses/list:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/responses/list?start=2020-08-01T10:00&end=2020-08-15T10:00&limit=20
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushListingRequest request = PushListingRequest.newRequest()
                      .setStart(DateTime.parse("2020-08-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-08-15T10:34:22Z"))
                      .setLimit(20);

              Response<PushListingResponse> response = client.execute(request);


              // Get the first item in an array of push info responses. You can
              use all of the getters

              // listed in the "Individual Push Response Statistics" section.

              PushInfoResponse pushInfo =
              response.getBody().get().getPushInfoList().get().get(0);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, ResponseList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 8, 1)

              end_date = datetime(2020, 8, 15)

              for response in ResponseList(airship=client,
              start_date=start_date, end_date=end_date):
                  print(response)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              response_list = UA::ResponseList.new(
                  client: airship,
                  start_date: '2020-08-01',
                  end_date: '2020-08-30',
                  limit: 20,
                  push_id_start: 'start_id'
              )

              response_list.each do |resp|
                  puts(resp)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "next_page": "https://go.urbanairship.com/api/reports/responses/list?start=2020-08-01+10%...",
                  "pushes": [
                      {
                          "push_uuid": "f4db3752-a982-4a2b-994e-7b5fd1c7f02f",
                          "push_time": "2020-08-15 02:12:22",
                          "push_type": "UNICAST_PUSH",
                          "group_id": "4e768dc7-4ebc-4206-890a-60b5627763a7",
                          "direct_responses": 0,
                          "sends": 1,
                          "open_channels_sends": {
                              "platforms": []
                          }
                      },
                      {
                          "push_uuid": "5a4ade58-fbd3-43a2-ac3c-e834ee190151",
                          "push_time": "2020-08-14 19:58:15",
                          "push_type": "UNICAST_PUSH",
                          "group_id": "c5664e1f-106e-4616-9820-7d9ecce8a3f3",
                          "direct_responses": 1,
                          "sends": 2,
                          "open_channels_sends": {
                              "platforms": []
                          }
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/reports/responses/{push_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET /api/reports/responses/90f28bc6-6c9b-4c99-b970-973afc266e08
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PushInfoRequest request =
              PushInfoRequest.newRequest("90f28bc6-6c9b-4c99-b970-973afc266e08");


              Response<PushInfoResponse> response = client.execute(request);

              PushInfoResponse pushInfo = response.getBody().get();


              // Number of sends

              int sends = pushInfo.getSends();

              // Number of direct responses to the push

              int directResponses = pushInfo.getDirectResponses();

              // When the push was sent

              DateTime date = pushInfo.getPushTime();

              // The push type - can be one of BROADCAST_PUSH, SCHEDULED_PUSH,
              TAG_PUSH, UNICAST_PUSH

              PushInfoResponse.PushType type = pushInfo.getPushType();

              // The unique identifier for the push

              UUID pushId = pushInfo.getPushId();
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BasicAuthClient, IndividualResponseStats
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )
              push_id = '90f28bc6-6c9b-4c99-b970-973afc266e08'
              response = IndividualResponseStats(airship=client).get(push_id)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              d = UA::IndividualResponseStats.new(client: airship)

              statistics = d.get(push_id:
              '90f28bc6-6c9b-4c99-b970-973afc266e08')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "push_uuid": "90f28bc6-6c9b-4c99-b970-973afc266e08",
                 "push_time": "2020-02-25 23:03:12",
                 "push_type": "UNICAST_PUSH",
                 "sends": 167,
                 "direct_responses": 15,
                 "open_channels_sends": {
                    "platforms": [
                      {
                         "id": "PLATFORM_NAME",
                         "sends": 22
                      },
                      {
                         "id": "ANOTHER_PLATFORM",
                         "sends": 145
                      }
                    ]
                 }
              }
        showMissingLanguagePlaceholders: true
  /api/reports/sends:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/sends?start=2020-05-01T10:00&end=2020-05-30T20:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.SENDS)
                      .setStart(DateTime.parse("2020-05-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-05-30T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, PushList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 5, 1)

              end_date = datetime(2020, 5, 30)

              precision = 'MONTHLY'

              listing = PushList(airship=client, start_date=start_date,
              end_date=end_date, precision=precision)


              for resp in listing:
                print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::PushList.new(
                  client: airship,
                  start_date: '2020/05/01',
                  end_date: '2020/05/30',
                  precision: 'MONTHLY'
              )

              listing.each do |resp|
                  puts(resp)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "sends": [
                    {
                       "android": 50,
                       "date": "2020-05-01 00:00:00",
                       "ios": 500
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/timeinapp:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/timeinapp?start=2020-05-01T10:00&end=2020-05-15T20:00&precision=MONTHLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PlatformStatsRequest request =
              PlatformStatsRequest.newRequest(PlatformStatsRequestType.TIME_IN_APP)
                      .setStart(DateTime.parse("2020-05-01T10:34:22Z"))
                      .setEnd(DateTime.parse("2020-05-15T10:34:22Z"))
                      .setPrecision(Precision.MONTHLY);

              Response<PlatformStatsResponse> response =
              client.execute(request);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, TimeInAppList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 5, 1)

              end_date = datetime(2020, 5, 15)

              precision = 'MONTHLY'

              listing = TimeInAppList(airship=client, start_date=start_date,
              end_date=end_date, precision=precision)

              for resp in listing:
                  print(resp.date, resp.android, resp.ios)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              listing = UA::TimeInAppList.new(
                  client: airship,
                  start_date: '2020-05-01',
                  end_date: '2020-05-30',
                  precision: 'MONTHLY')
              listing.each do |time_in_app|
                  puts(time_in_app)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "timeinapp": [
                    {
                       "android": 50,
                       "date": "2020-05-01 00:00:00",
                       "ios": 500
                    }
                 ],
                 "next_page": "https://go.urbanairship.com/api/reports/..."
              }
        showMissingLanguagePlaceholders: true
  /api/reports/web/interaction:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/reports/web/interaction?app_key=ZGIwZTY3YjEtZTRiMi00ZG&start=2020-05-01T10:00&end=2020-05-03T20:00&precision=HOURLY
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              WebResponseReportRequest webResponseReportRequest =
              WebResponseReportRequest.newRequest("<app key>",
              DateTime.parse("2020-08-01T10:34:22Z"));

              Response<WebResponseReportResponse> response =
              client.execute(webResponseReportRequest);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, WebResponseReport
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              start_date = datetime(2020, 5, 1)

              end_date = datetime(2020, 5, 3)

              for web_response in WebResponseReport(airship=client,
              start_date=start_date, end_date=end_date, precision='DAILY'):
                  print(web_response)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "app_key": "ZGIwZTY3YjEtZTRiMi00ZG",
                 "end": "2020-05-03 00:00:00",
                 "precision": "HOURLY",
                 "start": "2020-05-01 00:00:00",
                 "total_counts": [
                    {"counts": {"clicks": 36, "sessions": 55 }, "date": "2020-05-01 10:00:00"},
                    {"counts": {"clicks": 50, "sessions": 79 }, "date": "2020-05-01 11:00:00"},
                    {"..."},
                    {"..."},
                    {"counts": {"clicks": 67, "sessions": 75 }, "date": "2020-05-03 20:00:00"}
                ]
              }
        showMissingLanguagePlaceholders: true
  /api/schedules:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleListingRequest request =
              ScheduleListingRequest.newRequest();

              Response<ListAllSchedulesResponse> response =
              client.execute(request);

              List<SchedulePayloadResponse> schedules =
              response.getBody().get().getSchedules();
          - lang: python
            source: |
              from urbanairship import BasicAuthClient, ScheduledList

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              for schedule in ScheduledList(client):
                  print(
                      schedule.name, schedule.url, schedule.push_ids,
                      schedule.schedule, schedule.push
                  )
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              scheduled_push_list = UA::ScheduledPushList.new(client: airship)

              scheduled_push_list.each do |schedule|
                  puts(schedule)
              end
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Count: 2
              Data-Attribute: schedules
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "count": 2,
                  "total_count": 4,
                  "next_page": "https://go.urbanairship.com/api/schedules/?start=5c69320c-3e91-5241-fad3-248269eed104&limit=2&order=asc",
                  "schedules": [
                      {
                          "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109",
                          "schedule": { },
                          "push": { }
                      },
                      {
                          "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed10A",
                          "schedule": { },
                          "push": { }
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                {
                  "name": "Morning People",
                  "schedule": {
                      "scheduled_time": "2020-06-03T09:15:00"
                  },
                  "push": {
                      "audience": { "tag": "earlyBirds" },
                      "notification": { "alert": "Good Day Sunshine" },
                      "device_types": [ "ios", "android" ]
                  }
                },
                {
                  "name": "Everybody Else",
                  "schedule": {
                      "best_time": {
                        "send_date": "2020-06-03"
                      }
                  },
                  "push": {
                      "audience": { "tag": "normalPeople" },
                      "notification": { "alert": "Stay Up Late" },
                      "device_types": [ "ios", "android" ]
                  }
                }
              ]
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SchedulePayload schedulePayload = SchedulePayload.newBuilder()
                      .setName("Morning People")
                      .setSchedule(Schedule.newBuilder()
                              .setScheduledTimestamp(DateTime.parse("2020-06-03T09:15:00Z"))
                              .build())
                      .setPushPayload(PushPayload.newBuilder()
                              .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                              .setNotification(Notifications.alert("Good Day Sunshine"))
                              .setAudience(Selectors.tag("earlyBirds"))
                              .build())
                      .build();

              ScheduleRequest scheduleRequest =
              ScheduleRequest.newRequest(schedulePayload);

              Response<ScheduleResponse> response =
              client.execute(scheduleRequest);
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BasicAuthClient, ScheduledPush, Push,
                  tag, notification, scheduled_time
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Create the push payload
              push = Push(client)
              push.audience = tag('earlyBirds')
              push.notification = notification(alert='Good Day Sunshine')
              push.device_types = ['ios', 'android']

              # Create the schedule
              sched = ScheduledPush(client)
              sched.name = 'Morning People'
              sched.schedule = scheduled_time(datetime(2020, 6, 3, 9, 15, 0))
              sched.push = push

              # Send the scheduled push
              response = sched.send()
              print('Created schedule. URL:', response.schedule_url)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.tag('earlyBirds')

              push.notification = UA.notification(alert: 'Morning People')

              push.device_types = UA.device_types(['ios','android'])


              schedule = airship.create_scheduled_push

              schedule.push = push

              schedule.name = "Morning People"

              schedule.schedule = UA.scheduled_time(Time.now.utc + 60)

              response = schedule.send_push

              print ("Created schedule. url: " + response.schedule_url)
        showMissingLanguagePlaceholders: true
      - description: Example schedule with localizations
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                {
                  "name": "Greetings",
                  "schedule": {
                      "best_time": {
                        "send_date": "2020-11-15"
                      }
                  },
                  "push": {
                      "device_types": [
                        "ios",
                        "android"
                      ],
                      "audience": {
                        "tag": "needs_a_greeting",
                        "group": "new_customer"
                      },
                      "notification": {
                        "alert": "Hi!"
                      },
                      "localizations": [
                        {
                            "language": "de",
                            "country": "AT",
                            "notification": {
                              "alert": "Grüss Gott"
                            }
                        },
                        {
                            "language": "de",
                            "country": "DE",
                            "notification": {
                              "alert": "Guten Tag"
                            }
                        }
                      ]
                  }
                }
              ]
          - lang: python
            source: |
              from datetime import datetime
              from urbanairship import (
                  BasicAuthClient, ScheduledPush, Push,
                  tag_group, notification, best_time,
                  localization
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Create the push payload
              push = Push(client)
              push.audience = tag_group('new_customer', 'needs_a_greeting')
              push.notification = notification(alert='Hi!')
              push.device_types = ['ios', 'android']
              push.localizations = [
                  localization(
                      country='AT',
                      language='de',
                      notification=notification(alert='Grüss Gott')
                  ),
                  localization(
                      country='DE',
                      language='de',
                      notification=notification(alert='Guten Tag')
                  )
              ]

              # Create the schedule
              sched = ScheduledPush(client)
              sched.name = 'Greetings'
              sched.schedule = best_time(send_date=datetime(2020, 11, 15))
              sched.push = push

              # Send the scheduled push
              response = sched.send()
              print('Created schedule. URL:', response.schedule_url)
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              Localization one = Localization.newBuilder()
                      .setCountry("AT")
                      .setLanguage("de")
                      .setNotification(Notifications.alert("Grüss Gott"))
                      .build();

              Localization two = Localization.newBuilder()
                      .setCountry("DE")
                      .setLanguage("de")
                      .setNotification(Notifications.alert("Guten Tag"))
                      .build();

              SchedulePayload schedulePayload = SchedulePayload.newBuilder()
                      .setName("Greetings")
                      .setSchedule(Schedule.newBuilder()
                              .setBestTime(BestTime.newBuilder()
                                      .setSendDate(DateTime.parse("2020-11-15T00:00:00Z"))
                                      .build())
                              .build())
                      .setPushPayload(PushPayload.newBuilder()
                              .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                              .setNotification(Notifications.alert("Hi!"))
                              .setAudience(Selectors.tagWithGroup("needs_a_greeting", "new_customer"))
                              .addLocalization(one)
                              .addLocalization(two)
                              .build())
                      .build();

              ScheduleRequest scheduleRequest =
              ScheduleRequest.newRequest(schedulePayload);

              Response<ScheduleResponse> response =
              client.execute(scheduleRequest);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              push = airship.create_push

              push.audience = UA.tag('needs_a_greeting', group:'new_customer')

              push.notification = UA.notification(alert: 'Hi!')

              push.device_types = UA.device_types(['ios', 'android'])

              push.localizations = {
                "language": "de",
                "country": "AT",
                "notification": {
                "alert": "Grüss Gott"
                }
              }


              schedule = airship.create_scheduled_push

              schedule.push = push

              schedule.name = "Greetings"

              schedule.schedule = UA.scheduled_time(Time.now.utc + 60)

              response = schedule.send_push

              print ("Created schedule. url: " + response.schedule_url)
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Data-Attribute: schedule_urls
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true,
                 "operation_id": "efb18e92-9a60-6689-45c2-82fedab36399",
                 "schedule_urls": [
                      "https://go.urbanairship.com/api/schedules/eac2ace6-349a-41a2-b874-5496d7bf0100",
                      "https://go.urbanairship.com/api/schedules/6c7c9bf5-cb2b-47cb-b27f-f85981391c4e"
                  ],
                  "schedule_ids": [
                      "eac2ace6-349a-41a2-b874-5496d7bf0100",
                      "6c7c9bf5-cb2b-47cb-b27f-f85981391c4e"
                  ],
                 "schedules": [
                    {
                       "url": "https://go.urbanairship.com/api/schedules/eac2ace6-349a-41a2-b874-5496d7bf0100",
                       "schedule": {
                          "scheduled_time": "2020-06-03T09:15:00"
                       },
                       "name": "Morning People",
                       "push": {
                          "audience": { "tag": "earlyBirds" },
                          "notification": { "alert": "Good Day Sunshine" },
                          "device_types": [ "ios", "android" ]
                       },
                       "push_ids": [ "83046227-9b06-4114-9f23-0df349792bbd" ]
                    }
                    {
                        "url": "https://go.urbanairship.com/api/schedules/6c7c9bf5-cb2b-47cb-b27f-f85981391c4e",
                        "schedule": {
                          "best_time": {
                            "send_date": "2020-06-03"
                          }
                        },
                        "name": "Everybody Else",
                        "push": {
                          "audience": { "tag": "normalPeople" },
                          "notification": { "alert": "Stay Up Late" },
                          "device_types": [ "ios", "android" ]
                       },
                       "push_ids": [ "8438e81-bb31-82a9-5feb-e7fd5b21ca7e" ]
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
  /api/schedules/bulk-send:
    post:
      - description: Example Schedule Create and Send a message with bulk ID
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules/bulk-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3;
              Content-type: application/json

              {
                  "schedule": {
                    "scheduled_time" : "2024-11-07T12:00:00"
                  },
                  "name" : "scheduled bulk send",
                  "push" : {
                    "audience" : {
                          "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                    },
                    "device_types" : [ "android" ],
                    "notification" : {
                          "alert" : "Hope you voted"
                    },
                    "campaigns": {
                          "categories": ["midterms2024", "getoutthevote2024"]
                    }
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "67c65146-c27f-431f-b54a-83aca694fdd3",
                  "schedule_urls": [
                    "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109"
                  ],
                  "schedules": [
                    {
                          "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109"
                          "schedule": {
                              "scheduled_time" : "2024-11-07T12:00:00"
                          }
                          "push": {
                              "audience": {
                                "bulk_id" : "36d5a261-0454-40f5-b952-942c4b2b0f22"
                              },
                              "device_types" : [ "open::rcs" ],
                              "notification" : {
                                "alert" : "Welcome to the winter sale!!"
                              },
                              "campaigns": {
                                "categories": ["winter sale", "west coast"]
                              }
                          }
                    }
                  ],
                  "push_ids": ["8cf8b2a5-7655-40c2-a500-ff498e60453e"]
              }
        showMissingLanguagePlaceholders: true
  /api/schedules/create-and-send:
    post:
      - description: Example scheduled Create and Send message
        examples:
          - lang: HTTP
            source: |
              POST /api/schedules/create-and-send HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "schedule": {
                  "scheduled_time" : "2020-11-11T12:00:00"
                },
                "name" : "scheduled winter sale email",
                "push" : {
                  "audience": {
                    "create_and_send" : [
                      {
                        "ua_address": "new@example.com",
                        "ua_commercial_opted_in": "2020-11-29T10:34:22"
                      },
                      {
                        "ua_address" : "ben@example.com",
                        "ua_commercial_opted_in": "2020-11-29T12:45:10"
                      }
                    ]
                  },
                  "device_types" : [ "email" ],
                  "notification" : {
                    "email": {
                      "subject": "Welcome to the Winter Sale! ",
                      "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                      "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                      "message_type": "commercial",
                      "sender_name": "Airship",
                      "sender_address": "team@airship.com",
                      "reply_to": "no-reply@airship.com"
                    }
                  },
                  "campaigns": {
                      "categories": ["winter sale", "west coast"]
                  }
                }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              String htmlBodyString = "<h1>Seasons Greetings</h1><p>Check out
              our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>";

              String plaintextBodyString = "Greetings! Check out our latest
              winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]";


              EmailChannel newChannel = EmailChannel.newBuilder()
                      .setAddress("new@example.com")
                      .setCommertialOptedIn(DateTime.parse("2020-11-29T10:34:22Z"))
                      .build();

              EmailChannel benChannel = EmailChannel.newBuilder()
                      .setAddress("ben@example.com")
                      .setTransactionalOptedIn(DateTime.parse("2020-11-29T12:45:10Z"))
                      .build();

              CreateAndSendAudience audience = new
              CreateAndSendAudience(EmailChannels.newBuilder()
                      .addChannel(newChannel)
                      .addChannel(benChannel)
                      .build());

              CreateAndSendEmailPayload createAndSendEmailPayload =
              CreateAndSendEmailPayload.newBuilder()
                      .setSubject("Welcome to the Winter Sale! ")
                      .setHtmlBody(htmlBodyString)
                      .setPlaintextBody(plaintextBodyString)
                      .setMessageType(MessageType.TRANSACTIONAL)
                      .setSenderName("Airship")
                      .setSenderAddress("team@airship.com")
                      .setReplyTo("no-reply@airship.com")
                      .build();

              Notification notification = Notification.newBuilder()
                      .addDeviceTypeOverride(DeviceType.EMAIL, createAndSendEmailPayload)
                      .build();

              Campaigns campaign = Campaigns.newBuilder()
                      .addCategory("winter sale")
                      .addCategory("west coast")
                      .build();

              CreateAndSendPayload payload = CreateAndSendPayload.newBuilder()
                      .setAudience(audience)
                      .setNotification(notification)
                      .setCampaigns(campaign)
                      .build();

              CreateAndSendSchedulePayload schedulePayload =
              CreateAndSendSchedulePayload.newBuilder()
                      .setPayload(payload)
                      .setScheduleTime(DateTime.parse("2020-11-11T12:00:00"))
                      .setName("scheduled winter sale email")
                      .build();

              CreateAndSendScheduleRequest scheduleRequest =
              CreateAndSendScheduleRequest.newRequest(schedulePayload)

              Response<GenericResponse> response =
              client.execute(scheduleRequest);
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              email_notification = UA::EmailNotification.new(client: airship)

              email_notification.bypass_opt_in_level = false

              email_notification.html_body = "<h1>Seasons Greetings</h1><p>Check
              out our winter deals!</p><p><a data-ua-unsubscribe=\"1\"
              title=\"unsubscribe\"
              href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>"

              email_notification.message_type = 'transactional'

              email_notification.plaintext_body = 'Greetings! Check out our
              latest winter deals! [[ua-unsubscribe
              href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]'

              email_notification.reply_to = 'no-reply@airship.com'

              email_notification.sender_address = 'team@airship.com'

              email_notification.sender_name = 'Airship'

              email_notification.subject = 'Welcome to the Winter Sale!'

              override = email_notification.email_override

              send_it = UA::CreateAndSend.new(client: airship)

              send_it.addresses = [
                {
                  "ua_address": "new@example.com",
                  "ua_commercial_opted_in": "2020-10-28T10:34:22"
                }
              ]

              send_it.device_types = [ "email" ]

              send_it.campaigns = ["winter sale", "west coast"]

              send_it.notification = email_notification.email_override

              send_it.name = "scheduled winter sale email"

              send_it.scheduled_time = "2020-12-08T11:06:00"

              send_it.schedule
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok": true,
                "operation_id": "67c65146-c27f-431f-b54a-83aca694fdd3",
                "push_ids": [
                    "8cf8b2a5-7655-40c2-a500-ff498e60453e"
                ],
                "schedule_urls": [
                    "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109"
                ],
                "schedules": [
                    {
                      "push": {
                          "audience": {
                            "create_and_send": [
                                {
                                  "ua_address": "new@example.com",
                                  "ua_commercial_opted_in": "2020-11-29T10:34:22"
                                },
                                {
                                  "ua_address": "ben@example.com",
                                  "ua_commercial_opted_in": "2020-11-29T12:45:10"
                                }
                            ]
                          },
                          "device_types": [
                            "email"
                          ],
                          "notification": {
                            "campaigns": {
                                "categories": [
                                  "winter sale",
                                  "west coast"
                                ]
                            },
                            "email": {
                                "html_body": "<h1>Seasons Greetings</h1><p>Check out our winter deals!</p><p><a data-ua-unsubscribe=\"1\" title=\"unsubscribe\" href=\"http://unsubscribe.urbanairship.com/email/success.html\">Unsubscribe</a></p>",
                                "message_type": "commercial",
                                "plaintext_body": "Greetings! Check out our latest winter deals! [[ua-unsubscribe href=\"http://unsubscribe.urbanairship.com/email/success.html\"]]",
                                "reply_to": "no-reply@airship.com",
                                "sender_address": "team@airship.com",
                                "sender_name": "Airship",
                                "subject": "Welcome to the Winter Sale! "
                            }
                          }
                      },
                      "schedule": {
                          "scheduled_time": "2020-11-11T12:00:00"
                      },
                      "url": "http://go.urbanairship/api/schedules/2d69320c-3c91-5241-fac4-248269eed109"
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
  '/api/schedules/segmentation-bridge/{id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE
              /api/schedules/segmentation-bridge/b384ca54-0a1d-9cb3-2dfd-ae5964630e66
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/schedules/segmentation-bridge/b384ca54-0a1d-9cb3-2dfd-ae5964630e66
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Content-Length: 123

              {
                "url": "https://<host>/api/schedules/segmentation-bridge/b384ca54-0a1d-9cb3-2dfd-ae5964630e66",
                "name": "test",
                "schedule": {
                    "scheduled_time" : "2023-04-01T18:45:30"
                },
                "request": {
                    "audience": {
                        "segment": "8f18fcb5-e2aa-4b61-b190-42652eadb5ef"
                    },
                    "device_types": [
                        "ios",
                        "android"
                    ],
                    "payload": {
                        "segmentation_trigger_id": "5cde3564-ead8-9743-63af-821e12337812"
                    }
                }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              PUT
              /api/schedules/segmentation-bridge/b384ca54-0a1d-9cb3-2dfd-ae5964630e66
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json

              Content-Length: 123


              {
                  "name": "test",
                  "schedule": {
                      "scheduled_time" : "2023-04-01T18:45:30"
                  },
                  "request": {
                      "audience": {
                          "segment": "8f18fcb5-e2aa-4b61-b190-42652eadb5ef"
                      },
                      "device_types": [
                          "ios",
                          "android"
                      ],
                      "payload": {
                          "segmentation_trigger_id": "5cde3564-ead8-9743-63af-821e12337812"
                      }
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3
              Content-Length: 123

              {
                  "url": "https://<host>/api/schedules/segmentation-bridge/b384ca54-0a1d-9cb3-2dfd-ae5964630e66",
                  "name": "test",
                  "schedule": {
                      "scheduled_time" : "2023-04-01T18:45:30"
                  },
                  "request": {
                      "audience": {
                          "segment": "8f18fcb5-e2aa-4b61-b190-42652eadb5ef"
                      },
                      "device_types": [
                          "ios",
                          "android"
                      ],
                      "payload": {
                          "segmentation_trigger_id": "5cde3564-ead8-9743-63af-821e12337812"
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
  '/api/schedules/{schedule_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE /api/schedules/b384ca54-0a1d-9cb3-2dfd-ae5964630e66
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleDeleteRequest request =
              ScheduleDeleteRequest.newRequest("b384ca54-0a1d-9cb3-2dfd-ae5964630e66");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import BasicAuthClient, ScheduledPush


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              schedule = ScheduledPush.from_url(client,
              'https://go.urbanairship.com/api/schedules/b384ca54-0a1d-9cb3-2dfd-ae5964630e66')


              # Cancel schedule

              schedule.cancel()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              schedule = airship.create_scheduled_push

              schedule = UA::ScheduledPush.from_url(client: airship, url:
              'https://go.urbanairship.com/api/schedules/b384ca54-0a1d-9cb3-2dfd-ae5964630e66')

              schedule.cancel
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/schedules/5cde3564-ead8-9743-63af-821e12337812 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleListingRequest request =
              ScheduleListingRequest.newRequest("5cde3564-ead8-9743-63af-821e12337812");

              Response<ListAllSchedulesResponse> response =
              client.execute(request);

              SchedulePayloadResponse schedule =
              response.getBody().get().getSchedules().get(0);

              // Get the schedule's name

              Optional<String> name = schedule.getName();

              // Get the push IDs

              Set<String> pushIds = schedule.getPushIds();

              // Get the scheduled time

              Schedule sched = schedule.getSchedule();

              // Get the associated push payload

              PushPayload payload = schedule.getPushPayload();

              // Get the URL

              Optional<String> url = schedule.getUrl();
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              schedule = airship.create_scheduled_push

              scheduled_push = UA::ScheduledPush.new(airship)

              schedule_details = scheduled_push.list(schedule_id:
              '5cde3564-ead8-9743-63af-821e12337812')

              puts(schedule_details)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "name": "I would like to subscribe to your newsletter",
                 "schedule": {
                    "scheduled_time": "2020-04-01T18:45:30"
                 },
                 "push": {
                    "audience": {
                       "tag": [
                          "intriguing",
                          "ideas"                       ]
                    },
                    "notification": {
                       "alert": "Check your inbox!"
                    },
                    "device_types": [ "ios", "android" ]
                 }
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/schedules/5cde3564-ead8-9743-63af-821e12337812 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "name": "I would like to subscribe to your newsletter",
                 "schedule": {
                    "scheduled_time": "2020-04-01T18:45:30"
                 },
                 "push": {
                    "audience": {
                       "tag": [
                          "intriguing",
                          "ideas",
                          "thought_leadership"
                       ]
                    },
                    "notification": {
                       "alert": "Check your inbox!"
                    },
                    "device_types": [ "ios", "android" ]
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SchedulePayload schedulePayload = SchedulePayload.newBuilder()
                      .setName("I would like to subscribe to your newsletter")
                      .setSchedule(Schedule.newBuilder()
                              .setScheduledTimestamp(DateTime.parse("2020-04-01T18:45:00Z"))
                              .build())
                      .setPushPayload(PushPayload.newBuilder()
                              .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS, DeviceType.ANDROID))
                              .setNotification(Notifications.alert("Check your inbox!"))
                              .setAudience(Selectors.tag("intriguing"))
                              .build())
                      .build();

              ScheduleRequest scheduleRequest =
              ScheduleRequest.newUpdateRequest(schedulePayload,
              "5cde3564-ead8-9743-63af-821e12337812");

              Response<ScheduleResponse> response =
              client.execute(scheduleRequest);
          - lang: python
            source: >
              from datetime import datetime

              from urbanairship import (
                  BasicAuthClient, ScheduledPush, Push,
                  tag, notification, scheduled_time
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              schedule = ua.ScheduledPush.from_url(client,
              'https://go.urbanairship.com/api/schedules/5cde3564-ead8-9743-63af-821e12337812')


              # change scheduled time to tomorrow

              schedule.schedule = scheduled_time(datetime.datetime.utcnow() +
              datetime.timedelta(days=1))

              resp = schedule.update()
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              schedule = airship.create_scheduled_push

              schedule = UA::ScheduledPush.from_url(client: airship, url:
              'https://go.urbanairship.com/api/schedules/5cde3564-ead8-9743-63af-821e12337812')

              # change scheduled time to tomorrow

              schedule.schedule = UA.scheduled_time(Time.now.utc + (60 * 60 *
              24))

              schedule.update
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "7c56d013-5599-d66d-6086-6205115d85e2",
                  "schedule_urls": [ "https://go.urbanairship.com/api/schedules/0af1dead-e769-4b78-879a-7c4bb52d7c9e" ],
                  "schedules": [
                      {
                          "url": "https://go.urbanairship.com/api/schedules/0af1dead-e769-4b78-879a-7c4bb52d7c9e",
                          "schedule": {
                              "scheduled_time": "2020-04-01T18:45:30"
                          },
                          "name": "I would like to subscribe to your newsletter",
                          "push": {
                              "audience": {"tag": ["intriguing", "ideas", "thought_leadership"] },
                              "notification": {"alert": "Check your inbox!"},
                              "device_types": [ "ios", "android" ]
                          },
                          "push_ids": [ "48fb8e8a-ee51-4e2a-9a47-9fab9b13d846" ]
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/schedules/{schedule_id}/pause':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              POST /api/schedules/5cde3564-ead8-9743-63af-821e12337812/pause
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              from urbanairship import BasicAuthClient, ScheduledPush


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              sched = ScheduledPush(client)

              sched.url =
              "http://go.urbanairship/api/schedules/5cde3564-ead8-9743-63af-821e12337812"


              sched.pause()
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleStatusRequest pauseRequest =
              ScheduleStatusRequest.pauseScheduleRequest("68b2d71f-1c10-4592-bd96-2725aee0ae57");

              Response<GenericResponse> pauseResponse =
              client.execute(pauseRequest);      
        showMissingLanguagePlaceholders: true
  '/api/schedules/{schedule_id}/resume':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              POST /api/schedules/5cde3564-ead8-9743-63af-821e12337812/resume
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              from urbanairship import BasicAuthClient, ScheduledPush


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              sched = ScheduledPush(client)

              sched.url =
              "http://go.urbanairship/api/schedules/5cde3564-ead8-9743-63af-821e12337812"


              sched.resume()
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              ScheduleStatusRequest resumeRequest =
              ScheduleStatusRequest.resumeScheduleRequest("68b2d71f-1c10-4592-bd96-2725aee0ae57");

              Response<GenericResponse> resumeResponse =
              client.execute(resumeRequest);
        showMissingLanguagePlaceholders: true
  /api/segmentation-bridge:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/segmentation-bridge HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "audience" : {
                      "segment": "<segment-id>"
                  },
                  "device_types" : [
                      "ios",
                      "android"
                  ],
                  "payload" : {
                      "segmentation_trigger_id": "<trigger-id>"
                  }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 201 OK
              Content-Length: 11
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "1fd202ca-9deb-4372-b052-dff0516f9518",
                  "segmentation_request_id": "39a50aef-c776-43d8-ae60-0d3bdd03c0ed"
              }
        showMissingLanguagePlaceholders: true
  /api/segments:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/segments/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SegmentListingRequest request =
              SegmentListingRequest.newRequest();

              Response<SegmentListingResponse> response =
              client.execute(request);


              // Get the first segment in the list

              SegmentListingView segment =
              response.getBody().get().getSegmentListingViews().get(0);


              // Get the segment display name

              String displayName = segment.getDisplayName();


              // Get the segment ID

              String id = segment.getSegmentId();
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, SegmentList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # List all segments
              segment_list = SegmentList(client)
              for segment in segment_list:
                  print(segment.display_name)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment_list = UA::SegmentList.new(client: airship)


              segment_list.each do |segment|
                 puts(segment['display_name'])
              end
          - lang: HTTP
            source: >
              HTTP/1.1 200 OK

              Link:
              <https://go.urbanairship.com/api/segments?limit=1&sort=id&order=asc&start=3832cf72-cb44-4132-a11f-eafb41b82f64>;rel=next

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "next_page": "https://go.urbanairship.com/api/segments?limit=1&sort=id&order=asc&start=3832cf72-cb44-4132-a11f-eafb41b82f64",
                 "segments": [
                    {
                       "creation_date": 1346248822221,
                       "display_name": "A segment",
                       "id": "00c0d899-a595-4c66-9071-bc59374bbe6b",
                       "modification_date": 1346248822221
                    }
                 ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/segments HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "display_name": "News but not sports",
                 "criteria": {
                    "and": [
                       {"tag": "news"},
                       {"not":
                          {"tag": "sports"}
                       }
                    ]
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              // Define the segment criteria

              Selector compound = Selectors.and(Selectors.tag("news"),
              Selectors.not(Selectors.tag("sports")));


              SegmentRequest request = SegmentRequest.newRequest();

              request.setCriteria(compound);

              request.setDisplayName("News but not sports");


              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Segment,
                  tag, not_, and_
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Create a new segment
              segment = Segment()
              segment.display_name = "News but not sports"
              segment.criteria = and_(
                  tag('news'),
                  not_(tag('sports'))
              )

              # Create the segment
              response = segment.create(client)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              segment.display_name = 'Display Name'

              segment.criteria = { 'tag' => 'existing_tag' }

              segment.create
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/segments/f35da41d-59c1-4106-a192-9594bd480cb6

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                 "ok": true,
                 "segment_id": "f35da41d-59c1-4106-a192-9594bd480cb6",
                 "operation_id": "1d154121-951f-45b9-896d-e70718b5865b"
              }
        showMissingLanguagePlaceholders: true
  '/api/segments/{segment_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/segments/00c0d899-a595-4c66-9071-bc59374bbe6b HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SegmentDeleteRequest request =
              SegmentDeleteRequest.newRequest("00c0d899-a595-4c66-9071-bc59374bbe6b");

              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Segment
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Delete a segment
              segment = Segment()
              segment.from_id(client, "00c0d899-a595-4c66-9071-bc59374bbe6b")
              response = segment.delete(client)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              segment.from_id(id: '00c0d899-a595-4c66-9071-bc59374bbe6b')

              segment.delete
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/segments/00c0d899-a595-4c66-9071-bc59374bbe6b HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SegmentLookupRequest request =
              SegmentLookupRequest.newRequest("00c0d899-a595-4c66-9071-bc59374bbe6b");

              Response<SegmentView> response = client.execute(request);


              // Get the segment criteria

              Selector criteria = response.getBody().get().getCriteria();


              // Get the segment display name

              String displayName = response.getBody().get().getDisplayName();
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Segment
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              # Look up a segment by ID

              segment = Segment()

              response = segment.from_id(client,
              "00c0d899-a595-4c66-9071-bc59374bbe6b")
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              details = segment.from_id(id:
              '00c0d899-a595-4c66-9071-bc59374bbe6b')
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "criteria": {
                    "and": [
                       {
                          "tag": "ipad"
                       },
                       {
                          "not": {
                             "tag": "foo"
                          }
                       }
                    ]
                 },
                 "display_name": "A segment"
              }
        showMissingLanguagePlaceholders: true
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/segments/00c0d899-a595-4c66-9071-bc59374bbe6b HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "display_name": "Entertainment but not sports",
                 "criteria": {
                    "and": [
                       {"tag": "entertainment"},
                       {"not":
                          {"tag": "sports"}
                       }
                    ]
                 }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              // Define the segment criteria

              Selector compound = Selectors.and(Selectors.tag("entertainment"),
              Selectors.not(Selectors.tag("sports")));


              SegmentRequest request =
              SegmentRequest.newUpdateRequest("00c0d899-a595-4c66-9071-bc59374bbe6b");

              request.setCriteria(compound);

              request.setDisplayName("Entertainment but not sports");


              Response<GenericResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Segment,
                  tag, not_, and_
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Update an existing segment
              segment = Segment()
              segment.from_id(client, "00c0d899-a595-4c66-9071-bc59374bbe6b")

              # Update segment properties
              segment.display_name = "Entertainment but not sports"
              segment.criteria = and_(
                  tag('entertainment'),
                  not_(tag('sports'))
              )

              # Save the changes
              response = segment.update(client)
          - lang: ruby
            source: >
              require 'urbanairship'


              UA = Urbanairship

              airship = UA::Client.new(key: '<app key>', secret: '<master
              secret>')


              segment = UA::Segment.new(client: airship)

              segment.from_id(id: '00c0d899-a595-4c66-9071-bc59374bbe6b')

              segment.display_name = 'New Display Name'

              segment.criteria = { 'tag' => 'new_tag' }

              segment.update
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 65
              Content-Type: application/vnd.urbanairship+json;version=3

              {
                 "ok": true,
                 "operation_id": "1f93ca85-b8fd-4833-8d1a-6e2b7f4ceea9"
              }
        showMissingLanguagePlaceholders: true
  /api/sms/clx/inbounds:
    post:
      - description: Example incoming request from Sinch
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/clx/inbounds HTTP/1.1
              User-Agent: Apache-HttpAsyncClient/4.0.1 (java 1.5)
              Content-Type: application/json
              Authorization: Basic <user:pass>
              Connection: close

              {
                "body": "a message for urbanair",
                "operator_id": "10488",
                "from": "11235678309",
                "to": "54321",
                "received_at": "2018-06-19T17:52:33.332Z",
                "type": "mo_text",
                "id": "b-RwkaPN_PIJdx3X"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/sms/custom-response:
    post:
      - description: SMS example
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/custom-response HTTP/1.1
              Authorization: Bearer <authorization token>
              X-UA-Appkey: <app key>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "sms" : {
                    "alert": "Your balance is $1234.56. Go to https://www.example.com/myaccount/my-balance?ua-tag-add=balance_prefs:sms to see more about your account.",
                    "shorten_links": true
                },
                "mobile_originated_id" : "28883743-4868-4083-ab5d-77ac4542531a"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setBearerToken("<token>")
                      .build();

              CustomSmsResponseSmsPayload customSmsResponseChannelSms =
              CustomSmsResponseSmsPayload.newBuilder()
                      .setAlert("Your balance is $1234.56. Go to https://www.example.com/myaccount/my-balance?ua-tag-add=balance_prefs:sms to see more about your account.")
                      .setMobileOriginatedId("28883743-4868-4083-ab5d-77ac4542531a")
                      .setShortenLinks(true)
                      .build();

              CustomSmsResponseRequest customSmsResponseRequest =
              CustomSmsResponseRequest.newRequest(customSmsResponseChannelSms);

              Response<CustomSmsResponseResponse> response =
              client.execute(customSmsResponseRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, SmsCustomResponse,
                  sms, mms
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              custom_response = SmsCustomResponse(
                  client=client,
                  mobile_originated_id="28883743-4868-4083-ab5d-77ac4542531a"
              )

              custom_response.sms = sms(
                  alert="Your balance is $1234.56. Go to https://www.example.com/myaccount/my-balance?ua-tag-add=balance_prefs:sms to see more about your account.",
                  shorten_links=True
              )

              response = custom_response.send()
        showMissingLanguagePlaceholders: true
      - description: MMS example
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/custom-response HTTP/1.1
              Authorization: Bearer <bearer token>
              X-UA-Appkey: <app key>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "mms" : {
                  "fallback_text": "See fun cat pics at https://example.com/cat/pics/12345678",
                  "slides": [
                    {
                      "media": {
                        "url": "https://example.com/cat/pics/12345678.gif",
                        "content_type": "image/gif",
                        "content_length": 23098
                      }
                    }
                  ],
                  "shorten_links": true
                },
                "mobile_originated_id" : "3e1e4fb3-2d3c-431e-96bf-9b235a12f84b"
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setBearerToken("<token>")
                      .build();

              MmsSlides mmsSlides = MmsSlides.newBuilder()
                      .setText("Test")
                      .setMediaUrl("https://example.com/cat/pics/12345678.gif")
                      .setMediaContentType("image/gif")
                      .setMediaContentLength(23098)
                      .build();

              CustomSmsResponseMmsPayload customSmsResponseMmsPayload =
              CustomSmsResponseMmsPayload.newBuilder()
                      .setFallbackText("See fun cat pics at https://example.com/cat/pics/12345678")
                      .setMobileOriginatedId("28883743-4868-4083-ab5d-77ac4542531a")
                      .setSlides(mmsSlides)
                      .build();

              CustomSmsResponseRequest customSmsResponseRequest =
              customSmsResponseRequest.newRequest(customSmsResponseMmsPayload);

              Response<CustomSmsResponseResponse> response =
              client.execute(customSmsResponseRequest);
          - lang: python
            source: |
              from urbanairship import (
                  BearerTokenClient, SmsCustomResponse,
                  mms
              )

              client = BearerTokenClient(
                  app_key='<app_key>',
                  token='<bearer_token>'
              )

              custom_response = SmsCustomResponse(
                  client=client,
                  mobile_originated_id="3e1e4fb3-2d3c-431e-96bf-9b235a12f84b"
              )

              custom_response.mms = mms(
                  fallback_text="See fun cat pics at https://example.com/cat/pics/12345678",
                  slides=[{
                      "media": {
                          "url": "https://example.com/cat/pics/12345678.gif",
                          "content_type": "image/gif",
                          "content_length": 23098
                      }
                  }],
                  shorten_links=True
              )

              response = custom_response.send()
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                    "ok": true,
                    "operation_id": "f3d0993e-e3e1-4aae-b1c0-864a715bfaff",
                    "push_id": "7502abe6-e6ea-4f2b-906f-ebbab612c69e"
              }
  /api/sms/tyntec/inbounds:
    post:
      - description: Example incoming request from Tyntec
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/tyntec/inbounds HTTP/1.1
              User-Agent: Apache-HttpAsyncClient/4.0.1 (java 1.5)
              Content-Type: application/json
              Connection: close

              { "from": "+491622943176",
                "to": "+14155270903",
                "message": "This is an example.",
                "originMCC": "262",
                "originMNC": "02",
                "originTtId": "2",
                "totalPrice": "0.002",
                "requestId": "12-75cfafba-8799-4f2b-8505-ece6af6abf01",
                "size": 1,
                "missingParts": false,
                "contentList": [
                  { "msgId": "12-1407778865439+1234567890",
                    "sentDate": "2014-05-13T17:41:06+0100",
                    "price": "0.001",
                    "currency": "EUR",
                    "priceEffective": "2010-11-01T00:00:00+0000",
                    "sequenceNumber": 1
                  }
                ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              { "ok": true }
        showMissingLanguagePlaceholders: true
  '/api/sms/{msisdn}/keywords':
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/sms/15035556789/keywords HTTP/1.1
              User-Agent: Apache-HttpAsyncClient/4.0.1 (java 1.5)
              Content-Type: application/json
              Authorization: Basic <user:pass>
              Connection: close

              {
                "keyword" : "stop",
                "sender_ids" : [ "54321", "1234"]
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              KeywordInteractionRequest request =
              KeywordInteractionRequest.newRequest("15035556789")
                      .addKeyword("stop")
                      .addSenderId("54321")
                      .addSenderId("1234");

              Response<CustomSmsResponseResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, KeywordInteraction
              )
              from datetime import datetime

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              interaction = KeywordInteraction(
                  client=client,
                  keyword="stop",
                  sender_ids=["54321", "1234"],
                  timestamp=datetime(2021, 10, 8, 12, 0, 0)
              )
              response = interaction.post()
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
      - description: Failure response (Keyword not configured for Sender ID)
        examples:
          - lang: HTTP
            source: |
              HTTP/1.1 400 Bad Request
              Content-Type: application/json

              {
                "ok" : false,
                "error" : "The following sender(s) are not configured for the 'stop' keyword: ['1234']",
                "error_code" : 400
              }
  /api/subscription_lists:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/subscription_lists HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              SubscriptionListListingRequest subscriptionListListingRequest =
              SubscriptionListListingRequest.newRequest();

              Response<SubscriptionListListingResponse> response =
              client.execute(subscriptionListListingRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true,
                 "subscription_lists": [
                     {
                         "list_id": "example_listId-1",
                         "name": "A nice readable name 1",
                         "scopes": ["email"],
                         "messaging_type": "transactional",
                         "default_opted_in": false
                     },
                     {
                         "list_id": "example_listId-2",
                         "name": "A nice readable name 2",
                         "description": "A very nice description for you.",
                         "scopes": ["app", "web"],
                         "default_opted_in": true
                     }
                 ]
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, SubscriptionList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # List all subscription lists
              subscription_lists = SubscriptionList(client).list()
        showMissingLanguagePlaceholders: true
  '/api/subscription_lists/channels/{channel_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/subscription_lists/channels/dc51e541-6d14-43fa-824b-700def260f64
              HTTP/1.1

              Authorization: Basic <application authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true,
                 "list_ids": ["example_listId-1","example_listId-2"]
              }  
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, SubscriptionList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              # Get subscription lists for a channel

              channel_lists =
              SubscriptionList(client).list_by_channel('dc51e541-6d14-43fa-824b-700def260f64')
        showMissingLanguagePlaceholders: true
  '/api/subscription_lists/contacts/{contact_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/subscription_lists/contacts/dc51e541-6d14-43fa-824b-700def260f64
              HTTP/1.1

              Authorization: Basic <application authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true,
                 "subscription_lists": [
                    {
                       "list_ids": ["example_listId-2", "example_listId-4"],
                       "scope": "app"
                    },
                    {
                       "list_ids": ["example_listId-2"],
                       "scope": "web"
                    }
                 ],
              }
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, SubscriptionList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              # Get subscription lists for a contact

              contact_lists =
              SubscriptionList(client).list_by_contact('dc51e541-6d14-43fa-824b-700def260f64')
        showMissingLanguagePlaceholders: true
  '/api/subscription_lists/named_users/{named_user_id}':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              GET
              /api/subscription_lists/named_users/4cbd1c1c-42e1-4606-bc93-9b707bcedcbc
              HTTP/1.1

              Authorization: Basic <application authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              NamedUserSubscriptionListsListingRequest
              namedUserSubscriptionListsListingRequest =
              NamedUserSubscriptionListsListingRequest.newRequest("4cbd1c1c-42e1-4606-bc93-9b707bcedcbc");

              Response<NamedUserSubscriptionListsListingResponse> response =
              client.execute(namedUserSubscriptionListsListingRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok" : true,
                 "subscription_lists": [
                    {
                       "list_ids": ["example_listId-2", "example_listId-4"],
                       "scope": "app"
                    },
                    {
                       "list_ids": ["example_listId-2"],
                       "scope": "web"
                    }
                 ],
              }
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, SubscriptionList
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              # Get subscription lists for a named user

              named_user_lists =
              SubscriptionList(client).list_by_named_user('4cbd1c1c-42e1-4606-bc93-9b707bcedcbc')
        showMissingLanguagePlaceholders: true
  /api/tag-lists:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/tag-lists HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, TagList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # List all tag lists
              response = TagList.list(airship=client)
              tag_lists = response.json()
          - lang: ruby
            source: |
              require 'urbanairship'
              UA = Urbanairship
              airship = UA::Client.new(key: 'app_key', secret: 'master_secret')

              tag_list = UA::TagList.new(client: airship)
              list_response = tag_list.list
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TagListListingRequest tagListListingRequest =
              TagListListingRequest.newRequest();

              Response<TagListListingResponse> response =
              client.execute(tagListListingRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Tag: lists
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                "ok" : true,
                "lists" : [
                  {
                    "name" : "ua_tags_foo",
                    "description" : "",
                    "extra" : { "key": "value" },
                    "add":{
                      "tag-group-name": [
                        "tag-value"
                      ],
                      "tag-group-name2": [
                        "tag-value2a",
                        "tag-value2b"
                      ]
                    },
                    "remove": {
                      "tag-group-name3": [
                        "tag-value"
                      ]
                    },
                    "set": {
                      "tag-group-name4": [
                        "tag-value"
                      ]
                    },
                    "created" : "2013-08-08T20:41:06",
                    "last_updated" : "2014-05-01T18:00:27",
                    "channel_count" : 0,
                    "mutation_success_count": 1000,
                    "mutation_error_count": 10,
                    "error_path":  "https://go.urbanairship.com/api/tag-lists/users_a/errors",
                    "status" : "ready"
                  },
                  {
                    "..." : "..."
                  }
                ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/tag-lists HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "name":"ua_tags_foobar",
                "description":"Description of the file being uploaded",
                "extra":{
                    "key":"value",
                    "another":"etc..."
                },
                "add":{
                    "tag-group-name":[
                      "tag-value"
                    ],
                    "tag-group-name2":[
                      "tag-value2a",
                      "tag-value2b"
                    ]
                },
                "remove":{
                    "tag-group-name3":[
                      "tag-value"
                    ]
                },
                "set":{
                    "tag-group-name4":[
                      "tag-value"
                    ]
                }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Content-Type: application/json
              Location: https://go.urbanairship.com/api/tag-lists/ua_tags_foobar

              {
                "ok" : true
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, TagList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              tag_list = TagList(
                  client=client,
                  list_name="ua_tags_my_new_list",
                  description="First of many tags lists!",
                  extra={
                      "filename": "tags.csv",
                      "source": "CRM"
                  },
                  add_tags={
                      "tag-group-name": ["tag-value"],
                      "tag-group-name2": ["tag-value2a", "tag-value2b"]
                  },
                  remove_tags={
                      "tag-group-name3": ["tag-value"]
                  },
                  set_tags={
                      "tag-group-name4": ["tag-value"]
                  }
              )

              tag_list.create()
          - lang: ruby
            source: >
              require 'urbanairship'

              UA = Urbanairship

              airship = UA::Client.new(key: 'app_key', secret: 'master_secret')

              tags = {'tag_group_name': ['tag1', 'tag2']}


              tag_list = UA::TagList.new(client: airship)

              tag_list.name = 'ua_tags_list_name'

              tag_list.create(description: 'description', extra: {'key':
              'value'}, add: tags)
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TagListRequest tagListRequest = TagListRequest.newRequest()
                      .setName("ua_tags_my_new_list");
                      .setDescription("First of many tags lists!")
                      .addTags("tag_group1", ImmutableSet.of("tag1","tag2"))
                      .removeTags("tag_group2", ImmutableSet.of("tag3","tag4"))
                      .setTags("tag_group3", ImmutableSet.of("tag4","tag5"))
                      .addExtra("test","value")
              Response<GenericResponse> response =
              client.execute(tagListRequest);
        showMissingLanguagePlaceholders: true
  '/api/tag-lists/{list_name}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/tag-lists/ua_tags_foobar HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+csv; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 204 No Content
        showMissingLanguagePlaceholders: true
  '/api/tag-lists/{list_name}/csv':
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              PUT /api/tag-lists/ua_tags_foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              channel_id
              c543f3a3-bc1d-4830-8dee-7532c6a23b9a
              6ba360a0-1f73-4ee7-861e-95f6c1ed6410
              15410d17-687c-46fa-bbd9-f255741a1523
              c2c64ef7-8f5c-470e-915f-f5e3da04e1df
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, TagList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              tag_list = TagList(
                  client=client,
                  list_name="ua_tags_cool_list",
                  description="example list"
              )

              tag_list.upload(file_path="path/to/file.csv")
          - lang: ruby
            source: |
              require 'urbanairship'
              UA = Urbanairship
              airship = UA::Client.new(key: 'app_key', secret: 'master_secret')

              tag_list = UA::TagList.new(client: airship)
              tag_list.name = 'ua_tags_list_name'
              tag_list.upload(csv_file: 'file_content', gzip: true)
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();
                      
              TagListUploadRequest tagListUploadRequest =
              TagListUploadRequest.newRequest("ua_tags_cool_list",
              "path/to/file.csv");

              Response<GenericResponse> response =
              client.execute(tagListUploadRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/json

              {
                "ok" : true
              }
        showMissingLanguagePlaceholders: true
      - description: Tag list CSV upload for SMS
        examples:
          - lang: HTTP
            source: |
              PUT /api/tag-lists/ua_tags_foobar/csv HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: text/csv

              msisdn,sms_sender,firstName
              5035556789,18588675309,Jane
              4155551212,18588675309,Rory
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, TagList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              tag_list = TagList(
                  client=client,
                  list_name="ua_tags_foobar",
                  description="example list"
              )

              tag_list.upload(file_path="path/to/sms_file.csv")
          - lang: ruby
            source: |
              require 'urbanairship'
              UA = Urbanairship
              airship = UA::Client.new(key: 'app_key', secret: 'master_secret')

              tag_list = UA::TagList.new(client: airship)
              tag_list.name = 'ua_tags_list_name'
              tag_list.upload(csv_file: 'sms_file_content', gzip: true)
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TagListUploadRequest tagListUploadRequest =
              TagListUploadRequest.newRequest("ua_tags_cool_list",
              "path/to/sms_file.csv.csv");

              Response<GenericResponse> response =
              client.execute(tagListUploadRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/json

              {
                "ok" : true
              }
  '/api/tag-lists/{list_name}/errors':
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/tag-lists/ua_tags_foobar/errors HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+csv; version=3
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, TagList
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              tag_list = TagList(
                airship=client, 
                list_name="ua_tags_foobar", 
                description="example list", 
              )

              errors = tag_list.get_errors()
          - lang: ruby
            source: |
              require 'urbanairship'
              UA = Urbanairship
              airship = UA::Client.new(key: 'app_key', secret: 'master_secret')

              tag_list = UA::TagList.new(client: airship)
              error_csv = tag_list.errors
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TagListErrorsRequest request =
              TagListErrorsRequest.newRequest("ua_tags_foobar");

              Response<String> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: text/csv

              8b4de669-16f1-4e71-9a1f-0c62a8235a65,ERROR,"Unknown channel"
              abcd,ERROR,"Invalid msisdn"
        showMissingLanguagePlaceholders: true
  /api/templates:
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/templates HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateListingRequest request =
              TemplateListingRequest.newRequest();

              Response<TemplateListingRequest> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # List all templates
              for template in TemplateList(client):
                  print(
                      f"Template ID: {template.template_id}\n"
                      f"Created: {template.created_at}\n"
                      f"Modified: {template.modified_at}\n"
                      f"Last Used: {template.last_used}\n"
                      f"Name: {template.name}\n"
                      f"Description: {template.description}\n"
                      f"Variables: {template.variables}\n"
                      f"Push: {template.push}"
                  )
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: templates
              Count: 1
              Total-Count: 1
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "count": 1,
                  "total_count": 1,
                  "templates": [
                      {
                          "id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                          "created_at": "2020-08-17T11:10:01Z",
                          "modified_at": "2020-08-17T11:10:01Z",
                          "last_used": null,
                          "name": "Welcome Message",
                          "description": "Our welcome message",
                          "variables": [
                              {
                                  "key": "TITLE",
                                  "name": "Title",
                                  "description": "e.g., Mr, Ms, Dr, etc.",
                                  "default_value": ""
                              },
                              {
                                  "key": "FIRST_NAME",
                                  "name": "First Name",
                                  "description": "Given name",
                                  "default_value": null
                              },
                              {
                                  "key": "LAST_NAME",
                                  "name": "Last Name",
                                  "description": "Family name",
                                  "default_value": null
                              }
                          ],
                          "push": {
                              "notification": {
                                  "alert": "Hello {{FIRST_NAME}}, this is your welcome message!"
                              }
                          }
                      }
                  ],
                  "next_page": null,
                  "prev_page": null
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Welcome Message",
                  "description": "Our welcome message",
                  "variables": [
                      {
                          "key": "TITLE",
                          "name": "Title",
                          "description": "e.g., Mr, Ms, Dr, etc.",
                          "default_value": ""
                      },
                      {
                          "key": "FIRST_NAME",
                          "name": "First Name",
                          "description": "Given name",
                          "default_value": null
                      },
                      {
                          "key": "LAST_NAME",
                          "name": "Last Name",
                          "description": "Family name",
                          "default_value": null
                      }
                  ],
                  "push": {
                      "notification": {
                          "alert": "Hello {{FIRST_NAME}}, this is your welcome message!"
                      }
                  }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateVariable titleVariable = TemplateVariable.newBuilder()
                      .setKey("TITLE")
                      .setName("Title")
                      .setDescription("e.g., Mr, Ms, Dr, etc.")
                      .setDefaultValue("")
                      .build();

              TemplateVariable firstNameVariable = TemplateVariable.newBuilder()
                      .setKey("FIRST_NAME")
                      .setName("First Name")
                      .setDescription("Given name")
                      .setDefaultValue(null)
                      .build();

              TemplateVariable lastNameVariable = TemplateVariable.newBuilder()
                      .setKey("LAST_NAME")
                      .setName("Last Name")
                      .setDescription("Family name")
                      .setDefaultValue("")
                      .build();

              PartialPushPayload partialPushPayload =
              PartialPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("Hello {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!")
                              .build()
                      )
                      .build();

              TemplateRequest request = TemplateRequest.newRequest()
                      .setName("Welcome Message")
                      .setDescription("Our welcome message")
                      .addVariable(titleVariable)
                      .addVariable(firstNameVariable)
                      .addVariable(lastNameVariable)
                      .setPush(partialPushPayload);

              Response<TemplateResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              # Create a new template

              template = Template(client)

              template.name = 'Welcome Message'

              template.description = 'Our welcome message'

              template.variables = [
                  {
                      'key': 'TITLE',
                      'name': 'Title',
                      'description': 'e.g., Mr., Ms., Dr., etc.',
                      'default_value': ''
                  },
                  {
                      'key': 'FIRST_NAME',
                      'name': 'First Name',
                      'description': 'Given name',
                      'default_value': None
                  },
                  {
                      'key': 'LAST_NAME',
                      'name': 'Last Name',
                      'description': 'Family name',
                      'default_value': None
                  }
              ]

              template.push = {
                  'notification': {
                      'alert': 'Hello {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!'
                  }
              }

              response = template.create()

              print(f"Template ID: {template.template_id}")  # To get the
              template ID for future use


              # List all templates

              for template in TemplateList(client):
                  print(
                      f"Template ID: {template.template_id}\n"
                      f"Created: {template.created_at}\n"
                      f"Modified: {template.modified_at}\n"
                      f"Last Used: {template.last_used}\n"
                      f"Name: {template.name}\n"
                      f"Description: {template.description}\n"
                      f"Variables: {template.variables}\n"
                      f"Push: {template.push}"
                  )

              # Send a push using a template

              push = client.create_push()

              push.device_types = ['ios']

              push.audience = {
                  'ios_channel': 'b8f9b663-0a3b-cf45-587a-be880946e881'
              }

              push.merge_data = merge_data(
                  template_id='ef34a8d9-0ad7-491c-86b0-aea74da15161',
                  substitutions={
                      'FIRST_NAME': 'Bob',
                      'LAST_NAME': 'Smith',
                      'TITLE': ''
                  }
              )

              response = push.send()
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Location:
              https://go.urbanairship.com/api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161

              Content-Type: application/vnd.urbanairship+json; version=3


              {
                  "ok" : true,
                  "operation_id" : "9ce808c8-7176-45dc-b79e-44aa74249a5a",
                  "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161"
              }
        showMissingLanguagePlaceholders: true
  /api/templates/push:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/push HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "device_types": [ "ios" ],
                  "audience": {
                     "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881"
                  },
                  "merge_data": {
                      "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "substitutions": {
                          "FIRST_NAME": "Bob",
                          "LAST_NAME": "Smith",
                          "TITLE": ""
                      }
                  }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplatePushPayload payload = TemplatePushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("b8f9b663-0a3b-cf45-587a-be880946e881"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .setMergeData(TemplateSelector.newBuilder()
                              .setTemplateId("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                              .addSubstitution("FIRST_NAME", "Bob")
                              .addSubstitution("LAST_NAME", "Smith")
                              .addSubstitution("TITLE", "Mr.")
                              .build())
                      .build();

              TemplatePushRequest request = TemplatePushRequest.newRequest()
                      .addTemplatePushPayload(payload);

              Response<TemplateResponse> response = client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              # Send a push using a template
              push = client.create_push()
              push.device_types = ['ios']
              push.audience = {
                  'ios_channel': 'b8f9b663-0a3b-cf45-587a-be880946e881'
              }
              push.merge_data = merge_data(
                  template_id='ef34a8d9-0ad7-491c-86b0-aea74da15161',
                  substitutions={
                      'FIRST_NAME': 'Bob',
                      'LAST_NAME': 'Smith',
                      'TITLE': ''
                  }
              )
              response = push.send()
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Length: 123
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "operation_id" : "df6a6b50-9843-0304-d5a5-743f246a4946",
                  "push_ids": [
                      "1cbfbfa2-08d1-92c2-7119-f8f7f670f5f6"
                  ]
              }
        showMissingLanguagePlaceholders: true
  /api/templates/push/validate:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/push/validate HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "device_types": [ "ios" ],
                  "audience": {
                     "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881"
                  },
                  "merge_data": {
                      "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "substitutions": {
                          "FIRST_NAME": "Bob",
                          "LAST_NAME": "Smith",
                          "TITLE": ""
                      }
                  }
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplatePushPayload payload = TemplatePushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("b8f9b663-0a3b-cf45-587a-be880946e881"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .setMergeData(TemplateSelector.newBuilder()
                              .setTemplateId("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                              .addSubstitution("FIRST_NAME", "Bob")
                              .addSubstitution("LAST_NAME", "Smith")
                              .addSubstitution("TITLE", "Mr.")
                              .build())
                      .build();

              TemplatePushRequest request = TemplatePushRequest.newRequest()
                      .addTemplatePushPayload(payload)
                      .setValidateOnly(true);

              Response<TemplateResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Length: 123
              Data-Attribute: push_ids
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true
              }
        showMissingLanguagePlaceholders: true
  /api/templates/schedules:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/schedules HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              [
                  {
                      "name": "Hello Bob",
                      "schedule": {
                         "scheduled_time": "2020-05-02T22:00:00Z"
                      },
                      "device_types": [ "ios" ],
                      "audience": {
                         "ios_channel": "b8f9b663-0a3b-cf45-587a-be880946e881"
                      },
                      "merge_data": {
                          "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                          "substitutions": {
                              "FIRST_NAME": "Bob",
                              "LAST_NAME": "Takahashi",
                              "TITLE": null
                          }
                      }
                  },
                  {
                      "name": "Hello Joe",
                      "schedule": {
                         "scheduled_time": "2020-05-05T18:00:00Z"
                      },
                      "device_types": [ "android" ],
                      "audience": {
                         "android_channel": "df6a6b50-9843-0304-d5a5-743f246a4946"
                      },
                      "merge_data": {
                          "template_id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                          "substitutions": {
                              "FIRST_NAME": "Joe",
                              "LAST_NAME": "Smith",
                              "TITLE": "Sir"
                          }
                      }
                  }
              ]
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateScheduledPushPayload payload =
              TemplateScheduledPushPayload.newBuilder()
                      .setAudience(Selectors.iosChannel("b8f9b663-0a3b-cf45-587a-be880946e881"))
                      .setDeviceTypes(DeviceTypeData.of(DeviceType.IOS))
                      .setMergeData(TemplateSelector.newBuilder()
                              .setTemplateId("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                              .addSubstitution("FIRST_NAME", "Bob")
                              .addSubstitution("LAST_NAME", "Takahashi")
                              .addSubstitution("TITLE", "Dr.")
                              .build())
                      .setSchedule(Schedule.newBuilder()
                              .setScheduledTimestamp(DateTime.parse("2020-05-05T18:00:00Z"))
                              .build())
                      .build();

              TemplateScheduledPushRequest request =
              TemplateScheduledPushRequest.newRequest()
                                                        .addTemplateScheduledPushPayload(payload);
              Response<ScheduleResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Length: 123
              Data-Attribute: schedule_urls
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "operation_id" : "efb18e92-9a60-6689-45c2-82fedab36399",
                  "schedule_urls" : [
                      "http://go.urbanairship/api/schedules/a0cef4f9-1fcd-47ef-b459-01f432b64043",
                      "http://go.urbanairship/api/schedules/fe2dab5e-f837-4707-8d0c-0e8c589ef4cf"
                  ],
                  "schedule_ids" : [
                      "a0cef4f9-1fcd-47ef-b459-01f432b64043",
                      "fe2dab5e-f837-4707-8d0c-0e8c589ef4cf"
                  ],
                  "schedules" : [
                      {
                          "url" : "http://go.urbanairship/api/schedules/a0cef4f9-1fcd-47ef-b459-01f432b64043",
                          "name": "Hello Joe",
                          "schedule" : { "..." },
                          "push" : { "..." },
                          "push_ids": [ "6a5ecb9c-46ee-4af4-9ced-9308121afaf9" ]
                      },
                      {
                          "url" : "http://go.urbanairship/api/schedules/fe2dab5e-f837-4707-8d0c-0e8c589ef4cf",
                          "name": "Hello Bob",
                          "schedule" : { "..." },
                          "push" : { "..." },
                          "push_ids": [ "5162bbf8-7de7-4040-a64d-e018b71f02f6" ]
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/templates/{template_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              DELETE /api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161
              HTTP/1.1

              Authorization: Basic <master authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateDeleteRequest request =
              TemplateDeleteRequest.newRequest("ef34a8d9-0ad7-491c-86b0-aea74da15161");

              Response<TemplateResponse> response = client.execute(request);
          - lang: python
            source: >
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )


              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )


              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'


              # Delete via template lookup

              response = Template(client).lookup(template_id).delete()


              # OR, if you want to delete a template without fetching it from
              the API

              response = Template(client).delete(template_id)
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "a6394ff8-8a65-4494-ad06-677eb8b7ad6a"
              }
        showMissingLanguagePlaceholders: true
    get:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              GET /api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              TemplateListingRequest request =
              TemplateListingRequest.newRequest("ef34a8d9-0ad7-491c-86b0-aea74da15161");

              Response<TemplateListingResponse> response =
              client.execute(request);
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'
              template = Template(client).lookup(template_id)
              print(
                  template.template_id, template.created_at, template.modified_at,
                  template.last_used, template.name, template.description,
                  template.variables, template.push
              )
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Data-Attribute: template
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok" : true,
                  "template": {
                      "id": "ef34a8d9-0ad7-491c-86b0-aea74da15161",
                      "created_at": "2020-08-17T11:10:02Z",
                      "modified_at": "2020-08-17T11:10:02Z",
                      "last_used": null,
                      "name": "Welcome Message",
                      "description": "Our welcome message",
                      "variables": [
                          {
                              "key": "TITLE",
                              "name": "Title",
                              "description": "e.g., Mr, Ms, Dr, etc.",
                              "default_value": ""
                          },
                          {
                              "key": "FIRST_NAME",
                              "name": "First Name",
                              "description": "Given name",
                              "default_value": null
                          },
                          {
                              "key": "LAST_NAME",
                              "name": "Last Name",
                              "description": "Family name",
                              "default_value": null
                          }
                      ],
                      "push": {
                          "notification": {
                              "alert": "Hello {{FIRST_NAME}}, this is your welcome message!"
                          }
                      }
                  }
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/templates/ef34a8d9-0ad7-491c-86b0-aea74da15161 HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "name": "Welcome Message",
                  "description": "Our welcome message",
                  "push": {
                      "notification": {
                          "alert": "Hello {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!"
                      }
                  }
              }
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PartialPushPayload partialPushPayload =
              PartialPushPayload.newBuilder()
                      .setNotification(Notification.newBuilder()
                              .setAlert("Hello {{FIRST_NAME}} {{LAST_NAME}}, this is your welcome message!")
                              .build()
                      )
                      .build();

              TemplateRequest request =
              TemplateRequest.newRequest("ef34a8d9-0ad7-491c-86b0-aea74da15161")
                      .setName("Welcome Message")
                      .setDescription("Our welcome message")
                      .setPush(partialPushPayload);

              Response<TemplateResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "ok": true,
                  "operation_id": "df6a6b50-9843-0304-d5a5-743f246a4946"
              }
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'
              updated_template = Template(client)
              updated_template.push = {
                  'notification': {
                      'alert': 'Hi {{FIRST_NAME}} {{LAST_NAME}}!'
                  }
              }
              response = updated_template.update(template_id)
        showMissingLanguagePlaceholders: true
      - description: 'Alternatively, call the lookup function on your updated template:'
        examples:
          - lang: python
            source: |
              from urbanairship import (
                  BasicAuthClient, Template, TemplateList, merge_data
              )

              client = BasicAuthClient(
                  key='<app_key>',
                  secret='<master_secret>'
              )

              template_id = 'ef34a8d9-0ad7-491c-86b0-aea74da15161'
              updated_template = Template(client).lookup(template_id)
              updated_template.push = {
                  'notification': {
                      'alert': 'Greetings {{TITLE}} {{FIRST_NAME}} {{LAST_NAME}}!'
                  }
              }
              response = updated_template.update()
  /api/user:
    post:
      - description: |
          Example create a rich push user
        examples:
          - lang: HTTP
            source: |
              POST /api/user/ HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "alias": "user1",
                "tags": ["tag1", "tag2"],
                "android_channels": ["6368d6f8-5c69-4f91-bec4-870239ab28bf"],
                "ua_device_id": "<UUID identifier>"
              }
          - lang: HTTP
            source: |
              HTTP/1.1 201 Created
              Authorization: Basic <application authorization string>
              Content-Type: application/json; charset=utf-8

              {
                "user_url": "https://go.urbanairship.com/api/user/example_user_id/",
                "user_id": "example_user_id",
                "password": "example_password",
                "apids": ["6368d6f8-5c69-4f91-bec4-870239ab28bf"],
                "ios_channels": ["6368d6f8-5c69-4f91-bec4-870239ab28bf"],
                "device_tokens": [],
                "device_pins": []
              }
        showMissingLanguagePlaceholders: true
  /api/user/messages/batch-delete:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/user/messages/batch-delete HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                  "message_ids": [
                      "drKa4OdxEeyhSwJC9TkdtQ",
                      "W5ersOdxEeyvwAJCxz92iA"
                  ]
              }
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();
                      
               List<String> arrayList = new ArrayList<>();
               arrayList.add("9dWD3LBIS5iZ51Y1GwOi4Q");
               arrayList.add("lsDtpTBJTN6KpQTwfOSNbw");

               InboxBatchDeleteRequest inboxBatchDeleteRequest = InboxBatchDeleteRequest.newRequest(arrayList);
               Response<InboxBatchDeleteResponse> response = client.execute(inboxBatchDeleteRequest);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "deleted_message_ids": [
                      "W5ersOdxEeyvwAJCxz92iA",
                      "drKa4OdxEeyhSwJC9TkdtQ"
                 ],
                 "errors": []
              }
          - lang: HTTP
            source: |
              HTTP/1.1 404 Not Found
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                  "deleted_message_ids": [],
                  "errors": [
                      {
                          "message_id": "drKa4OdxEeyhSwJC9Tkdt1",
                          "error_message": "Message not found.",
                          "error_code": 40404
                      },
                      {
                          "message_id": "W5ersOdxEeyvwAJCxz92i1",
                          "error_message": "Message not found.",
                          "error_code": 40404
                      }
                  ]
              }
        showMissingLanguagePlaceholders: true
  '/api/user/messages/{push_id}':
    delete:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              DELETE /api/user/messages/(push_id) HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: python
            source: >
              from urbanairship import BasicAuthClient, Push


              client = BasicAuthClient(
                 key='<app_key>',
                 secret='<master_secret>'
              )


              Push.message_center_delete(airship=client,
              push_id="941086fd-f7db-493b-a8a7-1f5a7dc6aae4")
          - lang: java
            source: |
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

               InboxDeleteRequest request = InboxDeleteRequest.newRequest("68b2d71f-1c10-4592-bd96-2725aee0ae57");
               Response<GenericResponse> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 202 Accepted
              Content-Type: application/vnd.urbanairship+json; version=3

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}':
    get:
      - description: |
          Example
        examples:
          - lang: HTTP
            source: |
              GET /api/user/<user_id>/ HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json; charset=utf-8

              {
                "user_url": "https://go.urbanairship.com/api/user/example_user_id/",
                "user_id": "example_user_id",
                "ios_channels": ["6368d6f8-5c69-4f91-bec4-870239ab28bf"],
                "device_tokens": [],
                "device_pins": [],
                "apids": []
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: |
          Example request (Android)
        examples:
          - lang: HTTP
            source: |
              POST /api/user/<user_id>/ HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "android_channels": {
                    "add":["6368d6f8-5c69-4f91-bec4-870239ab28bf"]
                }
              }
        showMissingLanguagePlaceholders: true
      - description: |
          Example request (iOS)
        examples:
          - lang: HTTP
            source: |
              POST /api/user/<user_id>/ HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "ios_channels": {
                    "add":["6368d6f8-5c69-4f91-bec4-870239ab28bf"]
                },
                "device_tokens": {
                    "remove":["686ba477da73fb432a5ec25b28a2e8379e1c02234655458e5ee98b90c6a106c6"]
                }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}/messages':
    get:
      - description: |
          Example list user messages
        examples:
          - lang: HTTP
            source: |
              GET /api/user/some_user_id/messages/ HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "messages" : [
                    {
                      "content_size" : 123,
                      "content_type" : "text/html",
                      "extra" : {
                          "some_key" : "some_value"
                      },
                      "icons": {
                          "list_icon": "some_uri"
                      },
                      "options": {
                          "some_key" : "some_value"
                      },
                      "title" : "Some Message Title",
                      "unread" : true,
                      "message_id" : "some_message_id",
                      "message_sent" : "2015-12-12 08:00:00",
                      "message_expiry" : "2015-12-31 08:00:00",
                      "message_url": "https://go.urbanairship.com/api/user/some_user_id/messages/some_message_id/",
                      "message_reporting": {
                        "message_id": "some_message_id",
                        "group_id": "some_group_id",
                        "variant_id": 1
                      }
                    },
                    {
                      "content_size" : 435,
                      "..." : "..."
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}/messages/delete':
    post:
      - description: |
          Example batch delete user messages
        examples:
          - lang: HTTP
            source: |
              POST /api/user/some_user_id/messages/delete HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "delete": [
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_1/",
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_2/",
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_3/",
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_4/"
                ],
                "messages": [
                  {
                    "message_id": "some_message_id_1",
                    "group_id": "some_group_1",
                    "variant_id": 1
                  }
                ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}/messages/message/{message_id}':
    delete:
      - description: |
          Example delete user message
        examples:
          - lang: HTTP
            source: >
              DELETE /api/user/some_user_id/messages/message/some_message_id/
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
    get:
      - description: |
          Example get user message
        examples:
          - lang: HTTP
            source: >
              GET /api/user/some_user_id/messages/message/some_message_id/
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "content_size" : 123,
                "content_type" : "text/html",
                "message" : "<html>Some Message</html>",
                "extra" : {
                    "some_key" : "some_value"
                },
                "icons": {
                    "list_icon": "some_uri"
                },
                "options": {
                    "some_key" : "some_value"
                },
                "title" : "Some Message Title",
                "unread" : true,
                "message_id" : "some_message_id",
                "message_sent" : "2015-12-12 08:00:00",
                "message_expiry" : "2015-12-31 08:00:00",
                "message_url": "https://go.urbanairship.com/api/user/some_user_id/messages/some_message_id/",
              }
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}/messages/message/{message_id}/body':
    get:
      - description: |
          Example get user message body
        examples:
          - lang: HTTP
            source: >
              GET /api/user/some_user_id/messages/message/some_message_id/body/
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: text/html;charset=utf-8
              Content-Length: 100

              <html>Some message body</html>
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}/messages/message/{message_id}/read':
    post:
      - description: |
          Example mark user message as read
        examples:
          - lang: HTTP
            source: >
              POST /api/user/some_user_id/messages/message/some_message_id/read/
              HTTP/1.1

              Authorization: Basic <authorization string>

              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/api/user/{user_id}/messages/unread':
    get:
      - description: |
          Example list unread user messages
        examples:
          - lang: HTTP
            source: |
              GET /api/user/some_user_id/messages/unread HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "messages" : [
                    {
                      "content_size" : 123,
                      "content_type" : "text/html",
                      "extra" : {
                          "some_key" : "some_value"
                      },
                      "icons": {
                          "list_icon": "some_uri"
                      },
                      "options": {
                          "some_key" : "some_value"
                      },
                      "title" : "Some Message Title",
                      "unread" : true,
                      "message_id" : "some_message_id",
                      "message_sent" : "2015-12-12 08:00:00",
                      "message_expiry" : "2015-12-31 08:00:00",
                      "message_url": "https://go.urbanairship.com/api/user/some_user_id/messages/some_message_id/",
                      "message_reporting": {
                        "message_id": "some_message_id",
                        "group_id": "some_group_id",
                        "variant_id": 1
                      }
                    },
                    {
                      "content_size" : 435,
                      "..." : "..."
                    }
                ]
              }
        showMissingLanguagePlaceholders: true
    post:
      - description: |
          Example mark several user messages read
        examples:
          - lang: HTTP
            source: |
              POST /api/user/some_user_id/messages/unread HTTP/1.1
              Authorization: Basic <authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                "mark_as_read": [
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_1/",
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_2/",
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_3/",
                    "https://go.urbanairship.com/api/user/some_user_id/messages/message/some_message_id_4/"
                ],
                "messages": [
                  {
                    "message_id": "some_message_id_1",
                    "group_id": "some_group_1",
                    "variant_id": 1
                  }
                ]
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                "ok": true
              }
        showMissingLanguagePlaceholders: true
  /api/web-channels:
    post:
      - description: Example Safari registration
        examples:
          - lang: HTTP
            source: |
              POST /api/web-channels HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel" : {
                    "device_type": "web",
                    "opt_in": true,
                    "push_address": "S26JIHLIGS7L5HGHJS35HJG7JH5G7JS",
                    "set_tags": true,
                    "tags": ["asdf"],
                    "timezone" : "America/Los_Angeles",
                    "locale_country" : "US",
                    "locale_language" : "en",
                    "web": {
                          "user_agent_string" : "Safari/6.1 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36",
                          "browser_name": "safari",
                          "browser_type" : "desktop",
                          "browser_version": "safari-61",
                          "web_sdk_version": "1.0.1",
                          "subscription" : {
                             "subscription_type": "apns",
                          }
                    }
                 }
              }
        showMissingLanguagePlaceholders: true
      - description: Example VAPID registration
        examples:
          - lang: HTTP
            source: |
              POST /api/web-channels HTTP/1.1
              Authorization: Basic <application authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "channel" : {
                    "device_type": "web",
                    "opt_in": true,
                    "push_address": "https://android.googleapis.com/gcm/send/f1LsxkKphfQ:APA91bFUx7ja4BK4JVrNgVjpg1cs9lGSGI6IMNL4mQ3Xe6mDGxvt",
                    "set_tags": true,
                    "tags": ["asdf"],
                    "timezone" : "America/Los_Angeles",
                    "locale_country" : "US",
                    "locale_language" : "en",
                    "web": {
                          "user_agent_string" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
                          "browser_name": "chrome",
                          "browser_type" : "desktop",
                          "browser_version": "chrome-53",
                          "web_sdk_version": "1.0.1",
                          "subscription" : {
                             "subscription_type": "vapid",
                             "keys": {
                                "p256dh":"BLc4xRzKlKORKWlbdgFaBrrPK3ydWAHo4M0gs0i1oEKgPpWC5cW8OCzVrOQRv-1npXRWk8udnW3oYhIO4475rds=",
                                "auth":"5I2Bu2oKdyy9CwL8QVF0NQ=="
                             }
                          }
                    }
                 }
              }
          - lang: HTTP
            source: >
              HTTP/1.1 201 Created

              Content-Type: application/json

              Location:
              https://aswpapius.com/api/channels/df6a6b50-9843-0304-d5a5-743f246a4946


              {
                 "ok": true,
                 "channel_id": "df6a6b50-9843-0304-d5a5-743f246a4946"
              }
        showMissingLanguagePlaceholders: true
  /api/web-channels/tags:
    post:
      - description: Example
        examples:
          - lang: HTTP
            source: |
              POST /api/web-channels/tags/ HTTP/1.1
              Authorization: Basic <master authorization string>
              Accept: application/vnd.urbanairship+json; version=3
              Content-Type: application/json

              {
                 "audience": {
                    "channel": ["bbbbb663-aaab-cccc-587abbbbbbcccceee", "05404150-a262-45c6-9672-33d35be52726"]
                 },
                 "add": {
                    "my_fav_tag_group1": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group2": ["tag1", "tag2", "tag3"],
                    "my_fav_tag_group3": ["tag1", "tag2", "tag3"]
                 }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 Ok
              Content-Type: application/json

              {
                 "ok": true,
                 "warnings": ["The following tag groups do not exist: my_fav_tag_group2", "The following tag groups are deactivated: my_fav_tag_group3"]
              }
        showMissingLanguagePlaceholders: true
  '/api/web-channels/{channel_id}':
    put:
      - description: Example
        examples:
          - lang: HTTP
            source: >
              PUT /api/web-channels/df6a6b50-9843-0304-d5a5-743f246a4946
              HTTP/1.1

              Authorization: Bearer <application authorization string>

              Accept: application/vnd.urbanairship+json; version=3

              Content-Type: application/json


              {
                 "channel": {
                    "device_type": "web",
                    "opt_in": true,
                    "timezone": "America/Los_Angeles",
                    "locale_language": "en",
                    "locale_country": "US",
                    "web": {
                       "user_agent_string": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36",
                       "browser_name": "chrome",
                       "browser_version": "chrome-54",
                       "browser_type": "desktop",
                       "web_sdk_version": "0.0.1"
                    }
                 }
              }
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json

              {
                 "ok": true
              }
        showMissingLanguagePlaceholders: true
  '/binary/app/{id}':
    get:
      - description: Example get app content
        examples:
          - lang: HTTP
            source: |
              GET /binary/app/ef34a8d9-0ad7-491c-86b0-aea74da15161 HTTP/1.1
              Authorization: Basic <application authorization string>
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/octet-stream

              Binary content.
        showMissingLanguagePlaceholders: true
  '/binary/public/{context_id}/{id}':
    get:
      - description: Example get public content
        examples:
          - lang: HTTP
            source: >
              GET
              /binary/public/qkdtins32bur04jzepkq13/ef34a8d9-0ad7-491c-86b0-aea74da15161
              HTTP/1.1

              Authorization: Basic <application authorization string>
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/octet-stream

              Binary content.
        showMissingLanguagePlaceholders: true
  '/binary/render/app/{body_id}/{model_id}':
    get:
      - description: Example get rendered template app content
        examples:
          - lang: HTTP
            source: >
              GET
              /binary/render/app/ef34a8d9-0ad7-491c-86b0-aea74da15161/9d78a53b-b16a-c58f-b78d-181d5e242078
              HTTP/1.1

              Authorization: Basic <application authorization string>
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: text/html

              <html>
                <body>
                  Hello, John Smith!
                </body>
              </html>
        showMissingLanguagePlaceholders: true
  '/binary/render/token/{context_id}/{body_id}/{model_id}':
    get:
      - description: Example get rendered template app content
        examples:
          - lang: HTTP
            source: >
              GET
              /binary/render/token/AbcDefGhiJkl015sdgaADD/ef34a8d9-0ad7-491c-86b0-aea74da15161/9d78a53b-b16a-c58f-b78d-181d5e242078?t=U1S10O0CQGuXC-Phgkzh2O5v7tvYg0KEyMl3aQUFDjY&d=XclaHxf66oG0iIf9dz2aJ2YeFimhL7-UETukkxhXaJk
              HTTP/1.1

              Authorization: Basic <application authorization string>
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: text/html

              <html>
                <body>
                  Hello, John Smith!
                </body>
              </html>
        showMissingLanguagePlaceholders: true
  '/binary/token/{context_id}/{id}':
    get:
      - description: Example get token content
        examples:
          - lang: HTTP
            source: >
              GET
              /binary/token/AbcDefGhiJkl015sdgaADD/ef34a8d9-0ad7-491c-86b0-aea74da15161?t=U1S10O0CQGuXC-Phgkzh2O5v7tvYg0KEyMl3aQUFDjY&d=XclaHxf66oG0iIf9dz2aJ2YeFimhL7-UETukkxhXaJk
              HTTP/1.1

              Authorization: Basic <application authorization string>
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/octet-stream

              Binary content.
        showMissingLanguagePlaceholders: true
  /token:
    post:
      - description: Example request token with Basic Auth
        examples:
          - lang: HTTP
            source: >
              POST /token HTTP/1.1

              Host: oauth2.asnapius.com

              Content-Type: application/x-www-form-urlencoded

              Accept: application/json

              Authorization: Basic <base64 encoded string of
              "client_id:client_secret">


              grant_type=client_credentials&sub=app:JQIMcndxIHWy2QISpt1SpZ&scope=chn&scope=nu&ipaddr=24.20.40.0/24&ipaddr=2001:4860:4860::8888/32
          - lang: java
            source: >
              OAuthCredentials oAuthCredentials =
              OAuthCredentials.newBuilder("<client_id>")
                      .setClientSecret("<client_secret>")
                      .setSub("<sub>")
                      .setScopes(Arrays.asList("<scope1>","<scope2>","<...>"))
                      .setIpAddresses(Arrays.asList("<IP1>","<IP2>",<...>))
                      .build();

              UrbanAirshipClient oAuthClient = UrbanAirshipClient.newBuilder()
                      .setKey("yourAppKey")
                      .setOAuthCredentials(oAuthCredentials)
                      .build();
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json
              Cache-Control: no-store
              Pragma: no-cache

              {
                "access_token": "<token>",
                "token_type": "Bearer",
                "scope": "chn nu",
                "expires_in": 3600
              }
        showMissingLanguagePlaceholders: true
      - description: Example request token with assertion
        examples:
          - lang: HTTP
            source: |
              POST /token HTTP/1.1
              Host: oauth2.asnapius.com
              Content-Type: application/x-www-form-urlencoded
              Accept: application/json

              grant_type=client_credentials&assertion=<encoded_jwt>
          - lang: java
            source: >
              OAuthCredentials oAuthCredentials =
              OAuthCredentials.newBuilder("<client_id>")
                      .setAssertionJWT("<encoded_jwt>")
                      .build();

              UrbanAirshipClient oAuthClient = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setOAuthCredentials(oAuthCredentials)
                      .build();
          - lang: python
            source: |
              # The python OAuth client handles JWT creation 
              # and token refresh automatically.
              # Once instantiated, this can be used as any other Airship client.

              airship_client = OAuthClient(
                client_id="<client_id>",
                private_key="<private_key>",
                key="<project_key>",
                scope=["<scopes>",],
                id_addr=["<ip list>",],
                timeout="<timeout seconds int>",
                retries="<attempts on failure int>"
              )
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/json
              Cache-Control: no-store
              Pragma: no-cache

              {
                "access_token": "<token>",
                "token_type": "Bearer",
                "scope": "chn nu",
                "expires_in": 3600
              }
          - lang: ruby
            source: |
              require 'urbanairship'

              UA = Urbanairship
              app_key = '<application_key>'

              oauth = UA::Oauth.new(
                client_id: '<client_id>',
                key: app_key,
                assertion_private_key: '<your_private_key>',
                scopes: ['psh', 'chn'], # Optional
                ip_addresses: ['23.74.131.15/22'], # Optional
                oauth_server: 'api.asnapieu.com' # Optional
              )

              airship = UA::Client.new(key: app_key, oauth: oauth)
        showMissingLanguagePlaceholders: true
  '/verify/public_key/{kid}':
    get:
      - description: Example key verification
        examples:
          - lang: HTTP
            source: |
              GET /verify/public_key/8817e96 HTTP/1.1
              Host: oauth2.asnapius.com
              Accept: text/plain
          - lang: java
            source: >
              UrbanAirshipClient client = UrbanAirshipClient.newBuilder()
                      .setKey("<app key>")
                      .setSecret("<master secret>")
                      .build();

              PublicKeyVerificationRequest request =
              PublicKeyVerificationRequest.newRequest("<kid>");

              Response<String> response = client.execute(request);
          - lang: HTTP
            source: |
              HTTP/1.1 200 OK
              Content-Type: application/x-pem-file
              Cache-Control: max-age=600, must-revalidate

              -----BEGIN PUBLIC KEY-----
              MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE7tcTz03ypC7PSPa73Cbgl7AbDDo+92eH
              DWgjAi6vt1gmlHE35e+GhpcwbywBByOiooY+5bvfUHkc0aKy4R8VbBK0rYwlp8B+
              fxyDr9Ye/oiUewMwwlp0z5AMPjgBUIKS
              -----END PUBLIC KEY-----
          - lang: ruby
            source: |
              require 'urbanairship'

              UA = Urbanairship
              app_key = '<application_key>'

              oauth = UA::Oauth.new(
                client_id: '<client_id>',
                key: app_key,
                assertion_private_key: '<your_private_key>',
                scopes: ['psh', 'chn'], # Optional
                ip_addresses: ['23.74.131.15/22'], # Optional
                oauth_server: 'api.asnapieu.com' # Optional
              )

              public_key = oauth.verify_public_key('<key_id>')
        showMissingLanguagePlaceholders: false
